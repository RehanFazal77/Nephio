=== Kubernetes Control Plane + Nephio Setup Started ===
=== Checking dependencies ===
Get:1 http://security.ubuntu.com/ubuntu jammy-security InRelease [129 kB]
Hit:2 http://us.archive.ubuntu.com/ubuntu jammy InRelease
Get:3 http://us.archive.ubuntu.com/ubuntu jammy-updates InRelease [128 kB]
Get:4 http://us.archive.ubuntu.com/ubuntu jammy-backports InRelease [127 kB]
Fetched 384 kB in 4s (90.2 kB/s)
Reading package lists...
Package apt-transport-https not found. Installing...
Reading package lists...
Building dependency tree...
Reading state information...
The following NEW packages will be installed:
  apt-transport-https
0 upgraded, 1 newly installed, 0 to remove and 64 not upgraded.
Need to get 1510 B of archives.
After this operation, 170 kB of additional disk space will be used.
Get:1 http://us.archive.ubuntu.com/ubuntu jammy-updates/universe amd64 apt-transport-https all 2.4.14 [1510 B]
Fetched 1510 B in 0s (3815 B/s)
Selecting previously unselected package apt-transport-https.
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 113840 files and directories currently installed.)
Preparing to unpack .../apt-transport-https_2.4.14_all.deb ...
Unpacking apt-transport-https (2.4.14) ...
Setting up apt-transport-https (2.4.14) ...
Package ca-certificates is already installed.
Package curl is already installed.
Package gpg is already installed.
Package iptables is already installed.
Package iproute2 is already installed.
Package wget is already installed.
Package lsb-release is already installed.
=== 1. Updating system ===
Reading package lists...
Building dependency tree...
Reading state information...
Calculating upgrade...
The following packages have been kept back:
  linux-generic linux-headers-generic linux-image-generic needrestart
  sosreport
The following packages will be upgraded:
  apt apt-utils bind9-dnsutils bind9-host bind9-libs cloud-init cryptsetup
  cryptsetup-bin cryptsetup-initramfs distro-info-data dmeventd dmidecode
  dmsetup ethtool gir1.2-packagekitglib-1.0 initramfs-tools
  initramfs-tools-bin initramfs-tools-core landscape-common libapt-pkg6.0
  libcryptsetup12 libdevmapper-event1.02.1 libdevmapper1.02.1 libglib2.0-0
  libglib2.0-bin libglib2.0-data libldap-2.5-0 libldap-common liblvm2cmd2.03
  libmbim-glib4 libmbim-proxy libmm-glib0 libopeniscsiusr
  libpackagekit-glib2-18 libpcap0.8 libseccomp2 libssl3 linux-base lvm2
  modemmanager open-iscsi openssl packagekit packagekit-tools pci.ids
  pollinate powermgmt-base python3-update-manager snapd systemd-hwe-hwdb
  ubuntu-advantage-tools ubuntu-minimal ubuntu-pro-client
  ubuntu-pro-client-l10n ubuntu-server ubuntu-server-minimal ubuntu-standard
  update-manager-core xfsprogs
59 upgraded, 0 newly installed, 0 to remove and 5 not upgraded.
Need to get 43.7 MB/46.8 MB of archives.
After this operation, 13.3 MB of additional disk space will be used.
Get:1 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 libapt-pkg6.0 amd64 2.4.14 [912 kB]
Get:2 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 apt amd64 2.4.14 [1363 kB]
Get:3 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 apt-utils amd64 2.4.14 [211 kB]
Get:4 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 libseccomp2 amd64 2.5.3-2ubuntu3~22.04.1 [47.4 kB]
Get:5 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 libdevmapper1.02.1 amd64 2:1.02.175-2.1ubuntu5 [139 kB]
Get:6 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 libdevmapper-event1.02.1 amd64 2:1.02.175-2.1ubuntu5 [12.7 kB]
Get:7 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 dmsetup amd64 2:1.02.175-2.1ubuntu5 [81.7 kB]
Get:8 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 liblvm2cmd2.03 amd64 2.03.11-2.1ubuntu5 [757 kB]
Get:9 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 dmeventd amd64 2:1.02.175-2.1ubuntu5 [38.2 kB]
Get:10 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 lvm2 amd64 2.03.11-2.1ubuntu5 [1154 kB]
Get:11 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 libopeniscsiusr amd64 2.1.5-1ubuntu1.1 [67.4 kB]
Get:12 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 open-iscsi amd64 2.1.5-1ubuntu1.1 [323 kB]
Get:13 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 distro-info-data all 0.52ubuntu0.9 [5336 B]
Get:14 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 libcryptsetup12 amd64 2:2.4.3-1ubuntu1.3 [211 kB]
Get:15 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 libglib2.0-data all 2.72.4-0ubuntu2.6 [4698 B]
Get:16 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 libglib2.0-bin amd64 2.72.4-0ubuntu2.6 [80.9 kB]
Get:17 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 libglib2.0-0 amd64 2.72.4-0ubuntu2.6 [1467 kB]
Get:18 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 ubuntu-pro-client-l10n amd64 36ubuntu0~22.04 [20.6 kB]
Get:19 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 ubuntu-pro-client amd64 36ubuntu0~22.04 [237 kB]
Get:20 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 ubuntu-advantage-tools all 36ubuntu0~22.04 [10.9 kB]
Get:21 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 ubuntu-minimal amd64 1.481.4 [2928 B]
Get:22 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 bind9-host amd64 1:9.18.39-0ubuntu0.22.04.1 [52.5 kB]
Get:23 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 bind9-dnsutils amd64 1:9.18.39-0ubuntu0.22.04.1 [158 kB]
Get:24 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 bind9-libs amd64 1:9.18.39-0ubuntu0.22.04.1 [1263 kB]
Get:25 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 dmidecode amd64 3.3-3ubuntu0.2 [68.5 kB]
Get:26 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 libpcap0.8 amd64 1.10.1-4ubuntu1.22.04.1 [145 kB]
Get:27 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 pci.ids all 0.0~2022.01.22-1ubuntu0.1 [251 kB]
Get:28 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 powermgmt-base all 1.36ubuntu0.22.04.1 [7736 B]
Get:29 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 python3-update-manager all 1:22.04.22 [39.2 kB]
Get:30 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 update-manager-core all 1:22.04.22 [11.6 kB]
Get:31 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 ubuntu-standard amd64 1.481.4 [2948 B]
Get:32 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 initramfs-tools all 0.140ubuntu13.5 [9060 B]
Get:33 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 initramfs-tools-core all 0.140ubuntu13.5 [47.8 kB]
Get:34 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 initramfs-tools-bin amd64 0.140ubuntu13.5 [9330 B]
Get:35 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 linux-base all 4.5ubuntu9+22.04.1 [19.1 kB]
Get:36 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 cryptsetup-initramfs all 2:2.4.3-1ubuntu1.3 [25.6 kB]
Get:37 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 cryptsetup-bin amd64 2:2.4.3-1ubuntu1.3 [145 kB]
Get:38 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 cryptsetup amd64 2:2.4.3-1ubuntu1.3 [194 kB]
Get:39 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 ethtool amd64 1:5.16-1ubuntu0.2 [208 kB]
Get:40 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 libpackagekit-glib2-18 amd64 1.2.5-2ubuntu3 [124 kB]
Get:41 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 gir1.2-packagekitglib-1.0 amd64 1.2.5-2ubuntu3 [25.3 kB]
Get:42 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 landscape-common amd64 23.02-0ubuntu1~22.04.6 [88.9 kB]
Get:43 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 libldap-2.5-0 amd64 2.5.19+dfsg-0ubuntu0.22.04.1 [184 kB]
Get:44 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 libldap-common all 2.5.19+dfsg-0ubuntu0.22.04.1 [16.1 kB]
Get:45 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 libmbim-proxy amd64 1.28.0-1~ubuntu20.04.2 [6160 B]
Get:46 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 libmbim-glib4 amd64 1.28.0-1~ubuntu20.04.2 [192 kB]
Get:47 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 libmm-glib0 amd64 1.20.0-1~ubuntu22.04.4 [262 kB]
Get:48 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 modemmanager amd64 1.20.0-1~ubuntu22.04.4 [1094 kB]
Get:49 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 packagekit-tools amd64 1.2.5-2ubuntu3 [28.8 kB]
Get:50 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 packagekit amd64 1.2.5-2ubuntu3 [442 kB]
Get:51 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 pollinate all 4.33-3ubuntu2.1 [12.7 kB]
Get:52 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 snapd amd64 2.68.5+ubuntu22.04.1 [30.0 MB]
Get:53 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 systemd-hwe-hwdb all 249.11.6 [3668 B]
Get:54 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 xfsprogs amd64 5.13.0-1ubuntu2.1 [870 kB]
Get:55 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 ubuntu-server amd64 1.481.4 [2868 B]
Get:56 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 cloud-init all 25.2-0ubuntu1~22.04.1 [586 kB]
Get:57 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 ubuntu-server-minimal amd64 1.481.4 [2798 B]
Preconfiguring packages ...
Fetched 43.7 MB in 2min 20s (312 kB/s)
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 113844 files and directories currently installed.)
Preparing to unpack .../libapt-pkg6.0_2.4.14_amd64.deb ...
Unpacking libapt-pkg6.0:amd64 (2.4.14) over (2.4.13) ...
Setting up libapt-pkg6.0:amd64 (2.4.14) ...
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 113844 files and directories currently installed.)
Preparing to unpack .../archives/apt_2.4.14_amd64.deb ...
Unpacking apt (2.4.14) over (2.4.13) ...
Setting up apt (2.4.14) ...
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 113844 files and directories currently installed.)
Preparing to unpack .../apt-utils_2.4.14_amd64.deb ...
Unpacking apt-utils (2.4.14) over (2.4.13) ...
Preparing to unpack .../libseccomp2_2.5.3-2ubuntu3~22.04.1_amd64.deb ...
Unpacking libseccomp2:amd64 (2.5.3-2ubuntu3~22.04.1) over (2.5.3-2ubuntu2) ...
Setting up libseccomp2:amd64 (2.5.3-2ubuntu3~22.04.1) ...
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 113844 files and directories currently installed.)
Preparing to unpack .../0-libdevmapper1.02.1_2%3a1.02.175-2.1ubuntu5_amd64.deb ...
Unpacking libdevmapper1.02.1:amd64 (2:1.02.175-2.1ubuntu5) over (2:1.02.175-2.1ubuntu4) ...
Preparing to unpack .../1-libdevmapper-event1.02.1_2%3a1.02.175-2.1ubuntu5_amd64.deb ...
Unpacking libdevmapper-event1.02.1:amd64 (2:1.02.175-2.1ubuntu5) over (2:1.02.175-2.1ubuntu4) ...
Preparing to unpack .../2-dmsetup_2%3a1.02.175-2.1ubuntu5_amd64.deb ...
Unpacking dmsetup (2:1.02.175-2.1ubuntu5) over (2:1.02.175-2.1ubuntu4) ...
Preparing to unpack .../3-liblvm2cmd2.03_2.03.11-2.1ubuntu5_amd64.deb ...
Unpacking liblvm2cmd2.03:amd64 (2.03.11-2.1ubuntu5) over (2.03.11-2.1ubuntu4) ...
Preparing to unpack .../4-dmeventd_2%3a1.02.175-2.1ubuntu5_amd64.deb ...
Unpacking dmeventd (2:1.02.175-2.1ubuntu5) over (2:1.02.175-2.1ubuntu4) ...
Preparing to unpack .../5-lvm2_2.03.11-2.1ubuntu5_amd64.deb ...
Unpacking lvm2 (2.03.11-2.1ubuntu5) over (2.03.11-2.1ubuntu4) ...
Preparing to unpack .../6-libopeniscsiusr_2.1.5-1ubuntu1.1_amd64.deb ...
Unpacking libopeniscsiusr (2.1.5-1ubuntu1.1) over (2.1.5-1ubuntu1) ...
Preparing to unpack .../7-libssl3_3.0.2-0ubuntu1.20_amd64.deb ...
Unpacking libssl3:amd64 (3.0.2-0ubuntu1.20) over (3.0.2-0ubuntu1.19) ...
Setting up libssl3:amd64 (3.0.2-0ubuntu1.20) ...
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 113844 files and directories currently installed.)
Preparing to unpack .../00-open-iscsi_2.1.5-1ubuntu1.1_amd64.deb ...
Unpacking open-iscsi (2.1.5-1ubuntu1.1) over (2.1.5-1ubuntu1) ...
Preparing to unpack .../01-distro-info-data_0.52ubuntu0.9_all.deb ...
Unpacking distro-info-data (0.52ubuntu0.9) over (0.52ubuntu0.7) ...
Preparing to unpack .../02-libcryptsetup12_2%3a2.4.3-1ubuntu1.3_amd64.deb ...
Unpacking libcryptsetup12:amd64 (2:2.4.3-1ubuntu1.3) over (2:2.4.3-1ubuntu1.2) ...
Preparing to unpack .../03-libglib2.0-data_2.72.4-0ubuntu2.6_all.deb ...
Unpacking libglib2.0-data (2.72.4-0ubuntu2.6) over (2.72.4-0ubuntu2.5) ...
Preparing to unpack .../04-libglib2.0-bin_2.72.4-0ubuntu2.6_amd64.deb ...
Unpacking libglib2.0-bin (2.72.4-0ubuntu2.6) over (2.72.4-0ubuntu2.5) ...
Preparing to unpack .../05-libglib2.0-0_2.72.4-0ubuntu2.6_amd64.deb ...
Unpacking libglib2.0-0:amd64 (2.72.4-0ubuntu2.6) over (2.72.4-0ubuntu2.5) ...
Preparing to unpack .../06-openssl_3.0.2-0ubuntu1.20_amd64.deb ...
Unpacking openssl (3.0.2-0ubuntu1.20) over (3.0.2-0ubuntu1.19) ...
Preparing to unpack .../07-ubuntu-pro-client-l10n_36ubuntu0~22.04_amd64.deb ...
Unpacking ubuntu-pro-client-l10n (36ubuntu0~22.04) over (33.2~22.04) ...
Preparing to unpack .../08-ubuntu-pro-client_36ubuntu0~22.04_amd64.deb ...
Unpacking ubuntu-pro-client (36ubuntu0~22.04) over (33.2~22.04) ...
Preparing to unpack .../09-ubuntu-advantage-tools_36ubuntu0~22.04_all.deb ...
Unpacking ubuntu-advantage-tools (36ubuntu0~22.04) over (33.2~22.04) ...
Preparing to unpack .../10-ubuntu-minimal_1.481.4_amd64.deb ...
Unpacking ubuntu-minimal (1.481.4) over (1.481.3) ...
Preparing to unpack .../11-bind9-host_1%3a9.18.39-0ubuntu0.22.04.1_amd64.deb ...
Unpacking bind9-host (1:9.18.39-0ubuntu0.22.04.1) over (1:9.18.30-0ubuntu0.22.04.2) ...
Preparing to unpack .../12-bind9-dnsutils_1%3a9.18.39-0ubuntu0.22.04.1_amd64.deb ...
Unpacking bind9-dnsutils (1:9.18.39-0ubuntu0.22.04.1) over (1:9.18.30-0ubuntu0.22.04.2) ...
Preparing to unpack .../13-bind9-libs_1%3a9.18.39-0ubuntu0.22.04.1_amd64.deb ...
Unpacking bind9-libs:amd64 (1:9.18.39-0ubuntu0.22.04.1) over (1:9.18.30-0ubuntu0.22.04.2) ...
Preparing to unpack .../14-dmidecode_3.3-3ubuntu0.2_amd64.deb ...
Unpacking dmidecode (3.3-3ubuntu0.2) over (3.3-3ubuntu0.1) ...
Preparing to unpack .../15-libpcap0.8_1.10.1-4ubuntu1.22.04.1_amd64.deb ...
Unpacking libpcap0.8:amd64 (1.10.1-4ubuntu1.22.04.1) over (1.10.1-4build1) ...
Preparing to unpack .../16-pci.ids_0.0~2022.01.22-1ubuntu0.1_all.deb ...
Unpacking pci.ids (0.0~2022.01.22-1ubuntu0.1) over (0.0~2022.01.22-1) ...
Preparing to unpack .../17-powermgmt-base_1.36ubuntu0.22.04.1_all.deb ...
Unpacking powermgmt-base (1.36ubuntu0.22.04.1) over (1.36) ...
Preparing to unpack .../18-python3-update-manager_1%3a22.04.22_all.deb ...
Unpacking python3-update-manager (1:22.04.22) over (1:22.04.21) ...
Preparing to unpack .../19-update-manager-core_1%3a22.04.22_all.deb ...
Unpacking update-manager-core (1:22.04.22) over (1:22.04.21) ...
Preparing to unpack .../20-ubuntu-standard_1.481.4_amd64.deb ...
Unpacking ubuntu-standard (1.481.4) over (1.481.3) ...
Preparing to unpack .../21-initramfs-tools_0.140ubuntu13.5_all.deb ...
Unpacking initramfs-tools (0.140ubuntu13.5) over (0.140ubuntu13.4) ...
Preparing to unpack .../22-initramfs-tools-core_0.140ubuntu13.5_all.deb ...
Unpacking initramfs-tools-core (0.140ubuntu13.5) over (0.140ubuntu13.4) ...
Preparing to unpack .../23-initramfs-tools-bin_0.140ubuntu13.5_amd64.deb ...
Unpacking initramfs-tools-bin (0.140ubuntu13.5) over (0.140ubuntu13.4) ...
Preparing to unpack .../24-linux-base_4.5ubuntu9+22.04.1_all.deb ...
Unpacking linux-base (4.5ubuntu9+22.04.1) over (4.5ubuntu9) ...
Preparing to unpack .../25-cryptsetup-initramfs_2%3a2.4.3-1ubuntu1.3_all.deb ...
Unpacking cryptsetup-initramfs (2:2.4.3-1ubuntu1.3) over (2:2.4.3-1ubuntu1.2) ...
Preparing to unpack .../26-cryptsetup-bin_2%3a2.4.3-1ubuntu1.3_amd64.deb ...
Unpacking cryptsetup-bin (2:2.4.3-1ubuntu1.3) over (2:2.4.3-1ubuntu1.2) ...
Preparing to unpack .../27-cryptsetup_2%3a2.4.3-1ubuntu1.3_amd64.deb ...
Unpacking cryptsetup (2:2.4.3-1ubuntu1.3) over (2:2.4.3-1ubuntu1.2) ...
Preparing to unpack .../28-ethtool_1%3a5.16-1ubuntu0.2_amd64.deb ...
Unpacking ethtool (1:5.16-1ubuntu0.2) over (1:5.16-1ubuntu0.1) ...
Preparing to unpack .../29-libpackagekit-glib2-18_1.2.5-2ubuntu3_amd64.deb ...
Unpacking libpackagekit-glib2-18:amd64 (1.2.5-2ubuntu3) over (1.2.5-2ubuntu2) ...
Preparing to unpack .../30-gir1.2-packagekitglib-1.0_1.2.5-2ubuntu3_amd64.deb ...
Unpacking gir1.2-packagekitglib-1.0 (1.2.5-2ubuntu3) over (1.2.5-2ubuntu2) ...
Preparing to unpack .../31-landscape-common_23.02-0ubuntu1~22.04.6_amd64.deb ...
Unpacking landscape-common (23.02-0ubuntu1~22.04.6) over (23.02-0ubuntu1~22.04.3) ...
Preparing to unpack .../32-libldap-2.5-0_2.5.19+dfsg-0ubuntu0.22.04.1_amd64.deb ...
Unpacking libldap-2.5-0:amd64 (2.5.19+dfsg-0ubuntu0.22.04.1) over (2.5.18+dfsg-0ubuntu0.22.04.2) ...
Preparing to unpack .../33-libldap-common_2.5.19+dfsg-0ubuntu0.22.04.1_all.deb ...
Unpacking libldap-common (2.5.19+dfsg-0ubuntu0.22.04.1) over (2.5.18+dfsg-0ubuntu0.22.04.2) ...
Preparing to unpack .../34-libmbim-proxy_1.28.0-1~ubuntu20.04.2_amd64.deb ...
Unpacking libmbim-proxy (1.28.0-1~ubuntu20.04.2) over (1.28.0-1~ubuntu20.04.1) ...
Preparing to unpack .../35-libmbim-glib4_1.28.0-1~ubuntu20.04.2_amd64.deb ...
Unpacking libmbim-glib4:amd64 (1.28.0-1~ubuntu20.04.2) over (1.28.0-1~ubuntu20.04.1) ...
Preparing to unpack .../36-libmm-glib0_1.20.0-1~ubuntu22.04.4_amd64.deb ...
Unpacking libmm-glib0:amd64 (1.20.0-1~ubuntu22.04.4) over (1.20.0-1~ubuntu22.04.3) ...
Preparing to unpack .../37-modemmanager_1.20.0-1~ubuntu22.04.4_amd64.deb ...
Unpacking modemmanager (1.20.0-1~ubuntu22.04.4) over (1.20.0-1~ubuntu22.04.3) ...
Preparing to unpack .../38-packagekit-tools_1.2.5-2ubuntu3_amd64.deb ...
Unpacking packagekit-tools (1.2.5-2ubuntu3) over (1.2.5-2ubuntu2) ...
Preparing to unpack .../39-packagekit_1.2.5-2ubuntu3_amd64.deb ...
Unpacking packagekit (1.2.5-2ubuntu3) over (1.2.5-2ubuntu2) ...
Preparing to unpack .../40-pollinate_4.33-3ubuntu2.1_all.deb ...
Unpacking pollinate (4.33-3ubuntu2.1) over (4.33-3ubuntu2) ...
Preparing to unpack .../41-snapd_2.68.5+ubuntu22.04.1_amd64.deb ...
Unpacking snapd (2.68.5+ubuntu22.04.1) over (2.63+22.04ubuntu0.1) ...
Preparing to unpack .../42-systemd-hwe-hwdb_249.11.6_all.deb ...
Unpacking systemd-hwe-hwdb (249.11.6) over (249.11.5) ...
Preparing to unpack .../43-xfsprogs_5.13.0-1ubuntu2.1_amd64.deb ...
Unpacking xfsprogs (5.13.0-1ubuntu2.1) over (5.13.0-1ubuntu2) ...
Preparing to unpack .../44-ubuntu-server_1.481.4_amd64.deb ...
Unpacking ubuntu-server (1.481.4) over (1.481.3) ...
Preparing to unpack .../45-cloud-init_25.2-0ubuntu1~22.04.1_all.deb ...
Unpacking cloud-init (25.2-0ubuntu1~22.04.1) over (25.1.4-0ubuntu0~22.04.1) ...
Preparing to unpack .../46-ubuntu-server-minimal_1.481.4_amd64.deb ...
Unpacking ubuntu-server-minimal (1.481.4) over (1.481.3) ...
Setting up powermgmt-base (1.36ubuntu0.22.04.1) ...
Setting up snapd (2.68.5+ubuntu22.04.1) ...
Installing new version of config file /etc/apparmor.d/usr.lib.snapd.snap-confine.real ...
snapd.failure.service is a disabled or a static unit not running, not starting it.
snapd.snap-repair.service is a disabled or a static unit not running, not starting it.
Setting up pci.ids (0.0~2022.01.22-1ubuntu0.1) ...
Setting up cloud-init (25.2-0ubuntu1~22.04.1) ...
Installing new version of config file /etc/cloud/templates/sources.list.debian.deb822.tmpl ...
Setting up apt-utils (2.4.14) ...
Setting up linux-base (4.5ubuntu9+22.04.1) ...
Setting up bind9-libs:amd64 (1:9.18.39-0ubuntu0.22.04.1) ...
Setting up libglib2.0-0:amd64 (2.72.4-0ubuntu2.6) ...
No schema files found: doing nothing.
Setting up distro-info-data (0.52ubuntu0.9) ...
Setting up libpackagekit-glib2-18:amd64 (1.2.5-2ubuntu3) ...
Setting up landscape-common (23.02-0ubuntu1~22.04.6) ...
Setting up libldap-common (2.5.19+dfsg-0ubuntu0.22.04.1) ...
Setting up libldap-2.5-0:amd64 (2.5.19+dfsg-0ubuntu0.22.04.1) ...
Setting up libopeniscsiusr (2.1.5-1ubuntu1.1) ...
Setting up gir1.2-packagekitglib-1.0 (1.2.5-2ubuntu3) ...
Setting up libglib2.0-data (2.72.4-0ubuntu2.6) ...
Setting up pollinate (4.33-3ubuntu2.1) ...
Setting up libpcap0.8:amd64 (1.10.1-4ubuntu1.22.04.1) ...
Setting up systemd-hwe-hwdb (249.11.6) ...
Setting up libdevmapper1.02.1:amd64 (2:1.02.175-2.1ubuntu5) ...
Setting up dmsetup (2:1.02.175-2.1ubuntu5) ...
update-initramfs: deferring update (trigger activated)
Setting up libmm-glib0:amd64 (1.20.0-1~ubuntu22.04.4) ...
Setting up python3-update-manager (1:22.04.22) ...
Setting up libcryptsetup12:amd64 (2:2.4.3-1ubuntu1.3) ...
Setting up dmidecode (3.3-3ubuntu0.2) ...
Setting up bind9-host (1:9.18.39-0ubuntu0.22.04.1) ...
Setting up openssl (3.0.2-0ubuntu1.20) ...
Setting up ubuntu-pro-client (36ubuntu0~22.04) ...
Installing new version of config file /etc/apparmor.d/ubuntu_pro_apt_news ...
Installing new version of config file /etc/apparmor.d/ubuntu_pro_esm_cache ...
Installing new version of config file /etc/apt/apt.conf.d/20apt-esm-hook.conf ...
Setting up libmbim-glib4:amd64 (1.28.0-1~ubuntu20.04.2) ...
Setting up ethtool (1:5.16-1ubuntu0.2) ...
Setting up initramfs-tools-bin (0.140ubuntu13.5) ...
Setting up cryptsetup-bin (2:2.4.3-1ubuntu1.3) ...
Setting up ubuntu-pro-client-l10n (36ubuntu0~22.04) ...
Setting up libdevmapper-event1.02.1:amd64 (2:1.02.175-2.1ubuntu5) ...
Setting up cryptsetup (2:2.4.3-1ubuntu1.3) ...
Setting up libglib2.0-bin (2.72.4-0ubuntu2.6) ...
Setting up libmbim-proxy (1.28.0-1~ubuntu20.04.2) ...
Setting up open-iscsi (2.1.5-1ubuntu1.1) ...
iscsid.service is a disabled or a static unit, not starting it.
Setting up xfsprogs (5.13.0-1ubuntu2.1) ...
update-initramfs: deferring update (trigger activated)
Setting up packagekit (1.2.5-2ubuntu3) ...
Setting up ubuntu-advantage-tools (36ubuntu0~22.04) ...
Setting up modemmanager (1.20.0-1~ubuntu22.04.4) ...
Setting up bind9-dnsutils (1:9.18.39-0ubuntu0.22.04.1) ...
Setting up initramfs-tools-core (0.140ubuntu13.5) ...
Setting up packagekit-tools (1.2.5-2ubuntu3) ...
Setting up initramfs-tools (0.140ubuntu13.5) ...
update-initramfs: deferring update (trigger activated)
Setting up ubuntu-minimal (1.481.4) ...
Setting up ubuntu-standard (1.481.4) ...
Setting up update-manager-core (1:22.04.22) ...
Setting up cryptsetup-initramfs (2:2.4.3-1ubuntu1.3) ...
update-initramfs: deferring update (trigger activated)
Setting up liblvm2cmd2.03:amd64 (2.03.11-2.1ubuntu5) ...
Setting up dmeventd (2:1.02.175-2.1ubuntu5) ...
dm-event.service is a disabled or a static unit not running, not starting it.
Setting up lvm2 (2.03.11-2.1ubuntu5) ...
update-initramfs: deferring update (trigger activated)
Setting up ubuntu-server (1.481.4) ...
Setting up ubuntu-server-minimal (1.481.4) ...
Processing triggers for hicolor-icon-theme (0.17-2) ...
Processing triggers for libc-bin (2.35-0ubuntu3.11) ...
Processing triggers for rsyslog (8.2112.0-2ubuntu2.2) ...
Processing triggers for man-db (2.10.2-1) ...
Processing triggers for dbus (1.12.20-2ubuntu4.1) ...
Processing triggers for udev (249.11-0ubuntu3.16) ...
Processing triggers for initramfs-tools (0.140ubuntu13.5) ...
update-initramfs: Generating /boot/initrd.img-5.15.0-156-generic
=== 2. Disabling swap ===
=== 3. Loading kernel modules ===
overlay
br_netfilter
=== 4. Setting sysctl params ===
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
* Applying /etc/sysctl.d/10-console-messages.conf ...
kernel.printk = 4 4 1 7
* Applying /etc/sysctl.d/10-ipv6-privacy.conf ...
net.ipv6.conf.all.use_tempaddr = 2
net.ipv6.conf.default.use_tempaddr = 2
* Applying /etc/sysctl.d/10-kernel-hardening.conf ...
kernel.kptr_restrict = 1
* Applying /etc/sysctl.d/10-magic-sysrq.conf ...
kernel.sysrq = 176
* Applying /etc/sysctl.d/10-network-security.conf ...
net.ipv4.conf.default.rp_filter = 2
net.ipv4.conf.all.rp_filter = 2
* Applying /etc/sysctl.d/10-ptrace.conf ...
kernel.yama.ptrace_scope = 1
* Applying /etc/sysctl.d/10-zeropage.conf ...
vm.mmap_min_addr = 65536
* Applying /usr/lib/sysctl.d/50-default.conf ...
kernel.core_uses_pid = 1
net.ipv4.conf.default.rp_filter = 2
net.ipv4.conf.default.accept_source_route = 0
sysctl: setting key "net.ipv4.conf.all.accept_source_route": Invalid argument
net.ipv4.conf.default.promote_secondaries = 1
sysctl: setting key "net.ipv4.conf.all.promote_secondaries": Invalid argument
net.ipv4.ping_group_range = 0 2147483647
net.core.default_qdisc = fq_codel
fs.protected_hardlinks = 1
fs.protected_symlinks = 1
fs.protected_regular = 1
fs.protected_fifos = 1
* Applying /usr/lib/sysctl.d/50-pid-max.conf ...
kernel.pid_max = 4194304
* Applying /usr/lib/sysctl.d/99-protect-links.conf ...
fs.protected_fifos = 1
fs.protected_hardlinks = 1
fs.protected_regular = 2
fs.protected_symlinks = 1
* Applying /etc/sysctl.d/99-sysctl.conf ...
* Applying /etc/sysctl.d/k8s.conf ...
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
* Applying /etc/sysctl.conf ...
net.ipv4.ip_forward = 1
=== 5. Installing containerd ===
Reading package lists...
Building dependency tree...
Reading state information...
The following additional packages will be installed:
  runc
The following NEW packages will be installed:
  containerd runc
0 upgraded, 2 newly installed, 0 to remove and 5 not upgraded.
Need to get 45.9 MB of archives.
After this operation, 172 MB of additional disk space will be used.
Get:1 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 runc amd64 1.2.5-0ubuntu1~22.04.1 [8093 kB]
Get:2 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 containerd amd64 1.7.27-0ubuntu1~22.04.1 [37.8 MB]
Fetched 45.9 MB in 2min 24s (319 kB/s)
Selecting previously unselected package runc.
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 113964 files and directories currently installed.)
Preparing to unpack .../runc_1.2.5-0ubuntu1~22.04.1_amd64.deb ...
Unpacking runc (1.2.5-0ubuntu1~22.04.1) ...
Selecting previously unselected package containerd.
Preparing to unpack .../containerd_1.7.27-0ubuntu1~22.04.1_amd64.deb ...
Unpacking containerd (1.7.27-0ubuntu1~22.04.1) ...
Setting up runc (1.2.5-0ubuntu1~22.04.1) ...
Setting up containerd (1.7.27-0ubuntu1~22.04.1) ...
Created symlink /etc/systemd/system/multi-user.target.wants/containerd.service → /lib/systemd/system/containerd.service.
Processing triggers for man-db (2.10.2-1) ...
disabled_plugins = []
imports = []
oom_score = 0
plugin_dir = ""
required_plugins = []
root = "/var/lib/containerd"
state = "/run/containerd"
temp = ""
version = 2

[cgroup]
  path = ""

[debug]
  address = ""
  format = ""
  gid = 0
  level = ""
  uid = 0

[grpc]
  address = "/run/containerd/containerd.sock"
  gid = 0
  max_recv_message_size = 16777216
  max_send_message_size = 16777216
  tcp_address = ""
  tcp_tls_ca = ""
  tcp_tls_cert = ""
  tcp_tls_key = ""
  uid = 0

[metrics]
  address = ""
  grpc_histogram = false

[plugins]

  [plugins."io.containerd.gc.v1.scheduler"]
    deletion_threshold = 0
    mutation_threshold = 100
    pause_threshold = 0.02
    schedule_delay = "0s"
    startup_delay = "100ms"

  [plugins."io.containerd.grpc.v1.cri"]
    cdi_spec_dirs = ["/etc/cdi", "/var/run/cdi"]
    device_ownership_from_security_context = false
    disable_apparmor = false
    disable_cgroup = false
    disable_hugetlb_controller = true
    disable_proc_mount = false
    disable_tcp_service = true
    drain_exec_sync_io_timeout = "0s"
    enable_cdi = false
    enable_selinux = false
    enable_tls_streaming = false
    enable_unprivileged_icmp = false
    enable_unprivileged_ports = false
    ignore_deprecation_warnings = []
    ignore_image_defined_volumes = false
    image_pull_progress_timeout = "5m0s"
    image_pull_with_sync_fs = false
    max_concurrent_downloads = 3
    max_container_log_line_size = 16384
    netns_mounts_under_state_dir = false
    restrict_oom_score_adj = false
    sandbox_image = "registry.k8s.io/pause:3.8"
    selinux_category_range = 1024
    stats_collect_period = 10
    stream_idle_timeout = "4h0m0s"
    stream_server_address = "127.0.0.1"
    stream_server_port = "0"
    systemd_cgroup = false
    tolerate_missing_hugetlb_controller = true
    unset_seccomp_profile = ""

    [plugins."io.containerd.grpc.v1.cri".cni]
      bin_dir = "/opt/cni/bin"
      conf_dir = "/etc/cni/net.d"
      conf_template = ""
      ip_pref = ""
      max_conf_num = 1
      setup_serially = false

    [plugins."io.containerd.grpc.v1.cri".containerd]
      default_runtime_name = "runc"
      disable_snapshot_annotations = true
      discard_unpacked_layers = false
      ignore_blockio_not_enabled_errors = false
      ignore_rdt_not_enabled_errors = false
      no_pivot = false
      snapshotter = "overlayfs"

      [plugins."io.containerd.grpc.v1.cri".containerd.default_runtime]
        base_runtime_spec = ""
        cni_conf_dir = ""
        cni_max_conf_num = 0
        container_annotations = []
        pod_annotations = []
        privileged_without_host_devices = false
        privileged_without_host_devices_all_devices_allowed = false
        runtime_engine = ""
        runtime_path = ""
        runtime_root = ""
        runtime_type = ""
        sandbox_mode = ""
        snapshotter = ""

        [plugins."io.containerd.grpc.v1.cri".containerd.default_runtime.options]

      [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]

        [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
          base_runtime_spec = ""
          cni_conf_dir = ""
          cni_max_conf_num = 0
          container_annotations = []
          pod_annotations = []
          privileged_without_host_devices = false
          privileged_without_host_devices_all_devices_allowed = false
          runtime_engine = ""
          runtime_path = ""
          runtime_root = ""
          runtime_type = "io.containerd.runc.v2"
          sandbox_mode = "podsandbox"
          snapshotter = ""

          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
            BinaryName = ""
            CriuImagePath = ""
            CriuPath = ""
            CriuWorkPath = ""
            IoGid = 0
            IoUid = 0
            NoNewKeyring = false
            NoPivotRoot = false
            Root = ""
            ShimCgroup = ""
            SystemdCgroup = false

      [plugins."io.containerd.grpc.v1.cri".containerd.untrusted_workload_runtime]
        base_runtime_spec = ""
        cni_conf_dir = ""
        cni_max_conf_num = 0
        container_annotations = []
        pod_annotations = []
        privileged_without_host_devices = false
        privileged_without_host_devices_all_devices_allowed = false
        runtime_engine = ""
        runtime_path = ""
        runtime_root = ""
        runtime_type = ""
        sandbox_mode = ""
        snapshotter = ""

        [plugins."io.containerd.grpc.v1.cri".containerd.untrusted_workload_runtime.options]

    [plugins."io.containerd.grpc.v1.cri".image_decryption]
      key_model = "node"

    [plugins."io.containerd.grpc.v1.cri".registry]
      config_path = ""

      [plugins."io.containerd.grpc.v1.cri".registry.auths]

      [plugins."io.containerd.grpc.v1.cri".registry.configs]

      [plugins."io.containerd.grpc.v1.cri".registry.headers]

      [plugins."io.containerd.grpc.v1.cri".registry.mirrors]

    [plugins."io.containerd.grpc.v1.cri".x509_key_pair_streaming]
      tls_cert_file = ""
      tls_key_file = ""

  [plugins."io.containerd.internal.v1.opt"]
    path = "/opt/containerd"

  [plugins."io.containerd.internal.v1.restart"]
    interval = "10s"

  [plugins."io.containerd.internal.v1.tracing"]

  [plugins."io.containerd.metadata.v1.bolt"]
    content_sharing_policy = "shared"

  [plugins."io.containerd.monitor.v1.cgroups"]
    no_prometheus = false

  [plugins."io.containerd.nri.v1.nri"]
    disable = true
    disable_connections = false
    plugin_config_path = "/etc/nri/conf.d"
    plugin_path = "/opt/nri/plugins"
    plugin_registration_timeout = "5s"
    plugin_request_timeout = "2s"
    socket_path = "/var/run/nri/nri.sock"

  [plugins."io.containerd.runtime.v1.linux"]
    no_shim = false
    runtime = "runc"
    runtime_root = ""
    shim = "containerd-shim"
    shim_debug = false

  [plugins."io.containerd.runtime.v2.task"]
    platforms = ["linux/amd64"]
    sched_core = false

  [plugins."io.containerd.service.v1.diff-service"]
    default = ["walking"]
    sync_fs = false

  [plugins."io.containerd.service.v1.tasks-service"]
    blockio_config_file = ""
    rdt_config_file = ""

  [plugins."io.containerd.snapshotter.v1.aufs"]
    root_path = ""

  [plugins."io.containerd.snapshotter.v1.blockfile"]
    fs_type = ""
    mount_options = []
    root_path = ""
    scratch_file = ""

  [plugins."io.containerd.snapshotter.v1.btrfs"]
    root_path = ""

  [plugins."io.containerd.snapshotter.v1.devmapper"]
    async_remove = false
    base_image_size = ""
    discard_blocks = false
    fs_options = ""
    fs_type = ""
    pool_name = ""
    root_path = ""

  [plugins."io.containerd.snapshotter.v1.native"]
    root_path = ""

  [plugins."io.containerd.snapshotter.v1.overlayfs"]
    mount_options = []
    root_path = ""
    sync_remove = false
    upperdir_label = false

  [plugins."io.containerd.snapshotter.v1.zfs"]
    root_path = ""

  [plugins."io.containerd.tracing.processor.v1.otlp"]

  [plugins."io.containerd.transfer.v1.local"]
    config_path = ""
    max_concurrent_downloads = 3
    max_concurrent_uploaded_layers = 3

    [[plugins."io.containerd.transfer.v1.local".unpack_config]]
      differ = ""
      platform = "linux/amd64"
      snapshotter = "overlayfs"

[proxy_plugins]

[stream_processors]

  [stream_processors."io.containerd.ocicrypt.decoder.v1.tar"]
    accepts = ["application/vnd.oci.image.layer.v1.tar+encrypted"]
    args = ["--decryption-keys-path", "/etc/containerd/ocicrypt/keys"]
    env = ["OCICRYPT_KEYPROVIDER_CONFIG=/etc/containerd/ocicrypt/ocicrypt_keyprovider.conf"]
    path = "ctd-decoder"
    returns = "application/vnd.oci.image.layer.v1.tar"

  [stream_processors."io.containerd.ocicrypt.decoder.v1.tar.gzip"]
    accepts = ["application/vnd.oci.image.layer.v1.tar+gzip+encrypted"]
    args = ["--decryption-keys-path", "/etc/containerd/ocicrypt/keys"]
    env = ["OCICRYPT_KEYPROVIDER_CONFIG=/etc/containerd/ocicrypt/ocicrypt_keyprovider.conf"]
    path = "ctd-decoder"
    returns = "application/vnd.oci.image.layer.v1.tar+gzip"

[timeouts]
  "io.containerd.timeout.bolt.open" = "0s"
  "io.containerd.timeout.metrics.shimstats" = "2s"
  "io.containerd.timeout.shim.cleanup" = "5s"
  "io.containerd.timeout.shim.load" = "5s"
  "io.containerd.timeout.shim.shutdown" = "3s"
  "io.containerd.timeout.task.state" = "2s"

[ttrpc]
  address = ""
  gid = 0
  uid = 0
            SystemdCgroup = true
=== 6. Adding Kubernetes repository ===
deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.34/deb/ /
=== 7. Installing kubelet, kubeadm, kubectl ===
Get:1 https://prod-cdn.packages.k8s.io/repositories/isv:/kubernetes:/core:/stable:/v1.34/deb  InRelease [1186 B]
Get:2 https://prod-cdn.packages.k8s.io/repositories/isv:/kubernetes:/core:/stable:/v1.34/deb  Packages [4405 B]
Hit:3 http://security.ubuntu.com/ubuntu jammy-security InRelease
Hit:4 http://us.archive.ubuntu.com/ubuntu jammy InRelease
Hit:5 http://us.archive.ubuntu.com/ubuntu jammy-updates InRelease
Hit:6 http://us.archive.ubuntu.com/ubuntu jammy-backports InRelease
Fetched 5591 B in 1s (4150 B/s)
Reading package lists...
Reading package lists...
Building dependency tree...
Reading state information...
The following additional packages will be installed:
  conntrack cri-tools kubernetes-cni
The following NEW packages will be installed:
  conntrack cri-tools kubeadm kubectl kubelet kubernetes-cni
0 upgraded, 6 newly installed, 0 to remove and 5 not upgraded.
Need to get 93.9 MB of archives.
After this operation, 333 MB of additional disk space will be used.
Get:1 https://prod-cdn.packages.k8s.io/repositories/isv:/kubernetes:/core:/stable:/v1.34/deb  cri-tools 1.34.0-1.1 [16.7 MB]
Get:5 http://us.archive.ubuntu.com/ubuntu jammy/main amd64 conntrack amd64 1:1.4.6-2build2 [33.5 kB]
Get:2 https://prod-cdn.packages.k8s.io/repositories/isv:/kubernetes:/core:/stable:/v1.34/deb  kubeadm 1.34.1-1.1 [12.5 MB]
Get:3 https://prod-cdn.packages.k8s.io/repositories/isv:/kubernetes:/core:/stable:/v1.34/deb  kubectl 1.34.1-1.1 [11.7 MB]
Get:4 https://prod-cdn.packages.k8s.io/repositories/isv:/kubernetes:/core:/stable:/v1.34/deb  kubernetes-cni 1.7.1-1.1 [39.9 MB]
Get:6 https://prod-cdn.packages.k8s.io/repositories/isv:/kubernetes:/core:/stable:/v1.34/deb  kubelet 1.34.1-1.1 [13.0 MB]
Fetched 93.9 MB in 1s (105 MB/s)
Selecting previously unselected package conntrack.
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 114026 files and directories currently installed.)
Preparing to unpack .../0-conntrack_1%3a1.4.6-2build2_amd64.deb ...
Unpacking conntrack (1:1.4.6-2build2) ...
Selecting previously unselected package cri-tools.
Preparing to unpack .../1-cri-tools_1.34.0-1.1_amd64.deb ...
Unpacking cri-tools (1.34.0-1.1) ...
Selecting previously unselected package kubeadm.
Preparing to unpack .../2-kubeadm_1.34.1-1.1_amd64.deb ...
Unpacking kubeadm (1.34.1-1.1) ...
Selecting previously unselected package kubectl.
Preparing to unpack .../3-kubectl_1.34.1-1.1_amd64.deb ...
Unpacking kubectl (1.34.1-1.1) ...
Selecting previously unselected package kubernetes-cni.
Preparing to unpack .../4-kubernetes-cni_1.7.1-1.1_amd64.deb ...
Unpacking kubernetes-cni (1.7.1-1.1) ...
Selecting previously unselected package kubelet.
Preparing to unpack .../5-kubelet_1.34.1-1.1_amd64.deb ...
Unpacking kubelet (1.34.1-1.1) ...
Setting up conntrack (1:1.4.6-2build2) ...
Setting up kubectl (1.34.1-1.1) ...
Setting up cri-tools (1.34.0-1.1) ...
Setting up kubernetes-cni (1.7.1-1.1) ...
Setting up kubeadm (1.34.1-1.1) ...
Setting up kubelet (1.34.1-1.1) ...
Processing triggers for man-db (2.10.2-1) ...
kubelet set on hold.
kubeadm set on hold.
kubectl set on hold.
=== Configuring kubelet cgroup driver ===
[Service]
Environment="KUBELET_EXTRA_ARGS=--cgroup-driver=systemd"
=== 8. Detecting internal IP ===
Detected internal IP: 10.200.105.52
=== 9. Initializing Kubernetes control plane ===
[init] Using Kubernetes version: v1.34.1
[preflight] Running pre-flight checks
[preflight] Pulling images required for setting up a Kubernetes cluster
[preflight] This might take a minute or two, depending on the speed of your internet connection
[preflight] You can also perform this action beforehand using 'kubeadm config images pull'
W1001 12:20:02.499709   84939 checks.go:830] detected that the sandbox image "registry.k8s.io/pause:3.8" of the container runtime is inconsistent with that used by kubeadm. It is recommended to use "registry.k8s.io/pause:3.10.1" as the CRI sandbox image.
[certs] Using certificateDir folder "/etc/kubernetes/pki"
[certs] Generating "ca" certificate and key
[certs] Generating "apiserver" certificate and key
[certs] apiserver serving cert is signed for DNS names [kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local smo] and IPs [10.96.0.1 10.200.105.52]
[certs] Generating "apiserver-kubelet-client" certificate and key
[certs] Generating "front-proxy-ca" certificate and key
[certs] Generating "front-proxy-client" certificate and key
[certs] Generating "etcd/ca" certificate and key
[certs] Generating "etcd/server" certificate and key
[certs] etcd/server serving cert is signed for DNS names [localhost smo] and IPs [10.200.105.52 127.0.0.1 ::1]
[certs] Generating "etcd/peer" certificate and key
[certs] etcd/peer serving cert is signed for DNS names [localhost smo] and IPs [10.200.105.52 127.0.0.1 ::1]
[certs] Generating "etcd/healthcheck-client" certificate and key
[certs] Generating "apiserver-etcd-client" certificate and key
[certs] Generating "sa" key and public key
[kubeconfig] Using kubeconfig folder "/etc/kubernetes"
[kubeconfig] Writing "admin.conf" kubeconfig file
[kubeconfig] Writing "super-admin.conf" kubeconfig file
[kubeconfig] Writing "kubelet.conf" kubeconfig file
[kubeconfig] Writing "controller-manager.conf" kubeconfig file
[kubeconfig] Writing "scheduler.conf" kubeconfig file
[etcd] Creating static Pod manifest for local etcd in "/etc/kubernetes/manifests"
[control-plane] Using manifest folder "/etc/kubernetes/manifests"
[control-plane] Creating static Pod manifest for "kube-apiserver"
[control-plane] Creating static Pod manifest for "kube-controller-manager"
[control-plane] Creating static Pod manifest for "kube-scheduler"
[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/instance-config.yaml"
[patches] Applied patch of type "application/strategic-merge-patch+json" to target "kubeletconfiguration"
[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
[kubelet-start] Starting the kubelet
[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory "/etc/kubernetes/manifests"
[kubelet-check] Waiting for a healthy kubelet at http://127.0.0.1:10248/healthz. This can take up to 4m0s
[kubelet-check] The kubelet is healthy after 1.001796556s
[control-plane-check] Waiting for healthy control plane components. This can take up to 4m0s
[control-plane-check] Checking kube-apiserver at https://10.200.105.52:6443/livez
[control-plane-check] Checking kube-controller-manager at https://127.0.0.1:10257/healthz
[control-plane-check] Checking kube-scheduler at https://127.0.0.1:10259/livez
[control-plane-check] kube-controller-manager is healthy after 3.471352395s
[control-plane-check] kube-scheduler is healthy after 3.964910775s
[control-plane-check] kube-apiserver is healthy after 6.003166948s
[upload-config] Storing the configuration used in ConfigMap "kubeadm-config" in the "kube-system" Namespace
[kubelet] Creating a ConfigMap "kubelet-config" in namespace kube-system with the configuration for the kubelets in the cluster
[upload-certs] Skipping phase. Please see --upload-certs
[mark-control-plane] Marking the node smo as control-plane by adding the labels: [node-role.kubernetes.io/control-plane node.kubernetes.io/exclude-from-external-load-balancers]
[mark-control-plane] Marking the node smo as control-plane by adding the taints [node-role.kubernetes.io/control-plane:NoSchedule]
[bootstrap-token] Using token: 369o2z.4yv0mwosnaxiapyf
[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles
[bootstrap-token] Configured RBAC rules to allow Node Bootstrap tokens to get nodes
[bootstrap-token] Configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials
[bootstrap-token] Configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
[bootstrap-token] Configured RBAC rules to allow certificate rotation for all node client certificates in the cluster
[bootstrap-token] Creating the "cluster-info" ConfigMap in the "kube-public" namespace
[kubelet-finalize] Updating "/etc/kubernetes/kubelet.conf" to point to a rotatable kubelet client certificate and key
[addons] Applied essential addon: CoreDNS
[addons] Applied essential addon: kube-proxy

Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

Alternatively, if you are the root user, you can run:

  export KUBECONFIG=/etc/kubernetes/admin.conf

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 10.200.105.52:6443 --token 369o2z.4yv0mwosnaxiapyf \
	--discovery-token-ca-cert-hash sha256:55483cca652a733ef6273a30f164bb51ba0505e99b06ed5497ae84872a0f9bc2 
Kubeadm join command saved to kubeadm-join-command.sh
=== 10. Configuring kubectl ===
=== 11. Removing control-plane taint for single-node setup ===
node/smo untainted
=== 12. Deploying Flannel CNI ===
namespace/kube-flannel created
clusterrole.rbac.authorization.k8s.io/flannel created
clusterrolebinding.rbac.authorization.k8s.io/flannel created
serviceaccount/flannel created
configmap/kube-flannel-cfg created
daemonset.apps/kube-flannel-ds created
=== 13. Waiting for Flannel pods to be Running ===
pod/kube-flannel-ds-hzcxl condition met
=== 14. Installing local-path storage provisioner ===
namespace/local-path-storage created
serviceaccount/local-path-provisioner-service-account created
clusterrole.rbac.authorization.k8s.io/local-path-provisioner-role created
clusterrolebinding.rbac.authorization.k8s.io/local-path-provisioner-bind created
deployment.apps/local-path-provisioner created
storageclass.storage.k8s.io/local-path created
configmap/local-path-config created
Waiting for local-path-provisioner deployment to be ready...
Waiting for deployment "local-path-provisioner" rollout to finish: 0 of 1 updated replicas are available...
deployment "local-path-provisioner" successfully rolled out
Patching local-path storageclass as default...
storageclass.storage.k8s.io/local-path patched
=== 15. Installing latest Docker ===
Docker not found. Installing latest Docker...
Hit:1 https://prod-cdn.packages.k8s.io/repositories/isv:/kubernetes:/core:/stable:/v1.34/deb  InRelease
Hit:2 http://security.ubuntu.com/ubuntu jammy-security InRelease
Hit:3 http://us.archive.ubuntu.com/ubuntu jammy InRelease
Hit:4 http://us.archive.ubuntu.com/ubuntu jammy-updates InRelease
Hit:5 http://us.archive.ubuntu.com/ubuntu jammy-backports InRelease
Reading package lists...
Reading package lists...
Building dependency tree...
Reading state information...
E: Unable to locate package docker-engine
Package ca-certificates is already installed.
Package curl is already installed.
Package gnupg is already installed.
Package lsb-release is already installed.
Get:1 https://download.docker.com/linux/ubuntu jammy InRelease [48.8 kB]
Hit:3 http://security.ubuntu.com/ubuntu jammy-security InRelease
Hit:2 https://prod-cdn.packages.k8s.io/repositories/isv:/kubernetes:/core:/stable:/v1.34/deb  InRelease
Get:4 https://download.docker.com/linux/ubuntu jammy/stable amd64 Packages [55.9 kB]
Hit:5 http://us.archive.ubuntu.com/ubuntu jammy InRelease
Hit:6 http://us.archive.ubuntu.com/ubuntu jammy-updates InRelease
Hit:7 http://us.archive.ubuntu.com/ubuntu jammy-backports InRelease
Fetched 105 kB in 1s (130 kB/s)
Reading package lists...
Reading package lists...
Building dependency tree...
Reading state information...
The following additional packages will be installed:
  docker-ce-rootless-extras libslirp0 pigz slirp4netns
Suggested packages:
  cgroupfs-mount | cgroup-lite docker-model-plugin
The following packages will be REMOVED:
  containerd runc
The following NEW packages will be installed:
  containerd.io docker-buildx-plugin docker-ce docker-ce-cli
  docker-ce-rootless-extras docker-compose-plugin libslirp0 pigz slirp4netns
0 upgraded, 9 newly installed, 2 to remove and 5 not upgraded.
Need to get 105 MB of archives.
After this operation, 264 MB of additional disk space will be used.
Get:1 https://download.docker.com/linux/ubuntu jammy/stable amd64 containerd.io amd64 1.7.28-0~ubuntu.22.04~jammy [31.9 MB]
Get:2 http://us.archive.ubuntu.com/ubuntu jammy/universe amd64 pigz amd64 2.6-1 [63.6 kB]
Get:3 https://download.docker.com/linux/ubuntu jammy/stable amd64 docker-ce-cli amd64 5:28.4.0-1~ubuntu.22.04~jammy [16.5 MB]
Get:4 http://us.archive.ubuntu.com/ubuntu jammy/main amd64 libslirp0 amd64 4.6.1-1build1 [61.5 kB]
Get:5 http://us.archive.ubuntu.com/ubuntu jammy/universe amd64 slirp4netns amd64 1.0.1-2 [28.2 kB]
Get:6 https://download.docker.com/linux/ubuntu jammy/stable amd64 docker-ce amd64 5:28.4.0-1~ubuntu.22.04~jammy [19.7 MB]
Get:7 https://download.docker.com/linux/ubuntu jammy/stable amd64 docker-buildx-plugin amd64 0.28.0-0~ubuntu.22.04~jammy [15.9 MB]
Get:8 https://download.docker.com/linux/ubuntu jammy/stable amd64 docker-ce-rootless-extras amd64 5:28.4.0-1~ubuntu.22.04~jammy [6479 kB]
Get:9 https://download.docker.com/linux/ubuntu jammy/stable amd64 docker-compose-plugin amd64 2.39.4-0~ubuntu.22.04~jammy [14.2 MB]
Fetched 105 MB in 2s (69.7 MB/s)
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 114085 files and directories currently installed.)
Removing containerd (1.7.27-0ubuntu1~22.04.1) ...
Removing runc (1.2.5-0ubuntu1~22.04.1) ...
Selecting previously unselected package containerd.io.
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 114023 files and directories currently installed.)
Preparing to unpack .../0-containerd.io_1.7.28-0~ubuntu.22.04~jammy_amd64.deb ...
Unpacking containerd.io (1.7.28-0~ubuntu.22.04~jammy) ...
Selecting previously unselected package docker-ce-cli.
Preparing to unpack .../1-docker-ce-cli_5%3a28.4.0-1~ubuntu.22.04~jammy_amd64.deb ...
Unpacking docker-ce-cli (5:28.4.0-1~ubuntu.22.04~jammy) ...
Selecting previously unselected package docker-ce.
Preparing to unpack .../2-docker-ce_5%3a28.4.0-1~ubuntu.22.04~jammy_amd64.deb ...
Unpacking docker-ce (5:28.4.0-1~ubuntu.22.04~jammy) ...
Selecting previously unselected package pigz.
Preparing to unpack .../3-pigz_2.6-1_amd64.deb ...
Unpacking pigz (2.6-1) ...
Selecting previously unselected package docker-buildx-plugin.
Preparing to unpack .../4-docker-buildx-plugin_0.28.0-0~ubuntu.22.04~jammy_amd64.deb ...
Unpacking docker-buildx-plugin (0.28.0-0~ubuntu.22.04~jammy) ...
Selecting previously unselected package docker-ce-rootless-extras.
Preparing to unpack .../5-docker-ce-rootless-extras_5%3a28.4.0-1~ubuntu.22.04~jammy_amd64.deb ...
Unpacking docker-ce-rootless-extras (5:28.4.0-1~ubuntu.22.04~jammy) ...
Selecting previously unselected package docker-compose-plugin.
Preparing to unpack .../6-docker-compose-plugin_2.39.4-0~ubuntu.22.04~jammy_amd64.deb ...
Unpacking docker-compose-plugin (2.39.4-0~ubuntu.22.04~jammy) ...
Selecting previously unselected package libslirp0:amd64.
Preparing to unpack .../7-libslirp0_4.6.1-1build1_amd64.deb ...
Unpacking libslirp0:amd64 (4.6.1-1build1) ...
Selecting previously unselected package slirp4netns.
Preparing to unpack .../8-slirp4netns_1.0.1-2_amd64.deb ...
Unpacking slirp4netns (1.0.1-2) ...
Setting up docker-buildx-plugin (0.28.0-0~ubuntu.22.04~jammy) ...
Setting up containerd.io (1.7.28-0~ubuntu.22.04~jammy) ...

Configuration file '/etc/containerd/config.toml'
 ==> File on system created by you or by a script.
 ==> File also in package provided by package maintainer.
 ==> Keeping old config file as default.
Setting up docker-compose-plugin (2.39.4-0~ubuntu.22.04~jammy) ...
Setting up docker-ce-cli (5:28.4.0-1~ubuntu.22.04~jammy) ...
Setting up libslirp0:amd64 (4.6.1-1build1) ...
Setting up pigz (2.6-1) ...
Setting up docker-ce-rootless-extras (5:28.4.0-1~ubuntu.22.04~jammy) ...
Setting up slirp4netns (1.0.1-2) ...
Setting up docker-ce (5:28.4.0-1~ubuntu.22.04~jammy) ...
Created symlink /etc/systemd/system/multi-user.target.wants/docker.service → /lib/systemd/system/docker.service.
Created symlink /etc/systemd/system/sockets.target.wants/docker.socket → /lib/systemd/system/docker.socket.
Processing triggers for man-db (2.10.2-1) ...
Processing triggers for libc-bin (2.35-0ubuntu3.11) ...
✅ Docker installed successfully. Log out and log back in to apply group changes.
=== 16. Setting up kubectl completion ===
=== 17. Final verification ===
Waiting for all system pods to be ready...
pod/coredns-66bc5c9577-4vcmx condition met
pod/coredns-66bc5c9577-dd8dn condition met
pod/etcd-smo condition met
pod/kube-apiserver-smo condition met
pod/kube-controller-manager-smo condition met
pod/kube-proxy-k44ts condition met
pod/kube-scheduler-smo condition met
pod/kube-flannel-ds-hzcxl condition met
pod/local-path-provisioner-6bbc67f767-pl69f condition met
=== 18. Installing Metal3 Baremetal Operator v0.11.0 ===
Installing Metal3 CRDs...
customresourcedefinition.apiextensions.k8s.io/baremetalhosts.metal3.io created
customresourcedefinition.apiextensions.k8s.io/firmwareschemas.metal3.io created
customresourcedefinition.apiextensions.k8s.io/hostfirmwaresettings.metal3.io created
Creating namespace baremetal-operator-system if not exists...
namespace/baremetal-operator-system created
Installing cert-manager...
namespace/cert-manager created
customresourcedefinition.apiextensions.k8s.io/certificaterequests.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/certificates.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/challenges.acme.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/clusterissuers.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/issuers.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/orders.acme.cert-manager.io created
serviceaccount/cert-manager-cainjector created
serviceaccount/cert-manager created
serviceaccount/cert-manager-webhook created
clusterrole.rbac.authorization.k8s.io/cert-manager-cainjector created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-issuers created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-clusterissuers created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-certificates created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-orders created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-challenges created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-ingress-shim created
clusterrole.rbac.authorization.k8s.io/cert-manager-cluster-view created
clusterrole.rbac.authorization.k8s.io/cert-manager-view created
clusterrole.rbac.authorization.k8s.io/cert-manager-edit created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-approve:cert-manager-io created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-certificatesigningrequests created
clusterrole.rbac.authorization.k8s.io/cert-manager-webhook:subjectaccessreviews created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-cainjector created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-issuers created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-clusterissuers created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-certificates created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-orders created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-challenges created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-ingress-shim created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-approve:cert-manager-io created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-certificatesigningrequests created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-webhook:subjectaccessreviews created
role.rbac.authorization.k8s.io/cert-manager-cainjector:leaderelection created
role.rbac.authorization.k8s.io/cert-manager:leaderelection created
role.rbac.authorization.k8s.io/cert-manager-tokenrequest created
role.rbac.authorization.k8s.io/cert-manager-webhook:dynamic-serving created
rolebinding.rbac.authorization.k8s.io/cert-manager-cainjector:leaderelection created
rolebinding.rbac.authorization.k8s.io/cert-manager:leaderelection created
rolebinding.rbac.authorization.k8s.io/cert-manager-cert-manager-tokenrequest created
rolebinding.rbac.authorization.k8s.io/cert-manager-webhook:dynamic-serving created
service/cert-manager-cainjector created
service/cert-manager created
service/cert-manager-webhook created
deployment.apps/cert-manager-cainjector created
deployment.apps/cert-manager created
deployment.apps/cert-manager-webhook created
mutatingwebhookconfiguration.admissionregistration.k8s.io/cert-manager-webhook created
validatingwebhookconfiguration.admissionregistration.k8s.io/cert-manager-webhook created
Waiting for cert-manager to be ready...
pod/cert-manager-5595474b89-ksgks condition met
pod/cert-manager-cainjector-699b655b95-gpblm condition met
pod/cert-manager-webhook-758fc84d84-cbtvk condition met
Installing Baremetal Operator...
customresourcedefinition.apiextensions.k8s.io/baremetalhosts.metal3.io configured
customresourcedefinition.apiextensions.k8s.io/bmceventsubscriptions.metal3.io created
customresourcedefinition.apiextensions.k8s.io/dataimages.metal3.io created
customresourcedefinition.apiextensions.k8s.io/firmwareschemas.metal3.io unchanged
customresourcedefinition.apiextensions.k8s.io/hardwaredata.metal3.io created
customresourcedefinition.apiextensions.k8s.io/hostfirmwarecomponents.metal3.io created
customresourcedefinition.apiextensions.k8s.io/hostfirmwaresettings.metal3.io unchanged
customresourcedefinition.apiextensions.k8s.io/hostupdatepolicies.metal3.io created
customresourcedefinition.apiextensions.k8s.io/preprovisioningimages.metal3.io created
serviceaccount/baremetal-operator-controller-manager created
role.rbac.authorization.k8s.io/baremetal-operator-leader-election-role created
clusterrole.rbac.authorization.k8s.io/baremetal-operator-manager-role created
clusterrole.rbac.authorization.k8s.io/baremetal-operator-metrics-auth-role created
clusterrole.rbac.authorization.k8s.io/baremetal-operator-metrics-reader created
rolebinding.rbac.authorization.k8s.io/baremetal-operator-leader-election-rolebinding created
clusterrolebinding.rbac.authorization.k8s.io/baremetal-operator-manager-rolebinding created
clusterrolebinding.rbac.authorization.k8s.io/baremetal-operator-metrics-auth-rolebinding created
configmap/ironic created
service/baremetal-operator-controller-manager-metrics-service created
service/baremetal-operator-webhook-service created
deployment.apps/baremetal-operator-controller-manager created
certificate.cert-manager.io/baremetal-operator-serving-cert created
issuer.cert-manager.io/baremetal-operator-selfsigned-issuer created
validatingwebhookconfiguration.admissionregistration.k8s.io/baremetal-operator-validating-webhook-configuration created
Waiting for baremetal-operator to be ready...
deployment.apps/baremetal-operator-controller-manager condition met
Verifying Metal3 Baremetal Operator installation...
CRDs installed:
baremetalhosts.metal3.io              2025-10-01T12:21:44Z
bmceventsubscriptions.metal3.io       2025-10-01T12:22:01Z
dataimages.metal3.io                  2025-10-01T12:22:01Z
firmwareschemas.metal3.io             2025-10-01T12:21:44Z
hardwaredata.metal3.io                2025-10-01T12:22:01Z
hostfirmwarecomponents.metal3.io      2025-10-01T12:22:01Z
hostfirmwaresettings.metal3.io        2025-10-01T12:21:45Z
hostupdatepolicies.metal3.io          2025-10-01T12:22:01Z
preprovisioningimages.metal3.io       2025-10-01T12:22:01Z
NAME                                                     READY   STATUS    RESTARTS   AGE
baremetal-operator-controller-manager-78b584d66f-96nj9   1/1     Running   0          25s

Operator pods:
NAME                                                     READY   STATUS    RESTARTS   AGE
baremetal-operator-controller-manager-78b584d66f-96nj9   1/1     Running   0          25s

Metal3 Baremetal Operator v0.11.0 installation complete!

=== Final Status Check ===
NAME   STATUS   ROLES           AGE    VERSION   INTERNAL-IP     EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION       CONTAINER-RUNTIME
smo    Ready    control-plane   111s   v1.34.1   10.200.105.52   <none>        Ubuntu 22.04.5 LTS   5.15.0-153-generic   containerd://1.7.28

NAMESPACE                   NAME                                                     READY   STATUS    RESTARTS   AGE
baremetal-operator-system   baremetal-operator-controller-manager-78b584d66f-96nj9   1/1     Running   0          25s
cert-manager                cert-manager-5595474b89-ksgks                            1/1     Running   0          39s
cert-manager                cert-manager-cainjector-699b655b95-gpblm                 1/1     Running   0          39s
cert-manager                cert-manager-webhook-758fc84d84-cbtvk                    1/1     Running   0          39s
kube-flannel                kube-flannel-ds-hzcxl                                    1/1     Running   0          101s
kube-system                 coredns-66bc5c9577-4vcmx                                 1/1     Running   0          101s
kube-system                 coredns-66bc5c9577-dd8dn                                 1/1     Running   0          101s
kube-system                 etcd-smo                                                 1/1     Running   0          108s
kube-system                 kube-apiserver-smo                                       1/1     Running   0          108s
kube-system                 kube-controller-manager-smo                              1/1     Running   0          108s
kube-system                 kube-proxy-k44ts                                         1/1     Running   0          101s
kube-system                 kube-scheduler-smo                                       1/1     Running   0          108s
local-path-storage          local-path-provisioner-6bbc67f767-pl69f                  1/1     Running   0          76s

NAME                   PROVISIONER             RECLAIMPOLICY   VOLUMEBINDINGMODE      ALLOWVOLUMEEXPANSION   AGE
local-path (default)   rancher.io/local-path   Delete          WaitForFirstConsumer   false                  76s

Docker version 28.4.0, build d8eb465

=== Kubernetes Control Plane Setup Completed Successfully! ===
=== Ready for Nephio Installation! ===

IMPORTANT: Log out and log back in to apply Docker group membership

Then run the following command to install Nephio:

IMPORTANT: Log out and log back in to apply Docker group membership

Installing Nephio...

--2025-10-01 12:22:26--  https://raw.githubusercontent.com/nephio-project/test-infra/main/e2e/provision/init.sh
Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.109.133, 185.199.108.133, 185.199.110.133, ...
Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.109.133|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 6776 (6.6K) [text/plain]
Saving to: ‘STDOUT’

     0K ......                                                100% 56.2M=0s

2025-10-01 12:22:26 (56.2 MB/s) - written to stdout [6776/6776]

false, false, https://github.com/nephio-project/test-infra.git, main, rehanfazal, /home/rehanfazal, /home/rehanfazal/test-infra, rehanfazal47, 819734qwertyuiop, nonkind_k8s, { "nephio_catalog_repo_uri": "https://github.com/nephio-project/catalog.git", "k8s": { "context" : "kubernetes-admin@kubernetes", "version" : "v1.32.0" } } kubernetes-admin@kubernetes kind
Cloning into '/home/rehanfazal/test-infra'...

** Install dependenciesremoved directory '/var/lib/apt/lists/auxfiles'
removed '/var/lib/apt/lists/download.docker.com_linux_ubuntu_dists_jammy_InRelease'
removed '/var/lib/apt/lists/download.docker.com_linux_ubuntu_dists_jammy_stable_binary-amd64_Packages'
removed '/var/lib/apt/lists/lock'
removed directory '/var/lib/apt/lists/partial'
removed '/var/lib/apt/lists/pkgs.k8s.io_core:_stable:_v1.34_deb_InRelease'
removed '/var/lib/apt/lists/pkgs.k8s.io_core:_stable:_v1.34_deb_Packages'
removed '/var/lib/apt/lists/security.ubuntu.com_ubuntu_dists_jammy-security_InRelease'
removed '/var/lib/apt/lists/security.ubuntu.com_ubuntu_dists_jammy-security_main_binary-amd64_Packages'
removed '/var/lib/apt/lists/security.ubuntu.com_ubuntu_dists_jammy-security_main_cnf_Commands-amd64'
removed '/var/lib/apt/lists/security.ubuntu.com_ubuntu_dists_jammy-security_main_i18n_Translation-en'
removed '/var/lib/apt/lists/security.ubuntu.com_ubuntu_dists_jammy-security_multiverse_binary-amd64_Packages'
removed '/var/lib/apt/lists/security.ubuntu.com_ubuntu_dists_jammy-security_multiverse_cnf_Commands-amd64'
removed '/var/lib/apt/lists/security.ubuntu.com_ubuntu_dists_jammy-security_multiverse_i18n_Translation-en'
removed '/var/lib/apt/lists/security.ubuntu.com_ubuntu_dists_jammy-security_restricted_binary-amd64_Packages'
removed '/var/lib/apt/lists/security.ubuntu.com_ubuntu_dists_jammy-security_restricted_cnf_Commands-amd64'
removed '/var/lib/apt/lists/security.ubuntu.com_ubuntu_dists_jammy-security_restricted_i18n_Translation-en'
removed '/var/lib/apt/lists/security.ubuntu.com_ubuntu_dists_jammy-security_universe_binary-amd64_Packages'
removed '/var/lib/apt/lists/security.ubuntu.com_ubuntu_dists_jammy-security_universe_cnf_Commands-amd64'
removed '/var/lib/apt/lists/security.ubuntu.com_ubuntu_dists_jammy-security_universe_i18n_Translation-en'
removed '/var/lib/apt/lists/us.archive.ubuntu.com_ubuntu_dists_jammy-backports_InRelease'
removed '/var/lib/apt/lists/us.archive.ubuntu.com_ubuntu_dists_jammy-backports_main_binary-amd64_Packages'
removed '/var/lib/apt/lists/us.archive.ubuntu.com_ubuntu_dists_jammy-backports_main_cnf_Commands-amd64'
removed '/var/lib/apt/lists/us.archive.ubuntu.com_ubuntu_dists_jammy-backports_main_i18n_Translation-en'
removed '/var/lib/apt/lists/us.archive.ubuntu.com_ubuntu_dists_jammy-backports_multiverse_cnf_Commands-amd64'
removed '/var/lib/apt/lists/us.archive.ubuntu.com_ubuntu_dists_jammy-backports_restricted_cnf_Commands-amd64'
removed '/var/lib/apt/lists/us.archive.ubuntu.com_ubuntu_dists_jammy-backports_universe_binary-amd64_Packages'
removed '/var/lib/apt/lists/us.archive.ubuntu.com_ubuntu_dists_jammy-backports_universe_cnf_Commands-amd64'
removed '/var/lib/apt/lists/us.archive.ubuntu.com_ubuntu_dists_jammy-backports_universe_i18n_Translation-en'
removed '/var/lib/apt/lists/us.archive.ubuntu.com_ubuntu_dists_jammy-updates_InRelease'
removed '/var/lib/apt/lists/us.archive.ubuntu.com_ubuntu_dists_jammy-updates_main_binary-amd64_Packages'
removed '/var/lib/apt/lists/us.archive.ubuntu.com_ubuntu_dists_jammy-updates_main_cnf_Commands-amd64'
removed '/var/lib/apt/lists/us.archive.ubuntu.com_ubuntu_dists_jammy-updates_main_i18n_Translation-en'
removed '/var/lib/apt/lists/us.archive.ubuntu.com_ubuntu_dists_jammy-updates_multiverse_binary-amd64_Packages'
removed '/var/lib/apt/lists/us.archive.ubuntu.com_ubuntu_dists_jammy-updates_multiverse_cnf_Commands-amd64'
removed '/var/lib/apt/lists/us.archive.ubuntu.com_ubuntu_dists_jammy-updates_multiverse_i18n_Translation-en'
removed '/var/lib/apt/lists/us.archive.ubuntu.com_ubuntu_dists_jammy-updates_restricted_binary-amd64_Packages'
removed '/var/lib/apt/lists/us.archive.ubuntu.com_ubuntu_dists_jammy-updates_restricted_cnf_Commands-amd64'
removed '/var/lib/apt/lists/us.archive.ubuntu.com_ubuntu_dists_jammy-updates_restricted_i18n_Translation-en'
removed '/var/lib/apt/lists/us.archive.ubuntu.com_ubuntu_dists_jammy-updates_universe_binary-amd64_Packages'
removed '/var/lib/apt/lists/us.archive.ubuntu.com_ubuntu_dists_jammy-updates_universe_cnf_Commands-amd64'
removed '/var/lib/apt/lists/us.archive.ubuntu.com_ubuntu_dists_jammy-updates_universe_i18n_Translation-en'
removed '/var/lib/apt/lists/us.archive.ubuntu.com_ubuntu_dists_jammy_InRelease'
removed '/var/lib/apt/lists/us.archive.ubuntu.com_ubuntu_dists_jammy_main_binary-amd64_Packages'
removed '/var/lib/apt/lists/us.archive.ubuntu.com_ubuntu_dists_jammy_main_cnf_Commands-amd64'
removed '/var/lib/apt/lists/us.archive.ubuntu.com_ubuntu_dists_jammy_main_i18n_Translation-en'
removed '/var/lib/apt/lists/us.archive.ubuntu.com_ubuntu_dists_jammy_multiverse_binary-amd64_Packages'
removed '/var/lib/apt/lists/us.archive.ubuntu.com_ubuntu_dists_jammy_multiverse_cnf_Commands-amd64'
removed '/var/lib/apt/lists/us.archive.ubuntu.com_ubuntu_dists_jammy_multiverse_i18n_Translation-en'
removed '/var/lib/apt/lists/us.archive.ubuntu.com_ubuntu_dists_jammy_restricted_binary-amd64_Packages'
removed '/var/lib/apt/lists/us.archive.ubuntu.com_ubuntu_dists_jammy_restricted_cnf_Commands-amd64'
removed '/var/lib/apt/lists/us.archive.ubuntu.com_ubuntu_dists_jammy_restricted_i18n_Translation-en'
removed '/var/lib/apt/lists/us.archive.ubuntu.com_ubuntu_dists_jammy_universe_binary-amd64_Packages'
removed '/var/lib/apt/lists/us.archive.ubuntu.com_ubuntu_dists_jammy_universe_cnf_Commands-amd64'
removed '/var/lib/apt/lists/us.archive.ubuntu.com_ubuntu_dists_jammy_universe_i18n_Translation-en'
Get:1 https://download.docker.com/linux/ubuntu jammy InRelease [48.8 kB]
Get:3 https://download.docker.com/linux/ubuntu jammy/stable amd64 Packages [55.9 kB]
Get:2 https://prod-cdn.packages.k8s.io/repositories/isv:/kubernetes:/core:/stable:/v1.34/deb  InRelease [1186 B]
Get:4 https://prod-cdn.packages.k8s.io/repositories/isv:/kubernetes:/core:/stable:/v1.34/deb  Packages [4405 B]
Get:5 http://security.ubuntu.com/ubuntu jammy-security InRelease [129 kB]
Get:6 http://us.archive.ubuntu.com/ubuntu jammy InRelease [270 kB]
Get:7 http://security.ubuntu.com/ubuntu jammy-security/main amd64 Packages [2689 kB]
Get:8 http://security.ubuntu.com/ubuntu jammy-security/main Translation-en [394 kB]
Get:9 http://security.ubuntu.com/ubuntu jammy-security/main amd64 c-n-f Metadata [13.9 kB]
Get:10 http://security.ubuntu.com/ubuntu jammy-security/restricted amd64 Packages [4413 kB]
Get:11 http://us.archive.ubuntu.com/ubuntu jammy-updates InRelease [128 kB]
Get:12 http://security.ubuntu.com/ubuntu jammy-security/restricted Translation-en [818 kB]
Get:13 http://security.ubuntu.com/ubuntu jammy-security/restricted amd64 c-n-f Metadata [648 B]
Get:14 http://security.ubuntu.com/ubuntu jammy-security/universe amd64 Packages [997 kB]
Get:15 http://security.ubuntu.com/ubuntu jammy-security/universe Translation-en [218 kB]
Get:16 http://security.ubuntu.com/ubuntu jammy-security/universe amd64 c-n-f Metadata [22.1 kB]
Get:17 http://security.ubuntu.com/ubuntu jammy-security/multiverse amd64 Packages [56.9 kB]
Get:18 http://security.ubuntu.com/ubuntu jammy-security/multiverse Translation-en [11.9 kB]
Get:19 http://security.ubuntu.com/ubuntu jammy-security/multiverse amd64 c-n-f Metadata [520 B]
Get:20 http://us.archive.ubuntu.com/ubuntu jammy-backports InRelease [127 kB]
Get:21 http://us.archive.ubuntu.com/ubuntu jammy/main amd64 Packages [1395 kB]
Get:22 http://us.archive.ubuntu.com/ubuntu jammy/main Translation-en [510 kB]
Get:23 http://us.archive.ubuntu.com/ubuntu jammy/main amd64 c-n-f Metadata [30.3 kB]
Get:24 http://us.archive.ubuntu.com/ubuntu jammy/restricted amd64 Packages [129 kB]
Get:25 http://us.archive.ubuntu.com/ubuntu jammy/restricted Translation-en [18.6 kB]
Get:26 http://us.archive.ubuntu.com/ubuntu jammy/restricted amd64 c-n-f Metadata [488 B]
Get:27 http://us.archive.ubuntu.com/ubuntu jammy/universe amd64 Packages [14.1 MB]
Get:28 http://us.archive.ubuntu.com/ubuntu jammy/universe Translation-en [5652 kB]
Get:29 http://us.archive.ubuntu.com/ubuntu jammy/universe amd64 c-n-f Metadata [286 kB]
Get:30 http://us.archive.ubuntu.com/ubuntu jammy/multiverse amd64 Packages [217 kB]
Get:31 http://us.archive.ubuntu.com/ubuntu jammy/multiverse Translation-en [112 kB]
Get:32 http://us.archive.ubuntu.com/ubuntu jammy/multiverse amd64 c-n-f Metadata [8372 B]
Get:33 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 Packages [2973 kB]
Get:34 http://us.archive.ubuntu.com/ubuntu jammy-updates/main Translation-en [463 kB]
Get:35 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 c-n-f Metadata [19.0 kB]
Get:36 http://us.archive.ubuntu.com/ubuntu jammy-updates/restricted amd64 Packages [4637 kB]
Get:37 http://us.archive.ubuntu.com/ubuntu jammy-updates/restricted Translation-en [858 kB]
Get:38 http://us.archive.ubuntu.com/ubuntu jammy-updates/restricted amd64 c-n-f Metadata [672 B]
Get:39 http://us.archive.ubuntu.com/ubuntu jammy-updates/universe amd64 Packages [1230 kB]
Get:40 http://us.archive.ubuntu.com/ubuntu jammy-updates/universe Translation-en [306 kB]
Get:41 http://us.archive.ubuntu.com/ubuntu jammy-updates/universe amd64 c-n-f Metadata [29.6 kB]
Get:42 http://us.archive.ubuntu.com/ubuntu jammy-updates/multiverse amd64 Packages [57.6 kB]
Get:43 http://us.archive.ubuntu.com/ubuntu jammy-updates/multiverse Translation-en [13.2 kB]
Get:44 http://us.archive.ubuntu.com/ubuntu jammy-updates/multiverse amd64 c-n-f Metadata [600 B]
Get:45 http://us.archive.ubuntu.com/ubuntu jammy-backports/main amd64 Packages [68.8 kB]
Get:46 http://us.archive.ubuntu.com/ubuntu jammy-backports/main Translation-en [11.4 kB]
Get:47 http://us.archive.ubuntu.com/ubuntu jammy-backports/main amd64 c-n-f Metadata [392 B]
Get:48 http://us.archive.ubuntu.com/ubuntu jammy-backports/restricted amd64 c-n-f Metadata [116 B]
Get:49 http://us.archive.ubuntu.com/ubuntu jammy-backports/universe amd64 Packages [30.0 kB]
Get:50 http://us.archive.ubuntu.com/ubuntu jammy-backports/universe Translation-en [16.6 kB]
Get:51 http://us.archive.ubuntu.com/ubuntu jammy-backports/universe amd64 c-n-f Metadata [672 B]
Get:52 http://us.archive.ubuntu.com/ubuntu jammy-backports/multiverse amd64 c-n-f Metadata [116 B]
Fetched 43.6 MB in 1min 57s (371 kB/s)
Reading package lists...
Reading package lists...
Building dependency tree...
Reading state information...
The following packages were automatically installed and are no longer required:
  bc python3-automat python3-bcrypt python3-constantly python3-hamcrest
  python3-hyperlink python3-incremental python3-pyasn1 python3-pyasn1-modules
  python3-service-identity python3-zope.interface
Use 'sudo apt autoremove' to remove them.
The following packages will be REMOVED:
  landscape-common python3-openssl python3-twisted
0 upgraded, 0 newly installed, 3 to remove and 5 not upgraded.
After this operation, 13.6 MB disk space will be freed.
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 114284 files and directories currently installed.)
Removing landscape-common (23.02-0ubuntu1~22.04.6) ...
Removing python3-twisted (22.1.0-2ubuntu2.6) ...
Removing python3-openssl (21.0.0-1) ...
Processing triggers for man-db (2.10.2-1) ...
Reading package lists...
Building dependency tree...
Reading state information...
The following packages were automatically installed and are no longer required:
  bc python3-automat python3-bcrypt python3-constantly python3-hamcrest
  python3-hyperlink python3-incremental python3-pyasn1 python3-pyasn1-modules
  python3-service-identity python3-zope.interface
Use 'sudo apt autoremove' to remove them.
The following additional packages will be installed:
  build-essential cpp cpp-11 dpkg-dev fakeroot g++ g++-11 gcc gcc-11
  gcc-11-base javascript-common libalgorithm-diff-perl
  libalgorithm-diff-xs-perl libalgorithm-merge-perl libasan6 libatomic1
  libc-dev-bin libc-devtools libc6-dev libcc1-0 libcrypt-dev libdpkg-perl
  libexpat1-dev libfakeroot libfile-fcntllock-perl libgcc-11-dev libgd3
  libisl23 libitm1 libjs-jquery libjs-sphinxdoc libjs-underscore liblsan0
  libmpc3 libnsl-dev libpython3-dev libpython3.10-dev libquadmath0
  libstdc++-11-dev libtirpc-dev libtsan0 libubsan1 libxpm4 linux-libc-dev
  lto-disabled-list make manpages-dev python3-dev python3-wheel python3.10-dev
  rpcsvc-proto zlib1g-dev
Suggested packages:
  cpp-doc gcc-11-locales debian-keyring g++-multilib g++-11-multilib
  gcc-11-doc gcc-multilib autoconf automake libtool flex bison gdb gcc-doc
  gcc-11-multilib apache2 | lighttpd | httpd glibc-doc bzr libgd-tools
  libstdc++-11-doc make-doc
The following NEW packages will be installed:
  build-essential cpp cpp-11 dpkg-dev fakeroot g++ g++-11 gcc gcc-11
  gcc-11-base javascript-common libalgorithm-diff-perl
  libalgorithm-diff-xs-perl libalgorithm-merge-perl libasan6 libatomic1
  libc-dev-bin libc-devtools libc6-dev libcc1-0 libcrypt-dev libdpkg-perl
  libexpat1-dev libfakeroot libfile-fcntllock-perl libgcc-11-dev libgd3
  libisl23 libitm1 libjs-jquery libjs-sphinxdoc libjs-underscore liblsan0
  libmpc3 libnsl-dev libpython3-dev libpython3.10-dev libquadmath0
  libstdc++-11-dev libtirpc-dev libtsan0 libubsan1 libxpm4 linux-libc-dev
  lto-disabled-list make manpages-dev python3-dev python3-pip python3-wheel
  python3.10-dev rpcsvc-proto zlib1g-dev
0 upgraded, 53 newly installed, 0 to remove and 5 not upgraded.
Need to get 69.3 MB of archives.
After this operation, 234 MB of additional disk space will be used.
Get:1 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 libc-dev-bin amd64 2.35-0ubuntu3.11 [20.3 kB]
Get:2 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 linux-libc-dev amd64 5.15.0-157.167 [1330 kB]
Get:3 http://us.archive.ubuntu.com/ubuntu jammy/main amd64 libcrypt-dev amd64 1:4.4.27-1 [112 kB]
Get:4 http://us.archive.ubuntu.com/ubuntu jammy/main amd64 rpcsvc-proto amd64 1.4.2-0ubuntu6 [68.5 kB]
Get:5 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 libtirpc-dev amd64 1.3.2-2ubuntu0.1 [192 kB]
Get:6 http://us.archive.ubuntu.com/ubuntu jammy/main amd64 libnsl-dev amd64 1.3.0-2build2 [71.3 kB]
Get:7 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 libc6-dev amd64 2.35-0ubuntu3.11 [2100 kB]
Get:8 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 gcc-11-base amd64 11.4.0-1ubuntu1~22.04.2 [20.8 kB]
Get:9 http://us.archive.ubuntu.com/ubuntu jammy/main amd64 libisl23 amd64 0.24-2build1 [727 kB]
Get:10 http://us.archive.ubuntu.com/ubuntu jammy/main amd64 libmpc3 amd64 1.2.1-2build1 [46.9 kB]
Get:11 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 cpp-11 amd64 11.4.0-1ubuntu1~22.04.2 [10.0 MB]
Get:12 http://us.archive.ubuntu.com/ubuntu jammy/main amd64 cpp amd64 4:11.2.0-1ubuntu1 [27.7 kB]
Get:13 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 libcc1-0 amd64 12.3.0-1ubuntu1~22.04.2 [48.3 kB]
Get:14 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 libitm1 amd64 12.3.0-1ubuntu1~22.04.2 [30.2 kB]
Get:15 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 libatomic1 amd64 12.3.0-1ubuntu1~22.04.2 [10.4 kB]
Get:16 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 libasan6 amd64 11.4.0-1ubuntu1~22.04.2 [2283 kB]
Get:17 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 liblsan0 amd64 12.3.0-1ubuntu1~22.04.2 [1069 kB]
Get:18 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 libtsan0 amd64 11.4.0-1ubuntu1~22.04.2 [2262 kB]
Get:19 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 libubsan1 amd64 12.3.0-1ubuntu1~22.04.2 [976 kB]
Get:20 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 libquadmath0 amd64 12.3.0-1ubuntu1~22.04.2 [154 kB]
Get:21 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 libgcc-11-dev amd64 11.4.0-1ubuntu1~22.04.2 [2517 kB]
Get:22 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 gcc-11 amd64 11.4.0-1ubuntu1~22.04.2 [20.1 MB]
Get:23 http://us.archive.ubuntu.com/ubuntu jammy/main amd64 gcc amd64 4:11.2.0-1ubuntu1 [5112 B]
Get:24 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 libstdc++-11-dev amd64 11.4.0-1ubuntu1~22.04.2 [2101 kB]
Get:25 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 g++-11 amd64 11.4.0-1ubuntu1~22.04.2 [11.4 MB]
Get:26 http://us.archive.ubuntu.com/ubuntu jammy/main amd64 g++ amd64 4:11.2.0-1ubuntu1 [1412 B]
Get:27 http://us.archive.ubuntu.com/ubuntu jammy/main amd64 make amd64 4.3-4.1build1 [180 kB]
Get:28 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 libdpkg-perl all 1.21.1ubuntu2.6 [237 kB]
Get:29 http://us.archive.ubuntu.com/ubuntu jammy/main amd64 lto-disabled-list all 24 [12.5 kB]
Get:30 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 dpkg-dev all 1.21.1ubuntu2.6 [922 kB]
Get:31 http://us.archive.ubuntu.com/ubuntu jammy/main amd64 build-essential amd64 12.9ubuntu3 [4744 B]
Get:32 http://us.archive.ubuntu.com/ubuntu jammy/main amd64 libfakeroot amd64 1.28-1ubuntu1 [31.5 kB]
Get:33 http://us.archive.ubuntu.com/ubuntu jammy/main amd64 fakeroot amd64 1.28-1ubuntu1 [60.4 kB]
Get:34 http://us.archive.ubuntu.com/ubuntu jammy/main amd64 javascript-common all 11+nmu1 [5936 B]
Get:35 http://us.archive.ubuntu.com/ubuntu jammy/main amd64 libalgorithm-diff-perl all 1.201-1 [41.8 kB]
Get:36 http://us.archive.ubuntu.com/ubuntu jammy/main amd64 libalgorithm-diff-xs-perl amd64 0.04-6build3 [11.9 kB]
Get:37 http://us.archive.ubuntu.com/ubuntu jammy/main amd64 libalgorithm-merge-perl all 0.08-3 [12.0 kB]
Get:38 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 libxpm4 amd64 1:3.5.12-1ubuntu0.22.04.2 [36.7 kB]
Get:39 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 libgd3 amd64 2.3.0-2ubuntu2.3 [129 kB]
Get:40 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 libc-devtools amd64 2.35-0ubuntu3.11 [29.0 kB]
Get:41 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 libexpat1-dev amd64 2.4.7-1ubuntu0.6 [148 kB]
Get:42 http://us.archive.ubuntu.com/ubuntu jammy/main amd64 libfile-fcntllock-perl amd64 0.22-3build7 [33.9 kB]
Get:43 http://us.archive.ubuntu.com/ubuntu jammy/main amd64 libjs-jquery all 3.6.0+dfsg+~3.5.13-1 [321 kB]
Get:44 http://us.archive.ubuntu.com/ubuntu jammy/main amd64 libjs-underscore all 1.13.2~dfsg-2 [118 kB]
Get:45 http://us.archive.ubuntu.com/ubuntu jammy/main amd64 libjs-sphinxdoc all 4.3.2-1 [139 kB]
Get:46 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 zlib1g-dev amd64 1:1.2.11.dfsg-2ubuntu9.2 [164 kB]
Get:47 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 libpython3.10-dev amd64 3.10.12-1~22.04.11 [4764 kB]
Get:48 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 libpython3-dev amd64 3.10.6-1~22.04.1 [7064 B]
Get:49 http://us.archive.ubuntu.com/ubuntu jammy/main amd64 manpages-dev all 5.10-1ubuntu1 [2309 kB]
Get:50 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 python3.10-dev amd64 3.10.12-1~22.04.11 [508 kB]
Get:51 http://us.archive.ubuntu.com/ubuntu jammy-updates/main amd64 python3-dev amd64 3.10.6-1~22.04.1 [26.0 kB]
Get:52 http://us.archive.ubuntu.com/ubuntu jammy-updates/universe amd64 python3-wheel all 0.37.1-2ubuntu0.22.04.1 [32.0 kB]
Get:53 http://us.archive.ubuntu.com/ubuntu jammy-updates/universe amd64 python3-pip all 22.0.2+dfsg-1ubuntu0.7 [1306 kB]
Fetched 69.3 MB in 3min 49s (303 kB/s)
Selecting previously unselected package libc-dev-bin.
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 113246 files and directories currently installed.)
Preparing to unpack .../00-libc-dev-bin_2.35-0ubuntu3.11_amd64.deb ...
Unpacking libc-dev-bin (2.35-0ubuntu3.11) ...
Selecting previously unselected package linux-libc-dev:amd64.
Preparing to unpack .../01-linux-libc-dev_5.15.0-157.167_amd64.deb ...
Unpacking linux-libc-dev:amd64 (5.15.0-157.167) ...
Selecting previously unselected package libcrypt-dev:amd64.
Preparing to unpack .../02-libcrypt-dev_1%3a4.4.27-1_amd64.deb ...
Unpacking libcrypt-dev:amd64 (1:4.4.27-1) ...
Selecting previously unselected package rpcsvc-proto.
Preparing to unpack .../03-rpcsvc-proto_1.4.2-0ubuntu6_amd64.deb ...
Unpacking rpcsvc-proto (1.4.2-0ubuntu6) ...
Selecting previously unselected package libtirpc-dev:amd64.
Preparing to unpack .../04-libtirpc-dev_1.3.2-2ubuntu0.1_amd64.deb ...
Unpacking libtirpc-dev:amd64 (1.3.2-2ubuntu0.1) ...
Selecting previously unselected package libnsl-dev:amd64.
Preparing to unpack .../05-libnsl-dev_1.3.0-2build2_amd64.deb ...
Unpacking libnsl-dev:amd64 (1.3.0-2build2) ...
Selecting previously unselected package libc6-dev:amd64.
Preparing to unpack .../06-libc6-dev_2.35-0ubuntu3.11_amd64.deb ...
Unpacking libc6-dev:amd64 (2.35-0ubuntu3.11) ...
Selecting previously unselected package gcc-11-base:amd64.
Preparing to unpack .../07-gcc-11-base_11.4.0-1ubuntu1~22.04.2_amd64.deb ...
Unpacking gcc-11-base:amd64 (11.4.0-1ubuntu1~22.04.2) ...
Selecting previously unselected package libisl23:amd64.
Preparing to unpack .../08-libisl23_0.24-2build1_amd64.deb ...
Unpacking libisl23:amd64 (0.24-2build1) ...
Selecting previously unselected package libmpc3:amd64.
Preparing to unpack .../09-libmpc3_1.2.1-2build1_amd64.deb ...
Unpacking libmpc3:amd64 (1.2.1-2build1) ...
Selecting previously unselected package cpp-11.
Preparing to unpack .../10-cpp-11_11.4.0-1ubuntu1~22.04.2_amd64.deb ...
Unpacking cpp-11 (11.4.0-1ubuntu1~22.04.2) ...
Selecting previously unselected package cpp.
Preparing to unpack .../11-cpp_4%3a11.2.0-1ubuntu1_amd64.deb ...
Unpacking cpp (4:11.2.0-1ubuntu1) ...
Selecting previously unselected package libcc1-0:amd64.
Preparing to unpack .../12-libcc1-0_12.3.0-1ubuntu1~22.04.2_amd64.deb ...
Unpacking libcc1-0:amd64 (12.3.0-1ubuntu1~22.04.2) ...
Selecting previously unselected package libitm1:amd64.
Preparing to unpack .../13-libitm1_12.3.0-1ubuntu1~22.04.2_amd64.deb ...
Unpacking libitm1:amd64 (12.3.0-1ubuntu1~22.04.2) ...
Selecting previously unselected package libatomic1:amd64.
Preparing to unpack .../14-libatomic1_12.3.0-1ubuntu1~22.04.2_amd64.deb ...
Unpacking libatomic1:amd64 (12.3.0-1ubuntu1~22.04.2) ...
Selecting previously unselected package libasan6:amd64.
Preparing to unpack .../15-libasan6_11.4.0-1ubuntu1~22.04.2_amd64.deb ...
Unpacking libasan6:amd64 (11.4.0-1ubuntu1~22.04.2) ...
Selecting previously unselected package liblsan0:amd64.
Preparing to unpack .../16-liblsan0_12.3.0-1ubuntu1~22.04.2_amd64.deb ...
Unpacking liblsan0:amd64 (12.3.0-1ubuntu1~22.04.2) ...
Selecting previously unselected package libtsan0:amd64.
Preparing to unpack .../17-libtsan0_11.4.0-1ubuntu1~22.04.2_amd64.deb ...
Unpacking libtsan0:amd64 (11.4.0-1ubuntu1~22.04.2) ...
Selecting previously unselected package libubsan1:amd64.
Preparing to unpack .../18-libubsan1_12.3.0-1ubuntu1~22.04.2_amd64.deb ...
Unpacking libubsan1:amd64 (12.3.0-1ubuntu1~22.04.2) ...
Selecting previously unselected package libquadmath0:amd64.
Preparing to unpack .../19-libquadmath0_12.3.0-1ubuntu1~22.04.2_amd64.deb ...
Unpacking libquadmath0:amd64 (12.3.0-1ubuntu1~22.04.2) ...
Selecting previously unselected package libgcc-11-dev:amd64.
Preparing to unpack .../20-libgcc-11-dev_11.4.0-1ubuntu1~22.04.2_amd64.deb ...
Unpacking libgcc-11-dev:amd64 (11.4.0-1ubuntu1~22.04.2) ...
Selecting previously unselected package gcc-11.
Preparing to unpack .../21-gcc-11_11.4.0-1ubuntu1~22.04.2_amd64.deb ...
Unpacking gcc-11 (11.4.0-1ubuntu1~22.04.2) ...
Selecting previously unselected package gcc.
Preparing to unpack .../22-gcc_4%3a11.2.0-1ubuntu1_amd64.deb ...
Unpacking gcc (4:11.2.0-1ubuntu1) ...
Selecting previously unselected package libstdc++-11-dev:amd64.
Preparing to unpack .../23-libstdc++-11-dev_11.4.0-1ubuntu1~22.04.2_amd64.deb ...
Unpacking libstdc++-11-dev:amd64 (11.4.0-1ubuntu1~22.04.2) ...
Selecting previously unselected package g++-11.
Preparing to unpack .../24-g++-11_11.4.0-1ubuntu1~22.04.2_amd64.deb ...
Unpacking g++-11 (11.4.0-1ubuntu1~22.04.2) ...
Selecting previously unselected package g++.
Preparing to unpack .../25-g++_4%3a11.2.0-1ubuntu1_amd64.deb ...
Unpacking g++ (4:11.2.0-1ubuntu1) ...
Selecting previously unselected package make.
Preparing to unpack .../26-make_4.3-4.1build1_amd64.deb ...
Unpacking make (4.3-4.1build1) ...
Selecting previously unselected package libdpkg-perl.
Preparing to unpack .../27-libdpkg-perl_1.21.1ubuntu2.6_all.deb ...
Unpacking libdpkg-perl (1.21.1ubuntu2.6) ...
Selecting previously unselected package lto-disabled-list.
Preparing to unpack .../28-lto-disabled-list_24_all.deb ...
Unpacking lto-disabled-list (24) ...
Selecting previously unselected package dpkg-dev.
Preparing to unpack .../29-dpkg-dev_1.21.1ubuntu2.6_all.deb ...
Unpacking dpkg-dev (1.21.1ubuntu2.6) ...
Selecting previously unselected package build-essential.
Preparing to unpack .../30-build-essential_12.9ubuntu3_amd64.deb ...
Unpacking build-essential (12.9ubuntu3) ...
Selecting previously unselected package libfakeroot:amd64.
Preparing to unpack .../31-libfakeroot_1.28-1ubuntu1_amd64.deb ...
Unpacking libfakeroot:amd64 (1.28-1ubuntu1) ...
Selecting previously unselected package fakeroot.
Preparing to unpack .../32-fakeroot_1.28-1ubuntu1_amd64.deb ...
Unpacking fakeroot (1.28-1ubuntu1) ...
Selecting previously unselected package javascript-common.
Preparing to unpack .../33-javascript-common_11+nmu1_all.deb ...
Unpacking javascript-common (11+nmu1) ...
Selecting previously unselected package libalgorithm-diff-perl.
Preparing to unpack .../34-libalgorithm-diff-perl_1.201-1_all.deb ...
Unpacking libalgorithm-diff-perl (1.201-1) ...
Selecting previously unselected package libalgorithm-diff-xs-perl.
Preparing to unpack .../35-libalgorithm-diff-xs-perl_0.04-6build3_amd64.deb ...
Unpacking libalgorithm-diff-xs-perl (0.04-6build3) ...
Selecting previously unselected package libalgorithm-merge-perl.
Preparing to unpack .../36-libalgorithm-merge-perl_0.08-3_all.deb ...
Unpacking libalgorithm-merge-perl (0.08-3) ...
Selecting previously unselected package libxpm4:amd64.
Preparing to unpack .../37-libxpm4_1%3a3.5.12-1ubuntu0.22.04.2_amd64.deb ...
Unpacking libxpm4:amd64 (1:3.5.12-1ubuntu0.22.04.2) ...
Selecting previously unselected package libgd3:amd64.
Preparing to unpack .../38-libgd3_2.3.0-2ubuntu2.3_amd64.deb ...
Unpacking libgd3:amd64 (2.3.0-2ubuntu2.3) ...
Selecting previously unselected package libc-devtools.
Preparing to unpack .../39-libc-devtools_2.35-0ubuntu3.11_amd64.deb ...
Unpacking libc-devtools (2.35-0ubuntu3.11) ...
Selecting previously unselected package libexpat1-dev:amd64.
Preparing to unpack .../40-libexpat1-dev_2.4.7-1ubuntu0.6_amd64.deb ...
Unpacking libexpat1-dev:amd64 (2.4.7-1ubuntu0.6) ...
Selecting previously unselected package libfile-fcntllock-perl.
Preparing to unpack .../41-libfile-fcntllock-perl_0.22-3build7_amd64.deb ...
Unpacking libfile-fcntllock-perl (0.22-3build7) ...
Selecting previously unselected package libjs-jquery.
Preparing to unpack .../42-libjs-jquery_3.6.0+dfsg+~3.5.13-1_all.deb ...
Unpacking libjs-jquery (3.6.0+dfsg+~3.5.13-1) ...
Selecting previously unselected package libjs-underscore.
Preparing to unpack .../43-libjs-underscore_1.13.2~dfsg-2_all.deb ...
Unpacking libjs-underscore (1.13.2~dfsg-2) ...
Selecting previously unselected package libjs-sphinxdoc.
Preparing to unpack .../44-libjs-sphinxdoc_4.3.2-1_all.deb ...
Unpacking libjs-sphinxdoc (4.3.2-1) ...
Selecting previously unselected package zlib1g-dev:amd64.
Preparing to unpack .../45-zlib1g-dev_1%3a1.2.11.dfsg-2ubuntu9.2_amd64.deb ...
Unpacking zlib1g-dev:amd64 (1:1.2.11.dfsg-2ubuntu9.2) ...
Selecting previously unselected package libpython3.10-dev:amd64.
Preparing to unpack .../46-libpython3.10-dev_3.10.12-1~22.04.11_amd64.deb ...
Unpacking libpython3.10-dev:amd64 (3.10.12-1~22.04.11) ...
Selecting previously unselected package libpython3-dev:amd64.
Preparing to unpack .../47-libpython3-dev_3.10.6-1~22.04.1_amd64.deb ...
Unpacking libpython3-dev:amd64 (3.10.6-1~22.04.1) ...
Selecting previously unselected package manpages-dev.
Preparing to unpack .../48-manpages-dev_5.10-1ubuntu1_all.deb ...
Unpacking manpages-dev (5.10-1ubuntu1) ...
Selecting previously unselected package python3.10-dev.
Preparing to unpack .../49-python3.10-dev_3.10.12-1~22.04.11_amd64.deb ...
Unpacking python3.10-dev (3.10.12-1~22.04.11) ...
Selecting previously unselected package python3-dev.
Preparing to unpack .../50-python3-dev_3.10.6-1~22.04.1_amd64.deb ...
Unpacking python3-dev (3.10.6-1~22.04.1) ...
Selecting previously unselected package python3-wheel.
Preparing to unpack .../51-python3-wheel_0.37.1-2ubuntu0.22.04.1_all.deb ...
Unpacking python3-wheel (0.37.1-2ubuntu0.22.04.1) ...
Selecting previously unselected package python3-pip.
Preparing to unpack .../52-python3-pip_22.0.2+dfsg-1ubuntu0.7_all.deb ...
Unpacking python3-pip (22.0.2+dfsg-1ubuntu0.7) ...
Setting up javascript-common (11+nmu1) ...
Setting up gcc-11-base:amd64 (11.4.0-1ubuntu1~22.04.2) ...
Setting up manpages-dev (5.10-1ubuntu1) ...
Setting up lto-disabled-list (24) ...
Setting up libxpm4:amd64 (1:3.5.12-1ubuntu0.22.04.2) ...
Setting up libfile-fcntllock-perl (0.22-3build7) ...
Setting up libalgorithm-diff-perl (1.201-1) ...
Setting up linux-libc-dev:amd64 (5.15.0-157.167) ...
Setting up python3-wheel (0.37.1-2ubuntu0.22.04.1) ...
Setting up libfakeroot:amd64 (1.28-1ubuntu1) ...
Setting up libasan6:amd64 (11.4.0-1ubuntu1~22.04.2) ...
Setting up fakeroot (1.28-1ubuntu1) ...
update-alternatives: using /usr/bin/fakeroot-sysv to provide /usr/bin/fakeroot (fakeroot) in auto mode
Setting up libtirpc-dev:amd64 (1.3.2-2ubuntu0.1) ...
Setting up rpcsvc-proto (1.4.2-0ubuntu6) ...
Setting up make (4.3-4.1build1) ...
Setting up libquadmath0:amd64 (12.3.0-1ubuntu1~22.04.2) ...
Setting up libgd3:amd64 (2.3.0-2ubuntu2.3) ...
Setting up libmpc3:amd64 (1.2.1-2build1) ...
Setting up libatomic1:amd64 (12.3.0-1ubuntu1~22.04.2) ...
Setting up python3-pip (22.0.2+dfsg-1ubuntu0.7) ...
Setting up libdpkg-perl (1.21.1ubuntu2.6) ...
Setting up libubsan1:amd64 (12.3.0-1ubuntu1~22.04.2) ...
Setting up libnsl-dev:amd64 (1.3.0-2build2) ...
Setting up libcrypt-dev:amd64 (1:4.4.27-1) ...
Setting up libjs-jquery (3.6.0+dfsg+~3.5.13-1) ...
Setting up libisl23:amd64 (0.24-2build1) ...
Setting up libc-dev-bin (2.35-0ubuntu3.11) ...
Setting up libalgorithm-diff-xs-perl (0.04-6build3) ...
Setting up libcc1-0:amd64 (12.3.0-1ubuntu1~22.04.2) ...
Setting up liblsan0:amd64 (12.3.0-1ubuntu1~22.04.2) ...
Setting up libitm1:amd64 (12.3.0-1ubuntu1~22.04.2) ...
Setting up libc-devtools (2.35-0ubuntu3.11) ...
Setting up libjs-underscore (1.13.2~dfsg-2) ...
Setting up libalgorithm-merge-perl (0.08-3) ...
Setting up libtsan0:amd64 (11.4.0-1ubuntu1~22.04.2) ...
Setting up cpp-11 (11.4.0-1ubuntu1~22.04.2) ...
Setting up dpkg-dev (1.21.1ubuntu2.6) ...
Setting up libjs-sphinxdoc (4.3.2-1) ...
Setting up libgcc-11-dev:amd64 (11.4.0-1ubuntu1~22.04.2) ...
Setting up gcc-11 (11.4.0-1ubuntu1~22.04.2) ...
Setting up cpp (4:11.2.0-1ubuntu1) ...
Setting up libc6-dev:amd64 (2.35-0ubuntu3.11) ...
Setting up gcc (4:11.2.0-1ubuntu1) ...
Setting up libexpat1-dev:amd64 (2.4.7-1ubuntu0.6) ...
Setting up libstdc++-11-dev:amd64 (11.4.0-1ubuntu1~22.04.2) ...
Setting up zlib1g-dev:amd64 (1:1.2.11.dfsg-2ubuntu9.2) ...
Setting up g++-11 (11.4.0-1ubuntu1~22.04.2) ...
Setting up libpython3.10-dev:amd64 (3.10.12-1~22.04.11) ...
Setting up python3.10-dev (3.10.12-1~22.04.11) ...
Setting up g++ (4:11.2.0-1ubuntu1) ...
update-alternatives: using /usr/bin/g++ to provide /usr/bin/c++ (c++) in auto mode
Setting up build-essential (12.9ubuntu3) ...
Setting up libpython3-dev:amd64 (3.10.6-1~22.04.1) ...
Setting up python3-dev (3.10.6-1~22.04.1) ...
Processing triggers for man-db (2.10.2-1) ...
Processing triggers for libc-bin (2.35-0ubuntu3.11) ...
packages have been installed but needrestart is suspended
Collecting ansible==10.7.0
  Downloading ansible-10.7.0-py3-none-any.whl (51.6 MB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 51.6/51.6 MB 34.0 MB/s eta 0:00:00
Collecting ansible-core==2.17.12
  Downloading ansible_core-2.17.12-py3-none-any.whl (2.2 MB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 2.2/2.2 MB 77.5 MB/s eta 0:00:00
Collecting certifi==2025.6.15
  Downloading certifi-2025.6.15-py3-none-any.whl (157 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 157.7/157.7 KB 55.2 MB/s eta 0:00:00
Collecting cffi==1.17.1
  Downloading cffi-1.17.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (446 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 446.2/446.2 KB 91.7 MB/s eta 0:00:00
Collecting charset-normalizer==3.4.2
  Downloading charset_normalizer-3.4.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (149 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 149.5/149.5 KB 55.3 MB/s eta 0:00:00
Collecting cryptography==45.0.4
  Downloading cryptography-45.0.4-cp37-abi3-manylinux_2_34_x86_64.whl (4.5 MB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 4.5/4.5 MB 111.6 MB/s eta 0:00:00
Collecting deprecated==1.2.18
  Downloading Deprecated-1.2.18-py2.py3-none-any.whl (10.0 kB)
Collecting idna==3.10
  Downloading idna-3.10-py3-none-any.whl (70 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 70.4/70.4 KB 28.9 MB/s eta 0:00:00
Collecting jinja2==3.1.6
  Downloading jinja2-3.1.6-py3-none-any.whl (134 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 134.9/134.9 KB 36.7 MB/s eta 0:00:00
Collecting jmespath==1.0.1
  Downloading jmespath-1.0.1-py3-none-any.whl (20 kB)
Collecting markupsafe==3.0.2
  Downloading MarkupSafe-3.0.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (20 kB)
Collecting mitogen==0.3.24
  Downloading mitogen-0.3.24-py2.py3-none-any.whl (285 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 285.9/285.9 KB 48.6 MB/s eta 0:00:00
Collecting packaging==25.0
  Downloading packaging-25.0-py3-none-any.whl (66 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 66.5/66.5 KB 16.0 MB/s eta 0:00:00
Collecting pycparser==2.22
  Downloading pycparser-2.22-py3-none-any.whl (117 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 117.6/117.6 KB 24.1 MB/s eta 0:00:00
Collecting pygithub==2.6.1
  Downloading PyGithub-2.6.1-py3-none-any.whl (410 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 410.5/410.5 KB 43.8 MB/s eta 0:00:00
Collecting pyjwt==2.10.1
  Downloading PyJWT-2.10.1-py3-none-any.whl (22 kB)
Collecting pynacl==1.5.0
  Downloading PyNaCl-1.5.0-cp36-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_24_x86_64.whl (856 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 856.7/856.7 KB 29.2 MB/s eta 0:00:00
Collecting pyyaml==6.0.2
  Downloading PyYAML-6.0.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (751 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 751.2/751.2 KB 76.2 MB/s eta 0:00:00
Collecting requests==2.32.4
  Downloading requests-2.32.4-py3-none-any.whl (64 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 64.8/64.8 KB 17.1 MB/s eta 0:00:00
Collecting resolvelib==1.0.1
  Downloading resolvelib-1.0.1-py2.py3-none-any.whl (17 kB)
Collecting typing-extensions==4.14.0
  Downloading typing_extensions-4.14.0-py3-none-any.whl (43 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 43.8/43.8 KB 13.8 MB/s eta 0:00:00
Collecting urllib3==2.5.0
  Downloading urllib3-2.5.0-py3-none-any.whl (129 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 129.8/129.8 KB 36.3 MB/s eta 0:00:00
Collecting wrapt==1.17.2
  Downloading wrapt-1.17.2-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (82 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 82.8/82.8 KB 25.6 MB/s eta 0:00:00
Installing collected packages: resolvelib, wrapt, urllib3, typing-extensions, pyyaml, pyjwt, pycparser, packaging, mitogen, markupsafe, jmespath, idna, charset-normalizer, certifi, requests, jinja2, deprecated, cffi, pynacl, cryptography, ansible-core, pygithub, ansible
  Attempting uninstall: urllib3
    Found existing installation: urllib3 1.26.5
    Not uninstalling urllib3 at /usr/lib/python3/dist-packages, outside environment /usr
    Can't uninstall 'urllib3'. No files were found to uninstall.
  Attempting uninstall: pyyaml
    Found existing installation: PyYAML 5.4.1
    Not uninstalling pyyaml at /usr/lib/python3/dist-packages, outside environment /usr
    Can't uninstall 'PyYAML'. No files were found to uninstall.
  Attempting uninstall: pyjwt
    Found existing installation: PyJWT 2.3.0
    Not uninstalling pyjwt at /usr/lib/python3/dist-packages, outside environment /usr
    Can't uninstall 'PyJWT'. No files were found to uninstall.
  Attempting uninstall: markupsafe
    Found existing installation: MarkupSafe 2.0.1
    Not uninstalling markupsafe at /usr/lib/python3/dist-packages, outside environment /usr
    Can't uninstall 'MarkupSafe'. No files were found to uninstall.
  Attempting uninstall: idna
    Found existing installation: idna 3.3
    Not uninstalling idna at /usr/lib/python3/dist-packages, outside environment /usr
    Can't uninstall 'idna'. No files were found to uninstall.
  Attempting uninstall: certifi
    Found existing installation: certifi 2020.6.20
    Not uninstalling certifi at /usr/lib/python3/dist-packages, outside environment /usr
    Can't uninstall 'certifi'. No files were found to uninstall.
  Attempting uninstall: requests
    Found existing installation: requests 2.25.1
    Not uninstalling requests at /usr/lib/python3/dist-packages, outside environment /usr
    Can't uninstall 'requests'. No files were found to uninstall.
  Attempting uninstall: jinja2
    Found existing installation: Jinja2 3.0.3
    Not uninstalling jinja2 at /usr/lib/python3/dist-packages, outside environment /usr
    Can't uninstall 'Jinja2'. No files were found to uninstall.
  Attempting uninstall: cryptography
    Found existing installation: cryptography 3.4.8
    Not uninstalling cryptography at /usr/lib/python3/dist-packages, outside environment /usr
    Can't uninstall 'cryptography'. No files were found to uninstall.
Successfully installed ansible-10.7.0 ansible-core-2.17.12 certifi-2025.6.15 cffi-1.17.1 charset-normalizer-3.4.2 cryptography-45.0.4 deprecated-1.2.18 idna-3.10 jinja2-3.1.6 jmespath-1.0.1 markupsafe-3.0.2 mitogen-0.3.24 packaging-25.0 pycparser-2.22 pygithub-2.6.1 pyjwt-2.10.1 pynacl-1.5.0 pyyaml-6.0.2 requests-2.32.4 resolvelib-1.0.1 typing-extensions-4.14.0 urllib3-2.5.0 wrapt-1.17.2
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
Starting galaxy role install process
- downloading role 'docker_engine', owned by andrewrothstein
- downloading role from https://github.com/andrewrothstein/ansible-docker_engine/archive/v0.3.2.tar.gz
- extracting andrewrothstein.docker_engine to /home/rehanfazal/.ansible/roles/andrewrothstein.docker_engine
- andrewrothstein.docker_engine (v0.3.2) was installed successfully
- adding dependency: andrewrothstein.tls (v0.1.11)
- downloading role 'podman', owned by andrewrothstein
- downloading role from https://github.com/andrewrothstein/ansible-podman/archive/v2.1.1.tar.gz
- extracting andrewrothstein.podman to /home/rehanfazal/.ansible/roles/andrewrothstein.podman
- andrewrothstein.podman (v2.1.1) was installed successfully
- adding dependency: andrewrothstein.kubic (v0.0.6)
- downloading role 'kind', owned by andrewrothstein
- downloading role from https://github.com/andrewrothstein/ansible-kind/archive/v1.2.14.tar.gz
- extracting andrewrothstein.kind to /home/rehanfazal/.ansible/roles/andrewrothstein.kind
- andrewrothstein.kind (v1.2.14) was installed successfully
- downloading role 'kubectl', owned by andrewrothstein
- downloading role from https://github.com/andrewrothstein/ansible-kubectl/archive/v1.4.3.tar.gz
- extracting andrewrothstein.kubectl to /home/rehanfazal/.ansible/roles/andrewrothstein.kubectl
- andrewrothstein.kubectl (v1.4.3) was installed successfully
- downloading role 'kpt', owned by andrewrothstein
- downloading role from https://github.com/andrewrothstein/ansible-kpt/archive/0.0.4.tar.gz
- extracting andrewrothstein.kpt to /home/rehanfazal/.ansible/roles/andrewrothstein.kpt
- andrewrothstein.kpt (0.0.4) was installed successfully
- adding dependency: andrewrothstein.unarchivedeps (3.0.3)
- adding dependency: andrewrothstein.git (v3.2.11)
- downloading role 'cni', owned by darkwizard242
- downloading role from https://github.com/darkwizard242/ansible-role-cni/archive/2.5.3.tar.gz
- extracting darkwizard242.cni to /home/rehanfazal/.ansible/roles/darkwizard242.cni
- darkwizard242.cni (2.5.3) was installed successfully
- downloading role 'tls', owned by andrewrothstein
- downloading role from https://github.com/andrewrothstein/ansible-tls/archive/v0.1.11.tar.gz
- extracting andrewrothstein.tls to /home/rehanfazal/.ansible/roles/andrewrothstein.tls
- andrewrothstein.tls (v0.1.11) was installed successfully
- downloading role 'kubic', owned by andrewrothstein
- downloading role from https://github.com/andrewrothstein/ansible-kubic/archive/v0.0.6.tar.gz
- extracting andrewrothstein.kubic to /home/rehanfazal/.ansible/roles/andrewrothstein.kubic
- andrewrothstein.kubic (v0.0.6) was installed successfully
- adding dependency: andrewrothstein.gpg (v1.2.4)
- downloading role 'unarchivedeps', owned by andrewrothstein
- downloading role from https://github.com/andrewrothstein/ansible-unarchivedeps/archive/3.0.3.tar.gz
- extracting andrewrothstein.unarchivedeps to /home/rehanfazal/.ansible/roles/andrewrothstein.unarchivedeps
- andrewrothstein.unarchivedeps (3.0.3) was installed successfully
- downloading role 'git', owned by andrewrothstein
- downloading role from https://github.com/andrewrothstein/ansible-git/archive/v3.2.11.tar.gz
- extracting andrewrothstein.git to /home/rehanfazal/.ansible/roles/andrewrothstein.git
- andrewrothstein.git (v3.2.11) was installed successfully
- downloading role 'gpg', owned by andrewrothstein
- downloading role from https://github.com/andrewrothstein/ansible-gpg/archive/v1.2.4.tar.gz
- extracting andrewrothstein.gpg to /home/rehanfazal/.ansible/roles/andrewrothstein.gpg
- andrewrothstein.gpg (v1.2.4) was installed successfully
Starting galaxy collection install process
Process install dependency map
Starting collection install process
'ansible.posix:1.6.2' is already installed, skipping.
Downloading https://galaxy.ansible.com/api/v3/plugin/ansible/content/published/collections/artifacts/community-general-11.0.0.tar.gz to /home/rehanfazal/.ansible/tmp/ansible-local-94088514b65re/tmpzhxdaw2u/community-general-11.0.0-qs66cu44
Installing 'community.general:11.0.0' to '/home/rehanfazal/.ansible/collections/ansible_collections/community/general'
community.general:11.0.0 was installed successfully
Downloading https://galaxy.ansible.com/api/v3/plugin/ansible/content/published/collections/artifacts/kubernetes-core-6.0.0.tar.gz to /home/rehanfazal/.ansible/tmp/ansible-local-94088514b65re/tmpzhxdaw2u/kubernetes-core-6.0.0-jkvbgkg9
Installing 'kubernetes.core:6.0.0' to '/home/rehanfazal/.ansible/collections/ansible_collections/kubernetes/core'
kubernetes.core:6.0.0 was installed successfully
Downloading https://galaxy.ansible.com/api/v3/plugin/ansible/content/published/collections/artifacts/community-docker-4.6.1.tar.gz to /home/rehanfazal/.ansible/tmp/ansible-local-94088514b65re/tmpzhxdaw2u/community-docker-4.6.1-i3w8jdyr
Installing 'community.docker:4.6.1' to '/home/rehanfazal/.ansible/collections/ansible_collections/community/docker'
community.docker:4.6.1 was installed successfully
'community.library_inventory_filtering_v1:1.0.2' is already installed, skipping.

** Configure SSH accessGenerating public/private rsa key pair.
Enter file in which to save the key (/home/rehanfazal/.ssh/id_rsa): Your identification has been saved in /home/rehanfazal/.ssh/id_rsa
Your public key has been saved in /home/rehanfazal/.ssh/id_rsa.pub
The key fingerprint is:
SHA256:vDcoVh/UYgwpeidi79VjvcOfewC895p1PKrHqNRviW4 rehanfazal@smo
The key's randomart image is:
+---[RSA 3072]----+
|        ..       |
|      . .o .     |
|     . .  =..    |
|    + o..o .o    |
|   . + oS... o   |
|      ...+=.o o. |
|     .o.oo+++o.++|
|     ..... E==.+=|
|         .+o+=*+ |
+----[SHA256]-----+

** Configure Ansiblefind: ‘/home/sridharkn’: Permission denied
find: ‘/home/agnikmisra’: Permission denied
find: ‘/home/ubuntu’: Permission denied
find: ‘/home/mdimado’: Permission denied
[ssh_connection]
# Enabling Pipelining
pipelining=True
# Enable SSH Multiplexing
ansible_ssh_common_args = -o ControlMaster=auto -o ControlPersist=30m -o ConnectionAttempts=100
retries=2

[defaults]
# Log Path
log_path = /var/log/deploy_sandbox.log
# Increase the forks
forks = 20
# Enable mitogen
strategy_plugins = /usr/local/lib/python3.10/dist-packages/mitogen
# Enable timing information
callbacks_enabled = timer, profile_tasks, profile_roles
# The playbooks is only run on the implicit localhost.
# Silence warning about empty hosts inventory.
localhost_warning = False
deprecation_warnings = False

# Disable host key checking
host_key_checking = False

# Enable facts caching mechanism
gathering = smart
fact_caching = jsonfile
fact_caching_connection = /tmp

** Create management cluster/usr/local/bin/ansible-playbook -i 127.0.0.1, --connection=local playbooks/cluster.yml -i inventory.ini --tags nonkind_k8s  --extra-vars="{ "nephio_catalog_repo_uri": "https://github.com/nephio-project/catalog.git", "k8s": { "context" : "kubernetes-admin@kubernetes", "version" : "v1.32.0" } }"
[WARNING]: log file at /var/log/deploy_sandbox.log is not writeable and we cannot create it, aborting

[WARNING]: Found variable using reserved name: namespace

PLAY [Bootstrap Management cluster] ********************************************

TASK [Gathering Facts] *********************************************************
Wednesday 01 October 2025  12:29:27 +0000 (0:00:00.014)       0:00:00.014 ***** 
Wednesday 01 October 2025  12:29:27 +0000 (0:00:00.013)       0:00:00.013 ***** 
[WARNING]: Platform linux on host 127.0.0.1 is using the discovered Python
interpreter at /usr/bin/python3.10, but future installation of another Python
interpreter could change the meaning of that path. See
https://docs.ansible.com/ansible-
core/2.17/reference_appendices/interpreter_discovery.html for more information.
ok: [127.0.0.1]

TASK [Install kubernetes python package] ***************************************
Wednesday 01 October 2025  12:29:29 +0000 (0:00:02.040)       0:00:02.055 ***** 
Wednesday 01 October 2025  12:29:29 +0000 (0:00:02.040)       0:00:02.054 ***** 
changed: [127.0.0.1]

TASK [Install kpt command-line] ************************************************
Wednesday 01 October 2025  12:29:34 +0000 (0:00:04.928)       0:00:06.983 ***** 
Wednesday 01 October 2025  12:29:34 +0000 (0:00:04.928)       0:00:06.983 ***** 
included: andrewrothstein.kpt for 127.0.0.1

TASK [Installing andrewrothstein.git] ******************************************
Wednesday 01 October 2025  12:29:34 +0000 (0:00:00.093)       0:00:07.077 ***** 
Wednesday 01 October 2025  12:29:34 +0000 (0:00:00.093)       0:00:07.076 ***** 
included: andrewrothstein.git for 127.0.0.1

TASK [andrewrothstein.git : Resolve platform specific vars] ********************
Wednesday 01 October 2025  12:29:34 +0000 (0:00:00.062)       0:00:07.140 ***** 
Wednesday 01 October 2025  12:29:34 +0000 (0:00:00.062)       0:00:07.139 ***** 
skipping: [127.0.0.1]

TASK [Install git from source] *************************************************
Wednesday 01 October 2025  12:29:35 +0000 (0:00:00.045)       0:00:07.185 ***** 
Wednesday 01 October 2025  12:29:35 +0000 (0:00:00.045)       0:00:07.184 ***** 
skipping: [127.0.0.1]

TASK [andrewrothstein.git : Running pkg installer...] **************************
Wednesday 01 October 2025  12:29:35 +0000 (0:00:00.044)       0:00:07.229 ***** 
Wednesday 01 October 2025  12:29:35 +0000 (0:00:00.044)       0:00:07.228 ***** 
included: /home/rehanfazal/.ansible/roles/andrewrothstein.git/tasks/pkg.yml for 127.0.0.1

TASK [andrewrothstein.git : Install git os pkgs...] ****************************
Wednesday 01 October 2025  12:29:35 +0000 (0:00:00.063)       0:00:07.293 ***** 
Wednesday 01 October 2025  12:29:35 +0000 (0:00:00.063)       0:00:07.292 ***** 
ok: [127.0.0.1]

TASK [andrewrothstein.git : Install git-lfs os pkgs...] ************************
Wednesday 01 October 2025  12:29:36 +0000 (0:00:01.346)       0:00:08.639 ***** 
Wednesday 01 October 2025  12:29:36 +0000 (0:00:01.346)       0:00:08.638 ***** 
skipping: [127.0.0.1]

TASK [andrewrothstein.git : Configurating git in /etc/gitconfig] ***************
Wednesday 01 October 2025  12:29:36 +0000 (0:00:00.042)       0:00:08.682 ***** 
Wednesday 01 October 2025  12:29:36 +0000 (0:00:00.042)       0:00:08.681 ***** 
skipping: [127.0.0.1]

TASK [andrewrothstein.kpt : Resolve platform specific vars] ********************
Wednesday 01 October 2025  12:29:36 +0000 (0:00:00.075)       0:00:08.757 ***** 
Wednesday 01 October 2025  12:29:36 +0000 (0:00:00.075)       0:00:08.756 ***** 
skipping: [127.0.0.1]

TASK [andrewrothstein.kpt : Check for installation in /usr/local/kpt_linux_amd64-1.0.0-beta.57/kpt] ***
Wednesday 01 October 2025  12:29:36 +0000 (0:00:00.067)       0:00:08.824 ***** 
Wednesday 01 October 2025  12:29:36 +0000 (0:00:00.067)       0:00:08.823 ***** 
ok: [127.0.0.1]

TASK [andrewrothstein.kpt : Downloading https://github.com/GoogleContainerTools/kpt/releases/download/v1.0.0-beta.57/kpt_linux_amd64-1.0.0-beta.57.tar.gz to /tmp/kpt_linux_amd64-1.0.0-beta.57.tar.gz] ***
Wednesday 01 October 2025  12:29:37 +0000 (0:00:00.439)       0:00:09.263 ***** 
Wednesday 01 October 2025  12:29:37 +0000 (0:00:00.439)       0:00:09.262 ***** 
changed: [127.0.0.1]

TASK [andrewrothstein.kpt : Mkdir /usr/local/kpt_linux_amd64-1.0.0-beta.57] ****
Wednesday 01 October 2025  12:29:38 +0000 (0:00:01.200)       0:00:10.464 ***** 
Wednesday 01 October 2025  12:29:38 +0000 (0:00:01.200)       0:00:10.463 ***** 
changed: [127.0.0.1]

TASK [Installing andrewrothstein.unarchivedeps] ********************************
Wednesday 01 October 2025  12:29:38 +0000 (0:00:00.404)       0:00:10.868 ***** 
Wednesday 01 October 2025  12:29:38 +0000 (0:00:00.404)       0:00:10.867 ***** 
included: andrewrothstein.unarchivedeps for 127.0.0.1

TASK [andrewrothstein.unarchivedeps : Resolve platform specific vars] **********
Wednesday 01 October 2025  12:29:38 +0000 (0:00:00.073)       0:00:10.942 ***** 
Wednesday 01 October 2025  12:29:38 +0000 (0:00:00.073)       0:00:10.941 ***** 
ok: [127.0.0.1] => (item=/home/rehanfazal/.ansible/roles/andrewrothstein.unarchivedeps/vars/Debian.yml)

TASK [andrewrothstein.unarchivedeps : Install unarchive ansible module required OS pkgs...] ***
Wednesday 01 October 2025  12:29:38 +0000 (0:00:00.049)       0:00:10.991 ***** 
Wednesday 01 October 2025  12:29:38 +0000 (0:00:00.049)       0:00:10.990 ***** 
changed: [127.0.0.1]

TASK [andrewrothstein.kpt : Unarchive /tmp/kpt_linux_amd64-1.0.0-beta.57.tar.gz into /usr/local/kpt_linux_amd64-1.0.0-beta.57] ***
Wednesday 01 October 2025  12:29:44 +0000 (0:00:06.059)       0:00:17.050 ***** 
Wednesday 01 October 2025  12:29:44 +0000 (0:00:06.059)       0:00:17.049 ***** 
changed: [127.0.0.1]

TASK [andrewrothstein.kpt : Rm -f /tmp/kpt_linux_amd64-1.0.0-beta.57.tar.gz] ***
Wednesday 01 October 2025  12:29:46 +0000 (0:00:02.062)       0:00:19.112 ***** 
Wednesday 01 October 2025  12:29:46 +0000 (0:00:02.062)       0:00:19.112 ***** 
changed: [127.0.0.1]

TASK [andrewrothstein.kpt : Link /usr/local/bin/kpt to /usr/local/kpt_linux_amd64-1.0.0-beta.57/kpt] ***
Wednesday 01 October 2025  12:29:47 +0000 (0:00:00.363)       0:00:19.476 ***** 
Wednesday 01 October 2025  12:29:47 +0000 (0:00:00.363)       0:00:19.475 ***** 
changed: [127.0.0.1]

TASK [bootstrap : Apply kpt packages] ******************************************
Wednesday 01 October 2025  12:29:47 +0000 (0:00:00.314)       0:00:19.791 ***** 
Wednesday 01 October 2025  12:29:47 +0000 (0:00:00.314)       0:00:19.790 ***** 
included: /home/rehanfazal/test-infra/e2e/provision/playbooks/roles/bootstrap/tasks/apply-pkgs.yml for 127.0.0.1

TASK [bootstrap : Init job ids array] ******************************************
Wednesday 01 October 2025  12:29:47 +0000 (0:00:00.066)       0:00:19.858 ***** 
Wednesday 01 October 2025  12:29:47 +0000 (0:00:00.066)       0:00:19.857 ***** 
ok: [127.0.0.1]

TASK [bootstrap : Create list of packages] *************************************
Wednesday 01 October 2025  12:29:47 +0000 (0:00:00.044)       0:00:19.902 ***** 
Wednesday 01 October 2025  12:29:47 +0000 (0:00:00.044)       0:00:19.901 ***** 
ok: [127.0.0.1]

TASK [Deploy base packages] ****************************************************
Wednesday 01 October 2025  12:29:47 +0000 (0:00:00.082)       0:00:19.984 ***** 
Wednesday 01 October 2025  12:29:47 +0000 (0:00:00.082)       0:00:19.983 ***** 
included: kpt for 127.0.0.1 => (item={'repo_uri': 'https://github.com/nephio-project/catalog.git', 'pkg': 'distros/sandbox/cert-manager', 'version': 'main', 'async': 660, 'poll': 0})
included: kpt for 127.0.0.1 => (item={'repo_uri': 'https://github.com/nephio-project/catalog.git', 'pkg': 'distros/sandbox/gitea', 'version': 'main', 'async': 780, 'poll': 0})
included: kpt for 127.0.0.1 => (item={'repo_uri': 'https://github.com/nephio-project/catalog.git', 'pkg': 'nephio/optional/resource-backend', 'version': 'main', 'async': 780, 'poll': 0})
included: kpt for 127.0.0.1 => (item={'repo_uri': 'https://github.com/nephio-project/catalog.git', 'pkg': 'distros/sandbox/metallb', 'version': 'main', 'async': 1020, 'poll': 5})
included: kpt for 127.0.0.1 => (item={'repo_uri': 'https://github.com/nephio-project/catalog.git', 'pkg': 'distros/sandbox/metallb-sandbox-config', 'version': 'main', 'async': 660, 'poll': 0})
included: kpt for 127.0.0.1 => (item={'repo_uri': 'https://github.com/nephio-project/catalog.git', 'pkg': 'infra/capi/cluster-capi', 'version': 'main', 'async': 900, 'poll': 5})
included: kpt for 127.0.0.1 => (item={'repo_uri': 'https://github.com/nephio-project/catalog.git', 'pkg': 'infra/capi/cluster-capi-infrastructure-docker', 'version': 'main', 'async': 780, 'poll': 5})
included: kpt for 127.0.0.1 => (item={'repo_uri': 'https://github.com/nephio-project/catalog.git', 'pkg': 'infra/capi/cluster-capi-kind-docker-templates', 'version': 'main', 'async': 1500, 'poll': 0})

TASK [kpt : Define working directory] ******************************************
Wednesday 01 October 2025  12:29:48 +0000 (0:00:00.259)       0:00:20.243 ***** 
Wednesday 01 October 2025  12:29:48 +0000 (0:00:00.259)       0:00:20.243 ***** 
ok: [127.0.0.1]

TASK [kpt : Create base directory if it does not exist: /tmp/kpt-pkg/distros/sandbox/cert-manager] ***
Wednesday 01 October 2025  12:29:48 +0000 (0:00:00.041)       0:00:20.285 ***** 
Wednesday 01 October 2025  12:29:48 +0000 (0:00:00.041)       0:00:20.285 ***** 
changed: [127.0.0.1]

TASK [kpt : Fetch package: distros/sandbox/cert-manager] ***********************
Wednesday 01 October 2025  12:29:48 +0000 (0:00:00.318)       0:00:20.604 ***** 
Wednesday 01 October 2025  12:29:48 +0000 (0:00:00.318)       0:00:20.603 ***** 
changed: [127.0.0.1]

TASK [kpt : Get package content information for distros/sandbox/cert-manager] ***
Wednesday 01 October 2025  12:29:50 +0000 (0:00:01.594)       0:00:22.198 ***** 
Wednesday 01 October 2025  12:29:50 +0000 (0:00:01.594)       0:00:22.197 ***** 
ok: [127.0.0.1]

TASK [kpt : Print package content information for distros/sandbox/cert-manager] ***
Wednesday 01 October 2025  12:29:50 +0000 (0:00:00.407)       0:00:22.605 ***** 
Wednesday 01 October 2025  12:29:50 +0000 (0:00:00.407)       0:00:22.604 ***** 
ok: [127.0.0.1] => {
    "kpt_pkg_tree.stdout_lines": [
        "Package \"cert-manager\"",
        "├── [Kptfile]  Kptfile cert-manager",
        "├── [cert-manager.yaml]  Namespace cert-manager",
        "├── [cert-manager.yaml]  ClusterRole cert-manager-cainjector",
        "├── [cert-manager.yaml]  ClusterRoleBinding cert-manager-cainjector",
        "├── [cert-manager.yaml]  ClusterRole cert-manager-cluster-view",
        "├── [cert-manager.yaml]  ClusterRole cert-manager-controller-approve:cert-manager-io",
        "├── [cert-manager.yaml]  ClusterRoleBinding cert-manager-controller-approve:cert-manager-io",
        "├── [cert-manager.yaml]  ClusterRole cert-manager-controller-certificates",
        "├── [cert-manager.yaml]  ClusterRoleBinding cert-manager-controller-certificates",
        "├── [cert-manager.yaml]  ClusterRole cert-manager-controller-certificatesigningrequests",
        "├── [cert-manager.yaml]  ClusterRoleBinding cert-manager-controller-certificatesigningrequests",
        "├── [cert-manager.yaml]  ClusterRole cert-manager-controller-challenges",
        "├── [cert-manager.yaml]  ClusterRoleBinding cert-manager-controller-challenges",
        "├── [cert-manager.yaml]  ClusterRole cert-manager-controller-clusterissuers",
        "├── [cert-manager.yaml]  ClusterRoleBinding cert-manager-controller-clusterissuers",
        "├── [cert-manager.yaml]  ClusterRole cert-manager-controller-ingress-shim",
        "├── [cert-manager.yaml]  ClusterRoleBinding cert-manager-controller-ingress-shim",
        "├── [cert-manager.yaml]  ClusterRole cert-manager-controller-issuers",
        "├── [cert-manager.yaml]  ClusterRoleBinding cert-manager-controller-issuers",
        "├── [cert-manager.yaml]  ClusterRole cert-manager-controller-orders",
        "├── [cert-manager.yaml]  ClusterRoleBinding cert-manager-controller-orders",
        "├── [cert-manager.yaml]  ClusterRole cert-manager-edit",
        "├── [cert-manager.yaml]  ClusterRole cert-manager-view",
        "├── [cert-manager.yaml]  MutatingWebhookConfiguration cert-manager-webhook",
        "├── [cert-manager.yaml]  ValidatingWebhookConfiguration cert-manager-webhook",
        "├── [cert-manager.yaml]  ClusterRole cert-manager-webhook:subjectaccessreviews",
        "├── [cert-manager.yaml]  ClusterRoleBinding cert-manager-webhook:subjectaccessreviews",
        "├── [cert-manager.yaml]  CustomResourceDefinition certificaterequests.cert-manager.io",
        "├── [cert-manager.yaml]  CustomResourceDefinition certificates.cert-manager.io",
        "├── [cert-manager.yaml]  CustomResourceDefinition challenges.acme.cert-manager.io",
        "├── [cert-manager.yaml]  CustomResourceDefinition clusterissuers.cert-manager.io",
        "├── [cert-manager.yaml]  CustomResourceDefinition issuers.cert-manager.io",
        "├── [cert-manager.yaml]  CustomResourceDefinition orders.acme.cert-manager.io",
        "├── [cert-manager.yaml]  ConfigMap cert-manager/cert-manager",
        "├── [cert-manager.yaml]  Deployment cert-manager/cert-manager",
        "├── [cert-manager.yaml]  Service cert-manager/cert-manager",
        "├── [cert-manager.yaml]  ServiceAccount cert-manager/cert-manager",
        "├── [cert-manager.yaml]  Deployment cert-manager/cert-manager-cainjector",
        "├── [cert-manager.yaml]  ServiceAccount cert-manager/cert-manager-cainjector",
        "├── [cert-manager.yaml]  ConfigMap cert-manager/cert-manager-webhook",
        "├── [cert-manager.yaml]  Deployment cert-manager/cert-manager-webhook",
        "├── [cert-manager.yaml]  Service cert-manager/cert-manager-webhook",
        "├── [cert-manager.yaml]  ServiceAccount cert-manager/cert-manager-webhook",
        "├── [cert-manager.yaml]  Role cert-manager/cert-manager-webhook:dynamic-serving",
        "├── [cert-manager.yaml]  RoleBinding cert-manager/cert-manager-webhook:dynamic-serving",
        "├── [cert-manager.yaml]  Role kube-system/cert-manager-cainjector:leaderelection",
        "├── [cert-manager.yaml]  RoleBinding kube-system/cert-manager-cainjector:leaderelection",
        "├── [cert-manager.yaml]  Role kube-system/cert-manager:leaderelection",
        "├── [cert-manager.yaml]  RoleBinding kube-system/cert-manager:leaderelection",
        "└── [package-context.yaml]  ConfigMap kptfile.kpt.dev"
    ]
}

TASK [kpt : Render package: distros/sandbox/cert-manager] **********************
Wednesday 01 October 2025  12:29:50 +0000 (0:00:00.065)       0:00:22.671 ***** 
Wednesday 01 October 2025  12:29:50 +0000 (0:00:00.065)       0:00:22.670 ***** 
ok: [127.0.0.1]

TASK [kpt : Recursively restore ownership of a directory package] **************
Wednesday 01 October 2025  12:29:51 +0000 (0:00:00.484)       0:00:23.155 ***** 
Wednesday 01 October 2025  12:29:51 +0000 (0:00:00.484)       0:00:23.154 ***** 
ok: [127.0.0.1]

TASK [kpt : Get package differences between local and upstream: distros/sandbox/cert-manager] ***
Wednesday 01 October 2025  12:29:51 +0000 (0:00:00.327)       0:00:23.482 ***** 
Wednesday 01 October 2025  12:29:51 +0000 (0:00:00.327)       0:00:23.481 ***** 
ok: [127.0.0.1]

TASK [kpt : Print package differences: distros/sandbox/cert-manager] ***********
Wednesday 01 October 2025  12:29:53 +0000 (0:00:02.043)       0:00:25.526 ***** 
Wednesday 01 October 2025  12:29:53 +0000 (0:00:02.043)       0:00:25.525 ***** 
ok: [127.0.0.1] => {
    "kpt_pkg_diff.stdout_lines": []
}

TASK [kpt : Check package has been initialized] ********************************
Wednesday 01 October 2025  12:29:53 +0000 (0:00:00.068)       0:00:25.595 ***** 
Wednesday 01 October 2025  12:29:53 +0000 (0:00:00.068)       0:00:25.594 ***** 
ok: [127.0.0.1]

TASK [kpt : Init package: distros/sandbox/cert-manager] ************************
Wednesday 01 October 2025  12:29:53 +0000 (0:00:00.282)       0:00:25.878 ***** 
Wednesday 01 October 2025  12:29:53 +0000 (0:00:00.282)       0:00:25.877 ***** 
changed: [127.0.0.1]

TASK [kpt : Print package initialization for distros/sandbox/cert-manager] *****
Wednesday 01 October 2025  12:29:54 +0000 (0:00:00.657)       0:00:26.535 ***** 
Wednesday 01 October 2025  12:29:54 +0000 (0:00:00.657)       0:00:26.534 ***** 
ok: [127.0.0.1] => {
    "kpt_live_init": {
        "changed": true,
        "cmd": "/usr/local/bin/kpt live init /tmp/kpt-pkg/distros/sandbox/cert-manager --context kubernetes-admin@kubernetes",
        "failed": false,
        "rc": 0,
        "stdout": "",
        "stdout_lines": []
    }
}

TASK [kpt : Apply package: distros/sandbox/cert-manager] ***********************
Wednesday 01 October 2025  12:29:54 +0000 (0:00:00.071)       0:00:26.607 ***** 
Wednesday 01 October 2025  12:29:54 +0000 (0:00:00.071)       0:00:26.606 ***** 
ok: [127.0.0.1]

TASK [kpt : Export job ids array] **********************************************
Wednesday 01 October 2025  12:29:55 +0000 (0:00:00.560)       0:00:27.167 ***** 
Wednesday 01 October 2025  12:29:55 +0000 (0:00:00.560)       0:00:27.166 ***** 
skipping: [127.0.0.1]

TASK [kpt : Print job ids] *****************************************************
Wednesday 01 October 2025  12:29:55 +0000 (0:00:00.042)       0:00:27.210 ***** 
Wednesday 01 October 2025  12:29:55 +0000 (0:00:00.042)       0:00:27.209 ***** 
ok: [127.0.0.1] => {
    "all_kpt_apply": []
}

TASK [kpt : Define working directory] ******************************************
Wednesday 01 October 2025  12:29:55 +0000 (0:00:00.075)       0:00:27.285 ***** 
Wednesday 01 October 2025  12:29:55 +0000 (0:00:00.075)       0:00:27.284 ***** 
ok: [127.0.0.1]

TASK [kpt : Create base directory if it does not exist: /tmp/kpt-pkg/distros/sandbox/gitea] ***
Wednesday 01 October 2025  12:29:55 +0000 (0:00:00.062)       0:00:27.348 ***** 
Wednesday 01 October 2025  12:29:55 +0000 (0:00:00.062)       0:00:27.347 ***** 
ok: [127.0.0.1]

TASK [kpt : Fetch package: distros/sandbox/gitea] ******************************
Wednesday 01 October 2025  12:29:55 +0000 (0:00:00.276)       0:00:27.624 ***** 
Wednesday 01 October 2025  12:29:55 +0000 (0:00:00.276)       0:00:27.623 ***** 
changed: [127.0.0.1]

TASK [kpt : Get package content information for distros/sandbox/gitea] *********
Wednesday 01 October 2025  12:29:56 +0000 (0:00:01.021)       0:00:28.645 ***** 
Wednesday 01 October 2025  12:29:56 +0000 (0:00:01.021)       0:00:28.645 ***** 
ok: [127.0.0.1]

TASK [kpt : Print package content information for distros/sandbox/gitea] *******
Wednesday 01 October 2025  12:29:56 +0000 (0:00:00.450)       0:00:29.096 ***** 
Wednesday 01 October 2025  12:29:56 +0000 (0:00:00.450)       0:00:29.095 ***** 
ok: [127.0.0.1] => {
    "kpt_pkg_tree.stdout_lines": [
        "Package \"gitea\"",
        "├── [Kptfile]  Kptfile gitea",
        "├── [deployment-memcached.yaml]  Deployment gitea/gitea-memcached",
        "├── [namespace.yaml]  Namespace gitea",
        "├── [package-context.yaml]  ConfigMap kptfile.kpt.dev",
        "├── [secret-git-user.yaml]  Secret gitea/git-user-secret",
        "├── [secret-gitea-init.yaml]  Secret gitea/gitea-init",
        "├── [secret-gitea-inline-config.yaml]  Secret gitea/gitea-inline-config",
        "├── [secret-gitea.yaml]  Secret gitea/gitea",
        "├── [secret-postgresql.yaml]  Secret gitea/gitea-postgresql",
        "├── [service-gitea.yaml]  Service gitea/gitea",
        "├── [service-memcached.yaml]  Service gitea/gitea-memcached",
        "├── [service-postgresql-hl.yaml]  Service gitea/gitea-postgresql-hl",
        "├── [service-postgresql.yaml]  Service gitea/gitea-postgresql",
        "├── [statefulset-gitea.yaml]  StatefulSet gitea/gitea",
        "└── [statefulset-postgres.yaml]  StatefulSet gitea/gitea-postgresql"
    ]
}

TASK [kpt : Render package: distros/sandbox/gitea] *****************************
Wednesday 01 October 2025  12:29:57 +0000 (0:00:00.062)       0:00:29.159 ***** 
Wednesday 01 October 2025  12:29:57 +0000 (0:00:00.062)       0:00:29.158 ***** 
ok: [127.0.0.1]

TASK [kpt : Recursively restore ownership of a directory package] **************
Wednesday 01 October 2025  12:29:57 +0000 (0:00:00.457)       0:00:29.616 ***** 
Wednesday 01 October 2025  12:29:57 +0000 (0:00:00.457)       0:00:29.616 ***** 
ok: [127.0.0.1]

TASK [kpt : Get package differences between local and upstream: distros/sandbox/gitea] ***
Wednesday 01 October 2025  12:29:57 +0000 (0:00:00.279)       0:00:29.896 ***** 
Wednesday 01 October 2025  12:29:57 +0000 (0:00:00.279)       0:00:29.895 ***** 
ok: [127.0.0.1]

TASK [kpt : Print package differences: distros/sandbox/gitea] ******************
Wednesday 01 October 2025  12:29:59 +0000 (0:00:01.586)       0:00:31.483 ***** 
Wednesday 01 October 2025  12:29:59 +0000 (0:00:01.586)       0:00:31.482 ***** 
ok: [127.0.0.1] => {
    "kpt_pkg_diff.stdout_lines": []
}

TASK [kpt : Check package has been initialized] ********************************
Wednesday 01 October 2025  12:29:59 +0000 (0:00:00.064)       0:00:31.547 ***** 
Wednesday 01 October 2025  12:29:59 +0000 (0:00:00.064)       0:00:31.546 ***** 
ok: [127.0.0.1]

TASK [kpt : Init package: distros/sandbox/gitea] *******************************
Wednesday 01 October 2025  12:29:59 +0000 (0:00:00.353)       0:00:31.900 ***** 
Wednesday 01 October 2025  12:29:59 +0000 (0:00:00.353)       0:00:31.899 ***** 
changed: [127.0.0.1]

TASK [kpt : Print package initialization for distros/sandbox/gitea] ************
Wednesday 01 October 2025  12:30:00 +0000 (0:00:00.438)       0:00:32.339 ***** 
Wednesday 01 October 2025  12:30:00 +0000 (0:00:00.438)       0:00:32.338 ***** 
ok: [127.0.0.1] => {
    "kpt_live_init": {
        "changed": true,
        "cmd": "/usr/local/bin/kpt live init /tmp/kpt-pkg/distros/sandbox/gitea --context kubernetes-admin@kubernetes",
        "failed": false,
        "rc": 0,
        "stdout": "",
        "stdout_lines": []
    }
}

TASK [kpt : Apply package: distros/sandbox/gitea] ******************************
Wednesday 01 October 2025  12:30:00 +0000 (0:00:00.063)       0:00:32.403 ***** 
Wednesday 01 October 2025  12:30:00 +0000 (0:00:00.063)       0:00:32.402 ***** 
ok: [127.0.0.1]

TASK [kpt : Export job ids array] **********************************************
Wednesday 01 October 2025  12:30:00 +0000 (0:00:00.350)       0:00:32.754 ***** 
Wednesday 01 October 2025  12:30:00 +0000 (0:00:00.350)       0:00:32.753 ***** 
skipping: [127.0.0.1]

TASK [kpt : Print job ids] *****************************************************
Wednesday 01 October 2025  12:30:00 +0000 (0:00:00.040)       0:00:32.794 ***** 
Wednesday 01 October 2025  12:30:00 +0000 (0:00:00.040)       0:00:32.793 ***** 
ok: [127.0.0.1] => {
    "all_kpt_apply": []
}

TASK [kpt : Define working directory] ******************************************
Wednesday 01 October 2025  12:30:00 +0000 (0:00:00.093)       0:00:32.887 ***** 
Wednesday 01 October 2025  12:30:00 +0000 (0:00:00.093)       0:00:32.887 ***** 
ok: [127.0.0.1]

TASK [kpt : Create base directory if it does not exist: /tmp/kpt-pkg/nephio/optional/resource-backend] ***
Wednesday 01 October 2025  12:30:00 +0000 (0:00:00.062)       0:00:32.950 ***** 
Wednesday 01 October 2025  12:30:00 +0000 (0:00:00.063)       0:00:32.950 ***** 
changed: [127.0.0.1]

TASK [kpt : Fetch package: nephio/optional/resource-backend] *******************
Wednesday 01 October 2025  12:30:01 +0000 (0:00:00.273)       0:00:33.224 ***** 
Wednesday 01 October 2025  12:30:01 +0000 (0:00:00.273)       0:00:33.223 ***** 
changed: [127.0.0.1]

TASK [kpt : Get package content information for nephio/optional/resource-backend] ***
Wednesday 01 October 2025  12:30:02 +0000 (0:00:01.229)       0:00:34.453 ***** 
Wednesday 01 October 2025  12:30:02 +0000 (0:00:01.229)       0:00:34.452 ***** 
ok: [127.0.0.1]

TASK [kpt : Print package content information for nephio/optional/resource-backend] ***
Wednesday 01 October 2025  12:30:02 +0000 (0:00:00.371)       0:00:34.825 ***** 
Wednesday 01 October 2025  12:30:02 +0000 (0:00:00.371)       0:00:34.824 ***** 
ok: [127.0.0.1] => {
    "kpt_pkg_tree.stdout_lines": [
        "Package \"resource-backend\"",
        "├── [Kptfile]  Kptfile resource-backend",
        "├── [namespace.yaml]  Namespace backend-system",
        "├── Package \"app\"",
        "│   ├── [Kptfile]  Kptfile resource-backend/app",
        "│   └── controller",
        "│       ├── [clusterrole-controller.yaml]  ClusterRole resource-backend-controller-controller-role",
        "│       ├── [clusterrolebinding-controller.yaml]  ClusterRoleBinding resource-backend-controller-controller-role-binding",
        "│       ├── [deployment-controller.yaml]  Deployment backend-system/resource-backend-controller",
        "│       ├── [role-leader-election.yaml]  Role backend-system/resource-backend-controller-leader-election-role",
        "│       ├── [rolebinding-leader-election.yaml]  RoleBinding backend-system/resource-backend-controller-leader-election-role-binding",
        "│       ├── [serviceaccount-controller.yaml]  ServiceAccount backend-system/resource-backend-controller",
        "│       └── grpc",
        "│           └── [service-grpc.yaml]  Service backend-system/resource-backend-controller-grpc-svc",
        "└── Package \"crd\"",
        "    ├── [Kptfile]  Kptfile crd",
        "    └── bases",
        "        ├── [inv.nephio.org_endpoints.yaml]  CustomResourceDefinition endpoints.inv.nephio.org",
        "        ├── [inv.nephio.org_links.yaml]  CustomResourceDefinition links.inv.nephio.org",
        "        ├── [inv.nephio.org_nodes.yaml]  CustomResourceDefinition nodes.inv.nephio.org",
        "        ├── [inv.nephio.org_targets.yaml]  CustomResourceDefinition targets.inv.nephio.org",
        "        ├── [ipam.resource.nephio.org_ipclaims.yaml]  CustomResourceDefinition ipclaims.ipam.resource.nephio.org",
        "        ├── [ipam.resource.nephio.org_ipprefixes.yaml]  CustomResourceDefinition ipprefixes.ipam.resource.nephio.org",
        "        ├── [ipam.resource.nephio.org_networkinstances.yaml]  CustomResourceDefinition networkinstances.ipam.resource.nephio.org",
        "        ├── [topo.nephio.org_rawtopologies.yaml]  CustomResourceDefinition rawtopologies.topo.nephio.org",
        "        ├── [vlan.resource.nephio.org_vlanclaims.yaml]  CustomResourceDefinition vlanclaims.vlan.resource.nephio.org",
        "        ├── [vlan.resource.nephio.org_vlanindices.yaml]  CustomResourceDefinition vlanindices.vlan.resource.nephio.org",
        "        └── [vlan.resource.nephio.org_vlans.yaml]  CustomResourceDefinition vlans.vlan.resource.nephio.org"
    ]
}

TASK [kpt : Render package: nephio/optional/resource-backend] ******************
Wednesday 01 October 2025  12:30:02 +0000 (0:00:00.065)       0:00:34.891 ***** 
Wednesday 01 October 2025  12:30:02 +0000 (0:00:00.065)       0:00:34.890 ***** 
ok: [127.0.0.1]

TASK [kpt : Recursively restore ownership of a directory package] **************
Wednesday 01 October 2025  12:30:03 +0000 (0:00:00.406)       0:00:35.297 ***** 
Wednesday 01 October 2025  12:30:03 +0000 (0:00:00.406)       0:00:35.296 ***** 
ok: [127.0.0.1]

TASK [kpt : Get package differences between local and upstream: nephio/optional/resource-backend] ***
Wednesday 01 October 2025  12:30:03 +0000 (0:00:00.309)       0:00:35.606 ***** 
Wednesday 01 October 2025  12:30:03 +0000 (0:00:00.309)       0:00:35.605 ***** 
ok: [127.0.0.1]

TASK [kpt : Print package differences: nephio/optional/resource-backend] *******
Wednesday 01 October 2025  12:30:05 +0000 (0:00:01.778)       0:00:37.384 ***** 
Wednesday 01 October 2025  12:30:05 +0000 (0:00:01.778)       0:00:37.383 ***** 
ok: [127.0.0.1] => {
    "kpt_pkg_diff.stdout_lines": [
        "Common subdirectories: /tmp/kpt-141840741/local-main/app and /tmp/kpt-141840741/target-main/app",
        "Common subdirectories: /tmp/kpt-141840741/local-main/crd and /tmp/kpt-141840741/target-main/crd"
    ]
}

TASK [kpt : Check package has been initialized] ********************************
Wednesday 01 October 2025  12:30:05 +0000 (0:00:00.066)       0:00:37.450 ***** 
Wednesday 01 October 2025  12:30:05 +0000 (0:00:00.066)       0:00:37.450 ***** 
ok: [127.0.0.1]

TASK [kpt : Init package: nephio/optional/resource-backend] ********************
Wednesday 01 October 2025  12:30:05 +0000 (0:00:00.294)       0:00:37.745 ***** 
Wednesday 01 October 2025  12:30:05 +0000 (0:00:00.293)       0:00:37.744 ***** 
changed: [127.0.0.1]

TASK [kpt : Print package initialization for nephio/optional/resource-backend] ***
Wednesday 01 October 2025  12:30:06 +0000 (0:00:00.423)       0:00:38.168 ***** 
Wednesday 01 October 2025  12:30:06 +0000 (0:00:00.423)       0:00:38.168 ***** 
ok: [127.0.0.1] => {
    "kpt_live_init": {
        "changed": true,
        "cmd": "/usr/local/bin/kpt live init /tmp/kpt-pkg/nephio/optional/resource-backend --context kubernetes-admin@kubernetes",
        "failed": false,
        "rc": 0,
        "stdout": "",
        "stdout_lines": []
    }
}

TASK [kpt : Apply package: nephio/optional/resource-backend] *******************
Wednesday 01 October 2025  12:30:06 +0000 (0:00:00.084)       0:00:38.253 ***** 
Wednesday 01 October 2025  12:30:06 +0000 (0:00:00.084)       0:00:38.252 ***** 
ok: [127.0.0.1]

TASK [kpt : Export job ids array] **********************************************
Wednesday 01 October 2025  12:30:06 +0000 (0:00:00.357)       0:00:38.611 ***** 
Wednesday 01 October 2025  12:30:06 +0000 (0:00:00.357)       0:00:38.610 ***** 
skipping: [127.0.0.1]

TASK [kpt : Print job ids] *****************************************************
Wednesday 01 October 2025  12:30:06 +0000 (0:00:00.044)       0:00:38.656 ***** 
Wednesday 01 October 2025  12:30:06 +0000 (0:00:00.044)       0:00:38.655 ***** 
ok: [127.0.0.1] => {
    "all_kpt_apply": []
}

TASK [kpt : Define working directory] ******************************************
Wednesday 01 October 2025  12:30:06 +0000 (0:00:00.085)       0:00:38.741 ***** 
Wednesday 01 October 2025  12:30:06 +0000 (0:00:00.085)       0:00:38.741 ***** 
ok: [127.0.0.1]

TASK [kpt : Create base directory if it does not exist: /tmp/kpt-pkg/distros/sandbox/metallb] ***
Wednesday 01 October 2025  12:30:06 +0000 (0:00:00.052)       0:00:38.793 ***** 
Wednesday 01 October 2025  12:30:06 +0000 (0:00:00.052)       0:00:38.793 ***** 
ok: [127.0.0.1]

TASK [kpt : Fetch package: distros/sandbox/metallb] ****************************
Wednesday 01 October 2025  12:30:07 +0000 (0:00:00.382)       0:00:39.176 ***** 
Wednesday 01 October 2025  12:30:07 +0000 (0:00:00.382)       0:00:39.175 ***** 
changed: [127.0.0.1]

TASK [kpt : Get package content information for distros/sandbox/metallb] *******
Wednesday 01 October 2025  12:30:08 +0000 (0:00:01.174)       0:00:40.350 ***** 
Wednesday 01 October 2025  12:30:08 +0000 (0:00:01.174)       0:00:40.349 ***** 
ok: [127.0.0.1]

TASK [kpt : Print package content information for distros/sandbox/metallb] *****
Wednesday 01 October 2025  12:30:08 +0000 (0:00:00.428)       0:00:40.779 ***** 
Wednesday 01 October 2025  12:30:08 +0000 (0:00:00.428)       0:00:40.778 ***** 
ok: [127.0.0.1] => {
    "kpt_pkg_tree.stdout_lines": [
        "Package \"metallb\"",
        "├── [Kptfile]  Kptfile metallb",
        "├── [metallb-native.yaml]  CustomResourceDefinition addresspools.metallb.io",
        "├── [metallb-native.yaml]  CustomResourceDefinition bfdprofiles.metallb.io",
        "├── [metallb-native.yaml]  CustomResourceDefinition bgpadvertisements.metallb.io",
        "├── [metallb-native.yaml]  CustomResourceDefinition bgppeers.metallb.io",
        "├── [metallb-native.yaml]  CustomResourceDefinition communities.metallb.io",
        "├── [metallb-native.yaml]  CustomResourceDefinition ipaddresspools.metallb.io",
        "├── [metallb-native.yaml]  CustomResourceDefinition l2advertisements.metallb.io",
        "├── [metallb-native.yaml]  Namespace metallb-system",
        "├── [metallb-native.yaml]  ClusterRole metallb-system:controller",
        "├── [metallb-native.yaml]  ClusterRoleBinding metallb-system:controller",
        "├── [metallb-native.yaml]  ClusterRole metallb-system:speaker",
        "├── [metallb-native.yaml]  ClusterRoleBinding metallb-system:speaker",
        "├── [metallb-native.yaml]  ValidatingWebhookConfiguration metallb-webhook-configuration",
        "├── [metallb-native.yaml]  Deployment metallb-system/controller",
        "├── [metallb-native.yaml]  Role metallb-system/controller",
        "├── [metallb-native.yaml]  RoleBinding metallb-system/controller",
        "├── [metallb-native.yaml]  ServiceAccount metallb-system/controller",
        "├── [metallb-native.yaml]  Role metallb-system/pod-lister",
        "├── [metallb-native.yaml]  RoleBinding metallb-system/pod-lister",
        "├── [metallb-native.yaml]  DaemonSet metallb-system/speaker",
        "├── [metallb-native.yaml]  ServiceAccount metallb-system/speaker",
        "├── [metallb-native.yaml]  Secret metallb-system/webhook-server-cert",
        "├── [metallb-native.yaml]  Service metallb-system/webhook-service",
        "└── [package-context.yaml]  ConfigMap kptfile.kpt.dev"
    ]
}

TASK [kpt : Render package: distros/sandbox/metallb] ***************************
Wednesday 01 October 2025  12:30:08 +0000 (0:00:00.065)       0:00:40.844 ***** 
Wednesday 01 October 2025  12:30:08 +0000 (0:00:00.065)       0:00:40.843 ***** 
ok: [127.0.0.1]

TASK [kpt : Recursively restore ownership of a directory package] **************
Wednesday 01 October 2025  12:30:09 +0000 (0:00:00.369)       0:00:41.213 ***** 
Wednesday 01 October 2025  12:30:09 +0000 (0:00:00.369)       0:00:41.213 ***** 
ok: [127.0.0.1]

TASK [kpt : Get package differences between local and upstream: distros/sandbox/metallb] ***
Wednesday 01 October 2025  12:30:09 +0000 (0:00:00.295)       0:00:41.509 ***** 
Wednesday 01 October 2025  12:30:09 +0000 (0:00:00.295)       0:00:41.508 ***** 
ok: [127.0.0.1]

TASK [kpt : Print package differences: distros/sandbox/metallb] ****************
Wednesday 01 October 2025  12:30:13 +0000 (0:00:04.053)       0:00:45.563 ***** 
Wednesday 01 October 2025  12:30:13 +0000 (0:00:04.053)       0:00:45.562 ***** 
ok: [127.0.0.1] => {
    "kpt_pkg_diff.stdout_lines": []
}

TASK [kpt : Check package has been initialized] ********************************
Wednesday 01 October 2025  12:30:13 +0000 (0:00:00.056)       0:00:45.619 ***** 
Wednesday 01 October 2025  12:30:13 +0000 (0:00:00.056)       0:00:45.618 ***** 
ok: [127.0.0.1]

TASK [kpt : Init package: distros/sandbox/metallb] *****************************
Wednesday 01 October 2025  12:30:13 +0000 (0:00:00.269)       0:00:45.888 ***** 
Wednesday 01 October 2025  12:30:13 +0000 (0:00:00.269)       0:00:45.887 ***** 
changed: [127.0.0.1]

TASK [kpt : Print package initialization for distros/sandbox/metallb] **********
Wednesday 01 October 2025  12:30:14 +0000 (0:00:00.486)       0:00:46.374 ***** 
Wednesday 01 October 2025  12:30:14 +0000 (0:00:00.486)       0:00:46.373 ***** 
ok: [127.0.0.1] => {
    "kpt_live_init": {
        "changed": true,
        "cmd": "/usr/local/bin/kpt live init /tmp/kpt-pkg/distros/sandbox/metallb --context kubernetes-admin@kubernetes",
        "failed": false,
        "rc": 0,
        "stdout": "",
        "stdout_lines": []
    }
}

TASK [kpt : Apply package: distros/sandbox/metallb] ****************************
Wednesday 01 October 2025  12:30:14 +0000 (0:00:00.072)       0:00:46.447 ***** 
Wednesday 01 October 2025  12:30:14 +0000 (0:00:00.072)       0:00:46.446 ***** 
ASYNC POLL on 127.0.0.1: jid=j369942771893.98292 started=1 finished=0
ASYNC POLL on 127.0.0.1: jid=j369942771893.98292 started=1 finished=0
ASYNC POLL on 127.0.0.1: jid=j369942771893.98292 started=1 finished=0
ASYNC POLL on 127.0.0.1: jid=j369942771893.98292 started=1 finished=0
ASYNC POLL on 127.0.0.1: jid=j369942771893.98292 started=1 finished=0
ASYNC POLL on 127.0.0.1: jid=j369942771893.98292 started=1 finished=0
ASYNC POLL on 127.0.0.1: jid=j369942771893.98292 started=1 finished=0
ASYNC POLL on 127.0.0.1: jid=j369942771893.98292 started=1 finished=0
ASYNC POLL on 127.0.0.1: jid=j369942771893.98292 started=1 finished=0
ASYNC POLL on 127.0.0.1: jid=j369942771893.98292 started=1 finished=0
ASYNC POLL on 127.0.0.1: jid=j369942771893.98292 started=1 finished=0
ASYNC POLL on 127.0.0.1: jid=j369942771893.98292 started=1 finished=0
ASYNC OK on 127.0.0.1: jid=j369942771893.98292
ok: [127.0.0.1]

TASK [kpt : Export job ids array] **********************************************
Wednesday 01 October 2025  12:31:22 +0000 (0:01:08.587)       0:01:55.034 ***** 
Wednesday 01 October 2025  12:31:22 +0000 (0:01:08.587)       0:01:55.033 ***** 
skipping: [127.0.0.1]

TASK [kpt : Print job ids] *****************************************************
Wednesday 01 October 2025  12:31:22 +0000 (0:00:00.046)       0:01:55.081 ***** 
Wednesday 01 October 2025  12:31:22 +0000 (0:00:00.046)       0:01:55.080 ***** 
ok: [127.0.0.1] => {
    "all_kpt_apply": []
}

TASK [kpt : Define working directory] ******************************************
Wednesday 01 October 2025  12:31:23 +0000 (0:00:00.076)       0:01:55.158 ***** 
Wednesday 01 October 2025  12:31:23 +0000 (0:00:00.076)       0:01:55.157 ***** 
ok: [127.0.0.1]

TASK [kpt : Create base directory if it does not exist: /tmp/kpt-pkg/distros/sandbox/metallb-sandbox-config] ***
Wednesday 01 October 2025  12:31:23 +0000 (0:00:00.066)       0:01:55.224 ***** 
Wednesday 01 October 2025  12:31:23 +0000 (0:00:00.066)       0:01:55.224 ***** 
ok: [127.0.0.1]

TASK [kpt : Fetch package: distros/sandbox/metallb-sandbox-config] *************
Wednesday 01 October 2025  12:31:23 +0000 (0:00:00.288)       0:01:55.513 ***** 
Wednesday 01 October 2025  12:31:23 +0000 (0:00:00.288)       0:01:55.512 ***** 
changed: [127.0.0.1]

TASK [kpt : Get package content information for distros/sandbox/metallb-sandbox-config] ***
Wednesday 01 October 2025  12:31:25 +0000 (0:00:02.279)       0:01:57.793 ***** 
Wednesday 01 October 2025  12:31:25 +0000 (0:00:02.279)       0:01:57.792 ***** 
ok: [127.0.0.1]

TASK [kpt : Print package content information for distros/sandbox/metallb-sandbox-config] ***
Wednesday 01 October 2025  12:31:26 +0000 (0:00:00.369)       0:01:58.162 ***** 
Wednesday 01 October 2025  12:31:26 +0000 (0:00:00.369)       0:01:58.161 ***** 
ok: [127.0.0.1] => {
    "kpt_pkg_tree.stdout_lines": [
        "Package \"metallb-sandbox-config\"",
        "├── [Kptfile]  Kptfile metallb-sandbox-config",
        "├── [ipaddresspool.yaml]  IPAddressPool metallb-system/nephio",
        "├── [l2advertisement.yaml]  L2Advertisement metallb-system/nephio",
        "└── [package-context.yaml]  ConfigMap kptfile.kpt.dev"
    ]
}

TASK [kpt : Render package: distros/sandbox/metallb-sandbox-config] ************
Wednesday 01 October 2025  12:31:26 +0000 (0:00:00.061)       0:01:58.223 ***** 
Wednesday 01 October 2025  12:31:26 +0000 (0:00:00.061)       0:01:58.222 ***** 
ok: [127.0.0.1]

TASK [kpt : Recursively restore ownership of a directory package] **************
Wednesday 01 October 2025  12:31:26 +0000 (0:00:00.328)       0:01:58.552 ***** 
Wednesday 01 October 2025  12:31:26 +0000 (0:00:00.329)       0:01:58.552 ***** 
ok: [127.0.0.1]

TASK [kpt : Get package differences between local and upstream: distros/sandbox/metallb-sandbox-config] ***
Wednesday 01 October 2025  12:31:26 +0000 (0:00:00.323)       0:01:58.876 ***** 
Wednesday 01 October 2025  12:31:26 +0000 (0:00:00.323)       0:01:58.875 ***** 
ok: [127.0.0.1]

TASK [kpt : Print package differences: distros/sandbox/metallb-sandbox-config] ***
Wednesday 01 October 2025  12:31:28 +0000 (0:00:01.485)       0:02:00.362 ***** 
Wednesday 01 October 2025  12:31:28 +0000 (0:00:01.485)       0:02:00.361 ***** 
ok: [127.0.0.1] => {
    "kpt_pkg_diff.stdout_lines": []
}

TASK [kpt : Check package has been initialized] ********************************
Wednesday 01 October 2025  12:31:28 +0000 (0:00:00.063)       0:02:00.425 ***** 
Wednesday 01 October 2025  12:31:28 +0000 (0:00:00.063)       0:02:00.424 ***** 
ok: [127.0.0.1]

TASK [kpt : Init package: distros/sandbox/metallb-sandbox-config] **************
Wednesday 01 October 2025  12:31:28 +0000 (0:00:00.310)       0:02:00.736 ***** 
Wednesday 01 October 2025  12:31:28 +0000 (0:00:00.310)       0:02:00.735 ***** 
changed: [127.0.0.1]

TASK [kpt : Print package initialization for distros/sandbox/metallb-sandbox-config] ***
Wednesday 01 October 2025  12:31:28 +0000 (0:00:00.332)       0:02:01.068 ***** 
Wednesday 01 October 2025  12:31:28 +0000 (0:00:00.332)       0:02:01.067 ***** 
ok: [127.0.0.1] => {
    "kpt_live_init": {
        "changed": true,
        "cmd": "/usr/local/bin/kpt live init /tmp/kpt-pkg/distros/sandbox/metallb-sandbox-config --context kubernetes-admin@kubernetes",
        "failed": false,
        "rc": 0,
        "stdout": "",
        "stdout_lines": []
    }
}

TASK [kpt : Apply package: distros/sandbox/metallb-sandbox-config] *************
Wednesday 01 October 2025  12:31:28 +0000 (0:00:00.063)       0:02:01.132 ***** 
Wednesday 01 October 2025  12:31:28 +0000 (0:00:00.063)       0:02:01.131 ***** 
ok: [127.0.0.1]

TASK [kpt : Export job ids array] **********************************************
Wednesday 01 October 2025  12:31:29 +0000 (0:00:00.268)       0:02:01.400 ***** 
Wednesday 01 October 2025  12:31:29 +0000 (0:00:00.268)       0:02:01.400 ***** 
skipping: [127.0.0.1]

TASK [kpt : Print job ids] *****************************************************
Wednesday 01 October 2025  12:31:29 +0000 (0:00:00.038)       0:02:01.439 ***** 
Wednesday 01 October 2025  12:31:29 +0000 (0:00:00.038)       0:02:01.438 ***** 
ok: [127.0.0.1] => {
    "all_kpt_apply": []
}

TASK [kpt : Define working directory] ******************************************
Wednesday 01 October 2025  12:31:29 +0000 (0:00:00.078)       0:02:01.517 ***** 
Wednesday 01 October 2025  12:31:29 +0000 (0:00:00.078)       0:02:01.516 ***** 
ok: [127.0.0.1]

TASK [kpt : Create base directory if it does not exist: /tmp/kpt-pkg/infra/capi/cluster-capi] ***
Wednesday 01 October 2025  12:31:29 +0000 (0:00:00.065)       0:02:01.582 ***** 
Wednesday 01 October 2025  12:31:29 +0000 (0:00:00.065)       0:02:01.581 ***** 
changed: [127.0.0.1]

TASK [kpt : Fetch package: infra/capi/cluster-capi] ****************************
Wednesday 01 October 2025  12:31:29 +0000 (0:00:00.266)       0:02:01.848 ***** 
Wednesday 01 October 2025  12:31:29 +0000 (0:00:00.266)       0:02:01.848 ***** 
changed: [127.0.0.1]

TASK [kpt : Get package content information for infra/capi/cluster-capi] *******
Wednesday 01 October 2025  12:31:32 +0000 (0:00:02.612)       0:02:04.461 ***** 
Wednesday 01 October 2025  12:31:32 +0000 (0:00:02.612)       0:02:04.460 ***** 
ok: [127.0.0.1]

TASK [kpt : Print package content information for infra/capi/cluster-capi] *****
Wednesday 01 October 2025  12:31:32 +0000 (0:00:00.493)       0:02:04.954 ***** 
Wednesday 01 October 2025  12:31:32 +0000 (0:00:00.493)       0:02:04.954 ***** 
ok: [127.0.0.1] => {
    "kpt_pkg_tree.stdout_lines": [
        "Package \"cluster-capi\"",
        "├── [Kptfile]  Kptfile cluster-capi",
        "├── [cluster-api-bootstrap.yaml]  ClusterRole capi-kubeadm-bootstrap-manager-role",
        "├── [cluster-api-bootstrap.yaml]  ClusterRoleBinding capi-kubeadm-bootstrap-manager-rolebinding",
        "├── [cluster-api-bootstrap.yaml]  MutatingWebhookConfiguration capi-kubeadm-bootstrap-mutating-webhook-configuration",
        "├── [cluster-api-bootstrap.yaml]  Namespace capi-kubeadm-bootstrap-system",
        "├── [cluster-api-bootstrap.yaml]  ValidatingWebhookConfiguration capi-kubeadm-bootstrap-validating-webhook-configuration",
        "├── [cluster-api-bootstrap.yaml]  CustomResourceDefinition kubeadmconfigs.bootstrap.cluster.x-k8s.io",
        "├── [cluster-api-bootstrap.yaml]  CustomResourceDefinition kubeadmconfigtemplates.bootstrap.cluster.x-k8s.io",
        "├── [cluster-api-bootstrap.yaml]  Deployment capi-kubeadm-bootstrap-system/capi-kubeadm-bootstrap-controller-manager",
        "├── [cluster-api-bootstrap.yaml]  Role capi-kubeadm-bootstrap-system/capi-kubeadm-bootstrap-leader-election-role",
        "├── [cluster-api-bootstrap.yaml]  RoleBinding capi-kubeadm-bootstrap-system/capi-kubeadm-bootstrap-leader-election-rolebinding",
        "├── [cluster-api-bootstrap.yaml]  ServiceAccount capi-kubeadm-bootstrap-system/capi-kubeadm-bootstrap-manager",
        "├── [cluster-api-bootstrap.yaml]  Issuer capi-kubeadm-bootstrap-system/capi-kubeadm-bootstrap-selfsigned-issuer",
        "├── [cluster-api-bootstrap.yaml]  Certificate capi-kubeadm-bootstrap-system/capi-kubeadm-bootstrap-serving-cert",
        "├── [cluster-api-bootstrap.yaml]  Service capi-kubeadm-bootstrap-system/capi-kubeadm-bootstrap-webhook-service",
        "├── [cluster-api-control-plane.yaml]  ClusterRole capi-kubeadm-control-plane-aggregated-manager-role",
        "├── [cluster-api-control-plane.yaml]  ClusterRole capi-kubeadm-control-plane-manager-role",
        "├── [cluster-api-control-plane.yaml]  ClusterRoleBinding capi-kubeadm-control-plane-manager-rolebinding",
        "├── [cluster-api-control-plane.yaml]  MutatingWebhookConfiguration capi-kubeadm-control-plane-mutating-webhook-configuration",
        "├── [cluster-api-control-plane.yaml]  Namespace capi-kubeadm-control-plane-system",
        "├── [cluster-api-control-plane.yaml]  ValidatingWebhookConfiguration capi-kubeadm-control-plane-validating-webhook-configuration",
        "├── [cluster-api-control-plane.yaml]  CustomResourceDefinition kubeadmcontrolplanes.controlplane.cluster.x-k8s.io",
        "├── [cluster-api-control-plane.yaml]  CustomResourceDefinition kubeadmcontrolplanetemplates.controlplane.cluster.x-k8s.io",
        "├── [cluster-api-control-plane.yaml]  Deployment capi-kubeadm-control-plane-system/capi-kubeadm-control-plane-controller-manager",
        "├── [cluster-api-control-plane.yaml]  Role capi-kubeadm-control-plane-system/capi-kubeadm-control-plane-leader-election-role",
        "├── [cluster-api-control-plane.yaml]  RoleBinding capi-kubeadm-control-plane-system/capi-kubeadm-control-plane-leader-election-rolebinding",
        "├── [cluster-api-control-plane.yaml]  ServiceAccount capi-kubeadm-control-plane-system/capi-kubeadm-control-plane-manager",
        "├── [cluster-api-control-plane.yaml]  Issuer capi-kubeadm-control-plane-system/capi-kubeadm-control-plane-selfsigned-issuer",
        "├── [cluster-api-control-plane.yaml]  Certificate capi-kubeadm-control-plane-system/capi-kubeadm-control-plane-serving-cert",
        "├── [cluster-api-control-plane.yaml]  Service capi-kubeadm-control-plane-system/capi-kubeadm-control-plane-webhook-service",
        "├── [cluster-api-core.yaml]  ClusterRole capi-aggregated-manager-role",
        "├── [cluster-api-core.yaml]  ClusterRole capi-manager-role",
        "├── [cluster-api-core.yaml]  ClusterRoleBinding capi-manager-rolebinding",
        "├── [cluster-api-core.yaml]  MutatingWebhookConfiguration capi-mutating-webhook-configuration",
        "├── [cluster-api-core.yaml]  Namespace capi-system",
        "├── [cluster-api-core.yaml]  ValidatingWebhookConfiguration capi-validating-webhook-configuration",
        "├── [cluster-api-core.yaml]  CustomResourceDefinition clusterclasses.cluster.x-k8s.io",
        "├── [cluster-api-core.yaml]  CustomResourceDefinition clusterresourcesetbindings.addons.cluster.x-k8s.io",
        "├── [cluster-api-core.yaml]  CustomResourceDefinition clusterresourcesets.addons.cluster.x-k8s.io",
        "├── [cluster-api-core.yaml]  CustomResourceDefinition clusters.cluster.x-k8s.io",
        "├── [cluster-api-core.yaml]  CustomResourceDefinition extensionconfigs.runtime.cluster.x-k8s.io",
        "├── [cluster-api-core.yaml]  CustomResourceDefinition ipaddressclaims.ipam.cluster.x-k8s.io",
        "├── [cluster-api-core.yaml]  CustomResourceDefinition ipaddresses.ipam.cluster.x-k8s.io",
        "├── [cluster-api-core.yaml]  CustomResourceDefinition machinedeployments.cluster.x-k8s.io",
        "├── [cluster-api-core.yaml]  CustomResourceDefinition machinehealthchecks.cluster.x-k8s.io",
        "├── [cluster-api-core.yaml]  CustomResourceDefinition machinepools.cluster.x-k8s.io",
        "├── [cluster-api-core.yaml]  CustomResourceDefinition machines.cluster.x-k8s.io",
        "├── [cluster-api-core.yaml]  CustomResourceDefinition machinesets.cluster.x-k8s.io",
        "├── [cluster-api-core.yaml]  Deployment capi-system/capi-controller-manager",
        "├── [cluster-api-core.yaml]  Role capi-system/capi-leader-election-role",
        "├── [cluster-api-core.yaml]  RoleBinding capi-system/capi-leader-election-rolebinding",
        "├── [cluster-api-core.yaml]  ServiceAccount capi-system/capi-manager",
        "├── [cluster-api-core.yaml]  Issuer capi-system/capi-selfsigned-issuer",
        "├── [cluster-api-core.yaml]  Certificate capi-system/capi-serving-cert",
        "├── [cluster-api-core.yaml]  Service capi-system/capi-webhook-service",
        "└── [package-context.yaml]  ConfigMap kptfile.kpt.dev"
    ]
}

TASK [kpt : Render package: infra/capi/cluster-capi] ***************************
Wednesday 01 October 2025  12:31:32 +0000 (0:00:00.072)       0:02:05.027 ***** 
Wednesday 01 October 2025  12:31:32 +0000 (0:00:00.072)       0:02:05.026 ***** 
ok: [127.0.0.1]

TASK [kpt : Recursively restore ownership of a directory package] **************
Wednesday 01 October 2025  12:31:33 +0000 (0:00:00.746)       0:02:05.774 ***** 
Wednesday 01 October 2025  12:31:33 +0000 (0:00:00.746)       0:02:05.773 ***** 
ok: [127.0.0.1]

TASK [kpt : Get package differences between local and upstream: infra/capi/cluster-capi] ***
Wednesday 01 October 2025  12:31:33 +0000 (0:00:00.302)       0:02:06.076 ***** 
Wednesday 01 October 2025  12:31:33 +0000 (0:00:00.302)       0:02:06.075 ***** 
ok: [127.0.0.1]

TASK [kpt : Print package differences: infra/capi/cluster-capi] ****************
Wednesday 01 October 2025  12:31:36 +0000 (0:00:02.293)       0:02:08.370 ***** 
Wednesday 01 October 2025  12:31:36 +0000 (0:00:02.294)       0:02:08.369 ***** 
ok: [127.0.0.1] => {
    "kpt_pkg_diff.stdout_lines": []
}

TASK [kpt : Check package has been initialized] ********************************
Wednesday 01 October 2025  12:31:36 +0000 (0:00:00.064)       0:02:08.435 ***** 
Wednesday 01 October 2025  12:31:36 +0000 (0:00:00.064)       0:02:08.434 ***** 
ok: [127.0.0.1]

TASK [kpt : Init package: infra/capi/cluster-capi] *****************************
Wednesday 01 October 2025  12:31:36 +0000 (0:00:00.320)       0:02:08.755 ***** 
Wednesday 01 October 2025  12:31:36 +0000 (0:00:00.320)       0:02:08.754 ***** 
changed: [127.0.0.1]

TASK [kpt : Print package initialization for infra/capi/cluster-capi] **********
Wednesday 01 October 2025  12:31:37 +0000 (0:00:00.869)       0:02:09.624 ***** 
Wednesday 01 October 2025  12:31:37 +0000 (0:00:00.869)       0:02:09.623 ***** 
ok: [127.0.0.1] => {
    "kpt_live_init": {
        "changed": true,
        "cmd": "/usr/local/bin/kpt live init /tmp/kpt-pkg/infra/capi/cluster-capi --context kubernetes-admin@kubernetes",
        "failed": false,
        "rc": 0,
        "stdout": "",
        "stdout_lines": []
    }
}

TASK [kpt : Apply package: infra/capi/cluster-capi] ****************************
Wednesday 01 October 2025  12:31:37 +0000 (0:00:00.069)       0:02:09.694 ***** 
Wednesday 01 October 2025  12:31:37 +0000 (0:00:00.069)       0:02:09.693 ***** 
ASYNC POLL on 127.0.0.1: jid=j105352651339.101744 started=1 finished=0
ASYNC POLL on 127.0.0.1: jid=j105352651339.101744 started=1 finished=0
ASYNC POLL on 127.0.0.1: jid=j105352651339.101744 started=1 finished=0
ASYNC OK on 127.0.0.1: jid=j105352651339.101744
ok: [127.0.0.1]

TASK [kpt : Export job ids array] **********************************************
Wednesday 01 October 2025  12:31:59 +0000 (0:00:21.528)       0:02:31.222 ***** 
Wednesday 01 October 2025  12:31:59 +0000 (0:00:21.528)       0:02:31.221 ***** 
skipping: [127.0.0.1]

TASK [kpt : Print job ids] *****************************************************
Wednesday 01 October 2025  12:31:59 +0000 (0:00:00.046)       0:02:31.268 ***** 
Wednesday 01 October 2025  12:31:59 +0000 (0:00:00.046)       0:02:31.267 ***** 
ok: [127.0.0.1] => {
    "all_kpt_apply": []
}

TASK [kpt : Define working directory] ******************************************
Wednesday 01 October 2025  12:31:59 +0000 (0:00:00.086)       0:02:31.354 ***** 
Wednesday 01 October 2025  12:31:59 +0000 (0:00:00.086)       0:02:31.353 ***** 
ok: [127.0.0.1]

TASK [kpt : Create base directory if it does not exist: /tmp/kpt-pkg/infra/capi/cluster-capi-infrastructure-docker] ***
Wednesday 01 October 2025  12:31:59 +0000 (0:00:00.055)       0:02:31.410 ***** 
Wednesday 01 October 2025  12:31:59 +0000 (0:00:00.055)       0:02:31.409 ***** 
ok: [127.0.0.1]

TASK [kpt : Fetch package: infra/capi/cluster-capi-infrastructure-docker] ******
Wednesday 01 October 2025  12:31:59 +0000 (0:00:00.376)       0:02:31.786 ***** 
Wednesday 01 October 2025  12:31:59 +0000 (0:00:00.376)       0:02:31.785 ***** 
changed: [127.0.0.1]

TASK [kpt : Get package content information for infra/capi/cluster-capi-infrastructure-docker] ***
Wednesday 01 October 2025  12:32:00 +0000 (0:00:01.114)       0:02:32.901 ***** 
Wednesday 01 October 2025  12:32:00 +0000 (0:00:01.114)       0:02:32.900 ***** 
ok: [127.0.0.1]

TASK [kpt : Print package content information for infra/capi/cluster-capi-infrastructure-docker] ***
Wednesday 01 October 2025  12:32:01 +0000 (0:00:00.402)       0:02:33.303 ***** 
Wednesday 01 October 2025  12:32:01 +0000 (0:00:00.402)       0:02:33.302 ***** 
ok: [127.0.0.1] => {
    "kpt_pkg_tree.stdout_lines": [
        "Package \"cluster-capi-infrastructure-docker\"",
        "├── [Kptfile]  Kptfile cluster-capi-infrastructure-docker",
        "├── [cluster-api-infrastructure-docker.yaml]  ClusterRole capd-manager-role",
        "├── [cluster-api-infrastructure-docker.yaml]  ClusterRoleBinding capd-manager-rolebinding",
        "├── [cluster-api-infrastructure-docker.yaml]  MutatingWebhookConfiguration capd-mutating-webhook-configuration",
        "├── [cluster-api-infrastructure-docker.yaml]  Namespace capd-system",
        "├── [cluster-api-infrastructure-docker.yaml]  ValidatingWebhookConfiguration capd-validating-webhook-configuration",
        "├── [cluster-api-infrastructure-docker.yaml]  CustomResourceDefinition dockerclusters.infrastructure.cluster.x-k8s.io",
        "├── [cluster-api-infrastructure-docker.yaml]  CustomResourceDefinition dockerclustertemplates.infrastructure.cluster.x-k8s.io",
        "├── [cluster-api-infrastructure-docker.yaml]  CustomResourceDefinition dockermachinepools.infrastructure.cluster.x-k8s.io",
        "├── [cluster-api-infrastructure-docker.yaml]  CustomResourceDefinition dockermachinepooltemplates.infrastructure.cluster.x-k8s.io",
        "├── [cluster-api-infrastructure-docker.yaml]  CustomResourceDefinition dockermachines.infrastructure.cluster.x-k8s.io",
        "├── [cluster-api-infrastructure-docker.yaml]  CustomResourceDefinition dockermachinetemplates.infrastructure.cluster.x-k8s.io",
        "├── [cluster-api-infrastructure-docker.yaml]  Deployment capd-system/capd-controller-manager",
        "├── [cluster-api-infrastructure-docker.yaml]  Role capd-system/capd-leader-election-role",
        "├── [cluster-api-infrastructure-docker.yaml]  RoleBinding capd-system/capd-leader-election-rolebinding",
        "├── [cluster-api-infrastructure-docker.yaml]  ServiceAccount capd-system/capd-manager",
        "├── [cluster-api-infrastructure-docker.yaml]  Issuer capd-system/capd-selfsigned-issuer",
        "├── [cluster-api-infrastructure-docker.yaml]  Certificate capd-system/capd-serving-cert",
        "├── [cluster-api-infrastructure-docker.yaml]  Service capd-system/capd-webhook-service",
        "└── [package-context.yaml]  ConfigMap kptfile.kpt.dev"
    ]
}

TASK [kpt : Render package: infra/capi/cluster-capi-infrastructure-docker] *****
Wednesday 01 October 2025  12:32:01 +0000 (0:00:00.083)       0:02:33.387 ***** 
Wednesday 01 October 2025  12:32:01 +0000 (0:00:00.083)       0:02:33.386 ***** 
ok: [127.0.0.1]

TASK [kpt : Recursively restore ownership of a directory package] **************
Wednesday 01 October 2025  12:32:01 +0000 (0:00:00.458)       0:02:33.845 ***** 
Wednesday 01 October 2025  12:32:01 +0000 (0:00:00.458)       0:02:33.844 ***** 
ok: [127.0.0.1]

TASK [kpt : Get package differences between local and upstream: infra/capi/cluster-capi-infrastructure-docker] ***
Wednesday 01 October 2025  12:32:02 +0000 (0:00:00.380)       0:02:34.226 ***** 
Wednesday 01 October 2025  12:32:02 +0000 (0:00:00.380)       0:02:34.225 ***** 
ok: [127.0.0.1]

TASK [kpt : Print package differences: infra/capi/cluster-capi-infrastructure-docker] ***
Wednesday 01 October 2025  12:32:03 +0000 (0:00:01.714)       0:02:35.940 ***** 
Wednesday 01 October 2025  12:32:03 +0000 (0:00:01.714)       0:02:35.940 ***** 
ok: [127.0.0.1] => {
    "kpt_pkg_diff.stdout_lines": []
}

TASK [kpt : Check package has been initialized] ********************************
Wednesday 01 October 2025  12:32:03 +0000 (0:00:00.068)       0:02:36.009 ***** 
Wednesday 01 October 2025  12:32:03 +0000 (0:00:00.068)       0:02:36.008 ***** 
ok: [127.0.0.1]

TASK [kpt : Init package: infra/capi/cluster-capi-infrastructure-docker] *******
Wednesday 01 October 2025  12:32:04 +0000 (0:00:00.251)       0:02:36.261 ***** 
Wednesday 01 October 2025  12:32:04 +0000 (0:00:00.251)       0:02:36.260 ***** 
changed: [127.0.0.1]

TASK [kpt : Print package initialization for infra/capi/cluster-capi-infrastructure-docker] ***
Wednesday 01 October 2025  12:32:04 +0000 (0:00:00.439)       0:02:36.700 ***** 
Wednesday 01 October 2025  12:32:04 +0000 (0:00:00.439)       0:02:36.700 ***** 
ok: [127.0.0.1] => {
    "kpt_live_init": {
        "changed": true,
        "cmd": "/usr/local/bin/kpt live init /tmp/kpt-pkg/infra/capi/cluster-capi-infrastructure-docker --context kubernetes-admin@kubernetes",
        "failed": false,
        "rc": 0,
        "stdout": "",
        "stdout_lines": []
    }
}

TASK [kpt : Apply package: infra/capi/cluster-capi-infrastructure-docker] ******
Wednesday 01 October 2025  12:32:04 +0000 (0:00:00.065)       0:02:36.766 ***** 
Wednesday 01 October 2025  12:32:04 +0000 (0:00:00.065)       0:02:36.765 ***** 
ASYNC POLL on 127.0.0.1: jid=j690307194126.103275 started=1 finished=0
ASYNC OK on 127.0.0.1: jid=j690307194126.103275
ok: [127.0.0.1]

TASK [kpt : Export job ids array] **********************************************
Wednesday 01 October 2025  12:32:15 +0000 (0:00:10.957)       0:02:47.723 ***** 
Wednesday 01 October 2025  12:32:15 +0000 (0:00:10.957)       0:02:47.723 ***** 
skipping: [127.0.0.1]

TASK [kpt : Print job ids] *****************************************************
Wednesday 01 October 2025  12:32:15 +0000 (0:00:00.041)       0:02:47.765 ***** 
Wednesday 01 October 2025  12:32:15 +0000 (0:00:00.041)       0:02:47.764 ***** 
ok: [127.0.0.1] => {
    "all_kpt_apply": []
}

TASK [kpt : Define working directory] ******************************************
Wednesday 01 October 2025  12:32:15 +0000 (0:00:00.078)       0:02:47.844 ***** 
Wednesday 01 October 2025  12:32:15 +0000 (0:00:00.078)       0:02:47.843 ***** 
ok: [127.0.0.1]

TASK [kpt : Create base directory if it does not exist: /tmp/kpt-pkg/infra/capi/cluster-capi-kind-docker-templates] ***
Wednesday 01 October 2025  12:32:15 +0000 (0:00:00.069)       0:02:47.914 ***** 
Wednesday 01 October 2025  12:32:15 +0000 (0:00:00.069)       0:02:47.913 ***** 
ok: [127.0.0.1]

TASK [kpt : Fetch package: infra/capi/cluster-capi-kind-docker-templates] ******
Wednesday 01 October 2025  12:32:16 +0000 (0:00:00.347)       0:02:48.261 ***** 
Wednesday 01 October 2025  12:32:16 +0000 (0:00:00.347)       0:02:48.260 ***** 
changed: [127.0.0.1]

TASK [kpt : Get package content information for infra/capi/cluster-capi-kind-docker-templates] ***
Wednesday 01 October 2025  12:32:17 +0000 (0:00:01.115)       0:02:49.376 ***** 
Wednesday 01 October 2025  12:32:17 +0000 (0:00:01.115)       0:02:49.375 ***** 
ok: [127.0.0.1]

TASK [kpt : Print package content information for infra/capi/cluster-capi-kind-docker-templates] ***
Wednesday 01 October 2025  12:32:17 +0000 (0:00:00.376)       0:02:49.752 ***** 
Wednesday 01 October 2025  12:32:17 +0000 (0:00:00.376)       0:02:49.751 ***** 
ok: [127.0.0.1] => {
    "kpt_pkg_tree.stdout_lines": [
        "Package \"cluster-capi-kind-docker-templates\"",
        "├── [Kptfile]  Kptfile cluster-capi-kind-docker-templates",
        "├── [cluster_class.yaml]  ClusterClass default/docker",
        "├── [docker_cluster_template.yaml]  DockerClusterTemplate default/docker-cluster",
        "├── [docker_machine_template_control_plane.yaml]  DockerMachineTemplate default/docker-control-plane",
        "├── [docker_machine_template_worker.yaml]  DockerMachineTemplate default/docker-default-worker-machinetemplate",
        "├── [kubeadm_config_template.yaml]  KubeadmConfigTemplate default/docker-default-worker-bootstraptemplate",
        "├── [kubeadm_controlplane_template.yaml]  KubeadmControlPlaneTemplate default/docker-control-plane",
        "└── [package-context.yaml]  ConfigMap kptfile.kpt.dev"
    ]
}

TASK [kpt : Render package: infra/capi/cluster-capi-kind-docker-templates] *****
Wednesday 01 October 2025  12:32:17 +0000 (0:00:00.066)       0:02:49.819 ***** 
Wednesday 01 October 2025  12:32:17 +0000 (0:00:00.066)       0:02:49.818 ***** 
ok: [127.0.0.1]

TASK [kpt : Recursively restore ownership of a directory package] **************
Wednesday 01 October 2025  12:32:18 +0000 (0:00:00.340)       0:02:50.160 ***** 
Wednesday 01 October 2025  12:32:18 +0000 (0:00:00.341)       0:02:50.159 ***** 
ok: [127.0.0.1]

TASK [kpt : Get package differences between local and upstream: infra/capi/cluster-capi-kind-docker-templates] ***
Wednesday 01 October 2025  12:32:18 +0000 (0:00:00.367)       0:02:50.528 ***** 
Wednesday 01 October 2025  12:32:18 +0000 (0:00:00.367)       0:02:50.527 ***** 
ok: [127.0.0.1]

TASK [kpt : Print package differences: infra/capi/cluster-capi-kind-docker-templates] ***
Wednesday 01 October 2025  12:32:20 +0000 (0:00:01.615)       0:02:52.143 ***** 
Wednesday 01 October 2025  12:32:20 +0000 (0:00:01.615)       0:02:52.143 ***** 
ok: [127.0.0.1] => {
    "kpt_pkg_diff.stdout_lines": []
}

TASK [kpt : Check package has been initialized] ********************************
Wednesday 01 October 2025  12:32:20 +0000 (0:00:00.068)       0:02:52.212 ***** 
Wednesday 01 October 2025  12:32:20 +0000 (0:00:00.068)       0:02:52.211 ***** 
ok: [127.0.0.1]

TASK [kpt : Init package: infra/capi/cluster-capi-kind-docker-templates] *******
Wednesday 01 October 2025  12:32:20 +0000 (0:00:00.292)       0:02:52.505 ***** 
Wednesday 01 October 2025  12:32:20 +0000 (0:00:00.292)       0:02:52.504 ***** 
changed: [127.0.0.1]

TASK [kpt : Print package initialization for infra/capi/cluster-capi-kind-docker-templates] ***
Wednesday 01 October 2025  12:32:20 +0000 (0:00:00.367)       0:02:52.872 ***** 
Wednesday 01 October 2025  12:32:20 +0000 (0:00:00.367)       0:02:52.871 ***** 
ok: [127.0.0.1] => {
    "kpt_live_init": {
        "changed": true,
        "cmd": "/usr/local/bin/kpt live init /tmp/kpt-pkg/infra/capi/cluster-capi-kind-docker-templates --context kubernetes-admin@kubernetes",
        "failed": false,
        "rc": 0,
        "stdout": "",
        "stdout_lines": []
    }
}

TASK [kpt : Apply package: infra/capi/cluster-capi-kind-docker-templates] ******
Wednesday 01 October 2025  12:32:20 +0000 (0:00:00.066)       0:02:52.939 ***** 
Wednesday 01 October 2025  12:32:20 +0000 (0:00:00.066)       0:02:52.938 ***** 
ok: [127.0.0.1]

TASK [kpt : Export job ids array] **********************************************
Wednesday 01 October 2025  12:32:21 +0000 (0:00:00.327)       0:02:53.266 ***** 
Wednesday 01 October 2025  12:32:21 +0000 (0:00:00.327)       0:02:53.265 ***** 
skipping: [127.0.0.1]

TASK [kpt : Print job ids] *****************************************************
Wednesday 01 October 2025  12:32:21 +0000 (0:00:00.089)       0:02:53.355 ***** 
Wednesday 01 October 2025  12:32:21 +0000 (0:00:00.089)       0:02:53.354 ***** 
ok: [127.0.0.1] => {
    "all_kpt_apply": []
}

TASK [bootstrap : Wait for packages to be applied] *****************************
Wednesday 01 October 2025  12:32:21 +0000 (0:00:00.093)       0:02:53.448 ***** 
Wednesday 01 October 2025  12:32:21 +0000 (0:00:00.093)       0:02:53.447 ***** 
skipping: [127.0.0.1]

TASK [bootstrap : Create list of namespaces] ***********************************
Wednesday 01 October 2025  12:32:21 +0000 (0:00:00.040)       0:02:53.489 ***** 
Wednesday 01 October 2025  12:32:21 +0000 (0:00:00.040)       0:02:53.488 ***** 
ok: [127.0.0.1]

TASK [bootstrap : Wait for deployments] ****************************************
Wednesday 01 October 2025  12:32:21 +0000 (0:00:00.074)       0:02:53.563 ***** 
Wednesday 01 October 2025  12:32:21 +0000 (0:00:00.074)       0:02:53.563 ***** 
included: /home/rehanfazal/test-infra/e2e/provision/playbooks/roles/bootstrap/tasks/wait-deployments.yml for 127.0.0.1 => (item=cert-manager)
included: /home/rehanfazal/test-infra/e2e/provision/playbooks/roles/bootstrap/tasks/wait-deployments.yml for 127.0.0.1 => (item=gitea)
included: /home/rehanfazal/test-infra/e2e/provision/playbooks/roles/bootstrap/tasks/wait-deployments.yml for 127.0.0.1 => (item=backend-system)
included: /home/rehanfazal/test-infra/e2e/provision/playbooks/roles/bootstrap/tasks/wait-deployments.yml for 127.0.0.1 => (item=metallb-system)
included: /home/rehanfazal/test-infra/e2e/provision/playbooks/roles/bootstrap/tasks/wait-deployments.yml for 127.0.0.1 => (item=capi-system)
included: /home/rehanfazal/test-infra/e2e/provision/playbooks/roles/bootstrap/tasks/wait-deployments.yml for 127.0.0.1 => (item=capi-kubeadm-control-plane-system)
included: /home/rehanfazal/test-infra/e2e/provision/playbooks/roles/bootstrap/tasks/wait-deployments.yml for 127.0.0.1 => (item=capi-kubeadm-bootstrap-system)
included: /home/rehanfazal/test-infra/e2e/provision/playbooks/roles/bootstrap/tasks/wait-deployments.yml for 127.0.0.1 => (item=capd-system)

TASK [bootstrap : Get deployment resources in namespace cert-manager] **********
Wednesday 01 October 2025  12:32:21 +0000 (0:00:00.226)       0:02:53.790 ***** 
Wednesday 01 October 2025  12:32:21 +0000 (0:00:00.226)       0:02:53.790 ***** 
ok: [127.0.0.1]

TASK [bootstrap : Print deployment resources in namespace cert-manager] ********
Wednesday 01 October 2025  12:32:23 +0000 (0:00:01.436)       0:02:55.227 ***** 
Wednesday 01 October 2025  12:32:23 +0000 (0:00:01.436)       0:02:55.226 ***** 
ok: [127.0.0.1] => {
    "deployment_list.resources": [
        {
            "apiVersion": "apps/v1",
            "kind": "Deployment",
            "metadata": {
                "annotations": {
                    "deployment.kubernetes.io/revision": "1",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"cert-manager\",\"app.kubernetes.io/component\":\"controller\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/name\":\"cert-manager\",\"app.kubernetes.io/version\":\"v1.16.2\"},\"name\":\"cert-manager\",\"namespace\":\"cert-manager\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app.kubernetes.io/component\":\"controller\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/name\":\"cert-manager\"}},\"template\":{\"metadata\":{\"annotations\":{\"prometheus.io/path\":\"/metrics\",\"prometheus.io/port\":\"9402\",\"prometheus.io/scrape\":\"true\"},\"labels\":{\"app\":\"cert-manager\",\"app.kubernetes.io/component\":\"controller\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/name\":\"cert-manager\",\"app.kubernetes.io/version\":\"v1.16.2\"}},\"spec\":{\"containers\":[{\"args\":[\"--v=2\",\"--cluster-resource-namespace=$(POD_NAMESPACE)\",\"--leader-election-namespace=kube-system\",\"--acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.16.2\",\"--max-concurrent-challenges=60\"],\"env\":[{\"name\":\"POD_NAMESPACE\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.namespace\"}}}],\"image\":\"quay.io/jetstack/cert-manager-controller:v1.16.2\",\"imagePullPolicy\":\"IfNotPresent\",\"livenessProbe\":{\"failureThreshold\":8,\"httpGet\":{\"path\":\"/livez\",\"port\":\"http-healthz\",\"scheme\":\"HTTP\"},\"initialDelaySeconds\":10,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":15},\"name\":\"cert-manager-controller\",\"ports\":[{\"containerPort\":9402,\"name\":\"http-metrics\",\"protocol\":\"TCP\"},{\"containerPort\":9403,\"name\":\"http-healthz\",\"protocol\":\"TCP\"}],\"securityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"readOnlyRootFilesystem\":true}}],\"enableServiceLinks\":false,\"nodeSelector\":{\"kubernetes.io/os\":\"linux\"},\"securityContext\":{\"runAsNonRoot\":true,\"seccompProfile\":{\"type\":\"RuntimeDefault\"}},\"serviceAccountName\":\"cert-manager\"}}}}\n"
                },
                "creationTimestamp": "2025-10-01T12:21:47Z",
                "generation": 1,
                "labels": {
                    "app": "cert-manager",
                    "app.kubernetes.io/component": "controller",
                    "app.kubernetes.io/instance": "cert-manager",
                    "app.kubernetes.io/name": "cert-manager",
                    "app.kubernetes.io/version": "v1.16.2"
                },
                "managedFields": [
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:app": {},
                                    "f:app.kubernetes.io/component": {},
                                    "f:app.kubernetes.io/instance": {},
                                    "f:app.kubernetes.io/name": {},
                                    "f:app.kubernetes.io/version": {}
                                }
                            },
                            "f:spec": {
                                "f:progressDeadlineSeconds": {},
                                "f:replicas": {},
                                "f:revisionHistoryLimit": {},
                                "f:selector": {},
                                "f:strategy": {
                                    "f:rollingUpdate": {
                                        ".": {},
                                        "f:maxSurge": {},
                                        "f:maxUnavailable": {}
                                    },
                                    "f:type": {}
                                },
                                "f:template": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:prometheus.io/path": {},
                                            "f:prometheus.io/port": {},
                                            "f:prometheus.io/scrape": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/version": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:containers": {
                                            "k:{\"name\":\"cert-manager-controller\"}": {
                                                ".": {},
                                                "f:args": {},
                                                "f:env": {
                                                    ".": {},
                                                    "k:{\"name\":\"POD_NAMESPACE\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    }
                                                },
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:livenessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:initialDelaySeconds": {},
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:name": {},
                                                "f:ports": {
                                                    ".": {},
                                                    "k:{\"containerPort\":9402,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    },
                                                    "k:{\"containerPort\":9403,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    }
                                                },
                                                "f:resources": {},
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:allowPrivilegeEscalation": {},
                                                    "f:capabilities": {
                                                        ".": {},
                                                        "f:drop": {}
                                                    },
                                                    "f:readOnlyRootFilesystem": {}
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {}
                                            }
                                        },
                                        "f:dnsPolicy": {},
                                        "f:enableServiceLinks": {},
                                        "f:nodeSelector": {},
                                        "f:restartPolicy": {},
                                        "f:schedulerName": {},
                                        "f:securityContext": {
                                            ".": {},
                                            "f:runAsNonRoot": {},
                                            "f:seccompProfile": {
                                                ".": {},
                                                "f:type": {}
                                            }
                                        },
                                        "f:serviceAccount": {},
                                        "f:serviceAccountName": {},
                                        "f:terminationGracePeriodSeconds": {}
                                    }
                                }
                            }
                        },
                        "manager": "kubectl-client-side-apply",
                        "operation": "Update",
                        "time": "2025-10-01T12:21:47Z"
                    },
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    "f:deployment.kubernetes.io/revision": {}
                                }
                            },
                            "f:status": {
                                "f:availableReplicas": {},
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"Available\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Progressing\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:observedGeneration": {},
                                "f:readyReplicas": {},
                                "f:replicas": {},
                                "f:updatedReplicas": {}
                            }
                        },
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "subresource": "status",
                        "time": "2025-10-01T12:21:52Z"
                    }
                ],
                "name": "cert-manager",
                "namespace": "cert-manager",
                "resourceVersion": "743",
                "uid": "3d5152ea-633e-4bde-bdff-ebfd8b527dcc"
            },
            "spec": {
                "progressDeadlineSeconds": 600,
                "replicas": 1,
                "revisionHistoryLimit": 10,
                "selector": {
                    "matchLabels": {
                        "app.kubernetes.io/component": "controller",
                        "app.kubernetes.io/instance": "cert-manager",
                        "app.kubernetes.io/name": "cert-manager"
                    }
                },
                "strategy": {
                    "rollingUpdate": {
                        "maxSurge": "25%",
                        "maxUnavailable": "25%"
                    },
                    "type": "RollingUpdate"
                },
                "template": {
                    "metadata": {
                        "annotations": {
                            "prometheus.io/path": "/metrics",
                            "prometheus.io/port": "9402",
                            "prometheus.io/scrape": "true"
                        },
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.16.2"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "args": [
                                    "--v=2",
                                    "--cluster-resource-namespace=$(POD_NAMESPACE)",
                                    "--leader-election-namespace=kube-system",
                                    "--acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.16.2",
                                    "--max-concurrent-challenges=60"
                                ],
                                "env": [
                                    {
                                        "name": "POD_NAMESPACE",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            }
                                        }
                                    }
                                ],
                                "image": "quay.io/jetstack/cert-manager-controller:v1.16.2",
                                "imagePullPolicy": "IfNotPresent",
                                "livenessProbe": {
                                    "failureThreshold": 8,
                                    "httpGet": {
                                        "path": "/livez",
                                        "port": "http-healthz",
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 10,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 15
                                },
                                "name": "cert-manager-controller",
                                "ports": [
                                    {
                                        "containerPort": 9402,
                                        "name": "http-metrics",
                                        "protocol": "TCP"
                                    },
                                    {
                                        "containerPort": 9403,
                                        "name": "http-healthz",
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {},
                                "securityContext": {
                                    "allowPrivilegeEscalation": false,
                                    "capabilities": {
                                        "drop": [
                                            "ALL"
                                        ]
                                    },
                                    "readOnlyRootFilesystem": true
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File"
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "enableServiceLinks": false,
                        "nodeSelector": {
                            "kubernetes.io/os": "linux"
                        },
                        "restartPolicy": "Always",
                        "schedulerName": "default-scheduler",
                        "securityContext": {
                            "runAsNonRoot": true,
                            "seccompProfile": {
                                "type": "RuntimeDefault"
                            }
                        },
                        "serviceAccount": "cert-manager",
                        "serviceAccountName": "cert-manager",
                        "terminationGracePeriodSeconds": 30
                    }
                }
            },
            "status": {
                "availableReplicas": 1,
                "conditions": [
                    {
                        "lastTransitionTime": "2025-10-01T12:21:52Z",
                        "lastUpdateTime": "2025-10-01T12:21:52Z",
                        "message": "Deployment has minimum availability.",
                        "reason": "MinimumReplicasAvailable",
                        "status": "True",
                        "type": "Available"
                    },
                    {
                        "lastTransitionTime": "2025-10-01T12:21:47Z",
                        "lastUpdateTime": "2025-10-01T12:21:52Z",
                        "message": "ReplicaSet \"cert-manager-5595474b89\" has successfully progressed.",
                        "reason": "NewReplicaSetAvailable",
                        "status": "True",
                        "type": "Progressing"
                    }
                ],
                "observedGeneration": 1,
                "readyReplicas": 1,
                "replicas": 1,
                "updatedReplicas": 1
            }
        },
        {
            "apiVersion": "apps/v1",
            "kind": "Deployment",
            "metadata": {
                "annotations": {
                    "deployment.kubernetes.io/revision": "1",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"cainjector\",\"app.kubernetes.io/component\":\"cainjector\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/name\":\"cainjector\",\"app.kubernetes.io/version\":\"v1.16.2\"},\"name\":\"cert-manager-cainjector\",\"namespace\":\"cert-manager\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app.kubernetes.io/component\":\"cainjector\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/name\":\"cainjector\"}},\"template\":{\"metadata\":{\"annotations\":{\"prometheus.io/path\":\"/metrics\",\"prometheus.io/port\":\"9402\",\"prometheus.io/scrape\":\"true\"},\"labels\":{\"app\":\"cainjector\",\"app.kubernetes.io/component\":\"cainjector\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/name\":\"cainjector\",\"app.kubernetes.io/version\":\"v1.16.2\"}},\"spec\":{\"containers\":[{\"args\":[\"--v=2\",\"--leader-election-namespace=kube-system\"],\"env\":[{\"name\":\"POD_NAMESPACE\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.namespace\"}}}],\"image\":\"quay.io/jetstack/cert-manager-cainjector:v1.16.2\",\"imagePullPolicy\":\"IfNotPresent\",\"name\":\"cert-manager-cainjector\",\"ports\":[{\"containerPort\":9402,\"name\":\"http-metrics\",\"protocol\":\"TCP\"}],\"securityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"readOnlyRootFilesystem\":true}}],\"enableServiceLinks\":false,\"nodeSelector\":{\"kubernetes.io/os\":\"linux\"},\"securityContext\":{\"runAsNonRoot\":true,\"seccompProfile\":{\"type\":\"RuntimeDefault\"}},\"serviceAccountName\":\"cert-manager-cainjector\"}}}}\n"
                },
                "creationTimestamp": "2025-10-01T12:21:47Z",
                "generation": 1,
                "labels": {
                    "app": "cainjector",
                    "app.kubernetes.io/component": "cainjector",
                    "app.kubernetes.io/instance": "cert-manager",
                    "app.kubernetes.io/name": "cainjector",
                    "app.kubernetes.io/version": "v1.16.2"
                },
                "managedFields": [
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:app": {},
                                    "f:app.kubernetes.io/component": {},
                                    "f:app.kubernetes.io/instance": {},
                                    "f:app.kubernetes.io/name": {},
                                    "f:app.kubernetes.io/version": {}
                                }
                            },
                            "f:spec": {
                                "f:progressDeadlineSeconds": {},
                                "f:replicas": {},
                                "f:revisionHistoryLimit": {},
                                "f:selector": {},
                                "f:strategy": {
                                    "f:rollingUpdate": {
                                        ".": {},
                                        "f:maxSurge": {},
                                        "f:maxUnavailable": {}
                                    },
                                    "f:type": {}
                                },
                                "f:template": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:prometheus.io/path": {},
                                            "f:prometheus.io/port": {},
                                            "f:prometheus.io/scrape": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/version": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:containers": {
                                            "k:{\"name\":\"cert-manager-cainjector\"}": {
                                                ".": {},
                                                "f:args": {},
                                                "f:env": {
                                                    ".": {},
                                                    "k:{\"name\":\"POD_NAMESPACE\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    }
                                                },
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:name": {},
                                                "f:ports": {
                                                    ".": {},
                                                    "k:{\"containerPort\":9402,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    }
                                                },
                                                "f:resources": {},
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:allowPrivilegeEscalation": {},
                                                    "f:capabilities": {
                                                        ".": {},
                                                        "f:drop": {}
                                                    },
                                                    "f:readOnlyRootFilesystem": {}
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {}
                                            }
                                        },
                                        "f:dnsPolicy": {},
                                        "f:enableServiceLinks": {},
                                        "f:nodeSelector": {},
                                        "f:restartPolicy": {},
                                        "f:schedulerName": {},
                                        "f:securityContext": {
                                            ".": {},
                                            "f:runAsNonRoot": {},
                                            "f:seccompProfile": {
                                                ".": {},
                                                "f:type": {}
                                            }
                                        },
                                        "f:serviceAccount": {},
                                        "f:serviceAccountName": {},
                                        "f:terminationGracePeriodSeconds": {}
                                    }
                                }
                            }
                        },
                        "manager": "kubectl-client-side-apply",
                        "operation": "Update",
                        "time": "2025-10-01T12:21:47Z"
                    },
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    "f:deployment.kubernetes.io/revision": {}
                                }
                            },
                            "f:status": {
                                "f:availableReplicas": {},
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"Available\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Progressing\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:observedGeneration": {},
                                "f:readyReplicas": {},
                                "f:replicas": {},
                                "f:updatedReplicas": {}
                            }
                        },
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "subresource": "status",
                        "time": "2025-10-01T12:21:50Z"
                    }
                ],
                "name": "cert-manager-cainjector",
                "namespace": "cert-manager",
                "resourceVersion": "730",
                "uid": "ff924b7e-bb0a-4703-9494-8b6a7eb598b2"
            },
            "spec": {
                "progressDeadlineSeconds": 600,
                "replicas": 1,
                "revisionHistoryLimit": 10,
                "selector": {
                    "matchLabels": {
                        "app.kubernetes.io/component": "cainjector",
                        "app.kubernetes.io/instance": "cert-manager",
                        "app.kubernetes.io/name": "cainjector"
                    }
                },
                "strategy": {
                    "rollingUpdate": {
                        "maxSurge": "25%",
                        "maxUnavailable": "25%"
                    },
                    "type": "RollingUpdate"
                },
                "template": {
                    "metadata": {
                        "annotations": {
                            "prometheus.io/path": "/metrics",
                            "prometheus.io/port": "9402",
                            "prometheus.io/scrape": "true"
                        },
                        "labels": {
                            "app": "cainjector",
                            "app.kubernetes.io/component": "cainjector",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/name": "cainjector",
                            "app.kubernetes.io/version": "v1.16.2"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "args": [
                                    "--v=2",
                                    "--leader-election-namespace=kube-system"
                                ],
                                "env": [
                                    {
                                        "name": "POD_NAMESPACE",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            }
                                        }
                                    }
                                ],
                                "image": "quay.io/jetstack/cert-manager-cainjector:v1.16.2",
                                "imagePullPolicy": "IfNotPresent",
                                "name": "cert-manager-cainjector",
                                "ports": [
                                    {
                                        "containerPort": 9402,
                                        "name": "http-metrics",
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {},
                                "securityContext": {
                                    "allowPrivilegeEscalation": false,
                                    "capabilities": {
                                        "drop": [
                                            "ALL"
                                        ]
                                    },
                                    "readOnlyRootFilesystem": true
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File"
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "enableServiceLinks": false,
                        "nodeSelector": {
                            "kubernetes.io/os": "linux"
                        },
                        "restartPolicy": "Always",
                        "schedulerName": "default-scheduler",
                        "securityContext": {
                            "runAsNonRoot": true,
                            "seccompProfile": {
                                "type": "RuntimeDefault"
                            }
                        },
                        "serviceAccount": "cert-manager-cainjector",
                        "serviceAccountName": "cert-manager-cainjector",
                        "terminationGracePeriodSeconds": 30
                    }
                }
            },
            "status": {
                "availableReplicas": 1,
                "conditions": [
                    {
                        "lastTransitionTime": "2025-10-01T12:21:50Z",
                        "lastUpdateTime": "2025-10-01T12:21:50Z",
                        "message": "Deployment has minimum availability.",
                        "reason": "MinimumReplicasAvailable",
                        "status": "True",
                        "type": "Available"
                    },
                    {
                        "lastTransitionTime": "2025-10-01T12:21:47Z",
                        "lastUpdateTime": "2025-10-01T12:21:50Z",
                        "message": "ReplicaSet \"cert-manager-cainjector-699b655b95\" has successfully progressed.",
                        "reason": "NewReplicaSetAvailable",
                        "status": "True",
                        "type": "Progressing"
                    }
                ],
                "observedGeneration": 1,
                "readyReplicas": 1,
                "replicas": 1,
                "updatedReplicas": 1
            }
        },
        {
            "apiVersion": "apps/v1",
            "kind": "Deployment",
            "metadata": {
                "annotations": {
                    "deployment.kubernetes.io/revision": "1",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"webhook\",\"app.kubernetes.io/component\":\"webhook\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/name\":\"webhook\",\"app.kubernetes.io/version\":\"v1.16.2\"},\"name\":\"cert-manager-webhook\",\"namespace\":\"cert-manager\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app.kubernetes.io/component\":\"webhook\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/name\":\"webhook\"}},\"template\":{\"metadata\":{\"annotations\":{\"prometheus.io/path\":\"/metrics\",\"prometheus.io/port\":\"9402\",\"prometheus.io/scrape\":\"true\"},\"labels\":{\"app\":\"webhook\",\"app.kubernetes.io/component\":\"webhook\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/name\":\"webhook\",\"app.kubernetes.io/version\":\"v1.16.2\"}},\"spec\":{\"containers\":[{\"args\":[\"--v=2\",\"--secure-port=10250\",\"--dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)\",\"--dynamic-serving-ca-secret-name=cert-manager-webhook-ca\",\"--dynamic-serving-dns-names=cert-manager-webhook\",\"--dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)\",\"--dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE).svc\"],\"env\":[{\"name\":\"POD_NAMESPACE\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.namespace\"}}}],\"image\":\"quay.io/jetstack/cert-manager-webhook:v1.16.2\",\"imagePullPolicy\":\"IfNotPresent\",\"livenessProbe\":{\"failureThreshold\":3,\"httpGet\":{\"path\":\"/livez\",\"port\":6080,\"scheme\":\"HTTP\"},\"initialDelaySeconds\":60,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":1},\"name\":\"cert-manager-webhook\",\"ports\":[{\"containerPort\":10250,\"name\":\"https\",\"protocol\":\"TCP\"},{\"containerPort\":6080,\"name\":\"healthcheck\",\"protocol\":\"TCP\"},{\"containerPort\":9402,\"name\":\"http-metrics\",\"protocol\":\"TCP\"}],\"readinessProbe\":{\"failureThreshold\":3,\"httpGet\":{\"path\":\"/healthz\",\"port\":6080,\"scheme\":\"HTTP\"},\"initialDelaySeconds\":5,\"periodSeconds\":5,\"successThreshold\":1,\"timeoutSeconds\":1},\"securityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"readOnlyRootFilesystem\":true}}],\"enableServiceLinks\":false,\"nodeSelector\":{\"kubernetes.io/os\":\"linux\"},\"securityContext\":{\"runAsNonRoot\":true,\"seccompProfile\":{\"type\":\"RuntimeDefault\"}},\"serviceAccountName\":\"cert-manager-webhook\"}}}}\n"
                },
                "creationTimestamp": "2025-10-01T12:21:47Z",
                "generation": 1,
                "labels": {
                    "app": "webhook",
                    "app.kubernetes.io/component": "webhook",
                    "app.kubernetes.io/instance": "cert-manager",
                    "app.kubernetes.io/name": "webhook",
                    "app.kubernetes.io/version": "v1.16.2"
                },
                "managedFields": [
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:app": {},
                                    "f:app.kubernetes.io/component": {},
                                    "f:app.kubernetes.io/instance": {},
                                    "f:app.kubernetes.io/name": {},
                                    "f:app.kubernetes.io/version": {}
                                }
                            },
                            "f:spec": {
                                "f:progressDeadlineSeconds": {},
                                "f:replicas": {},
                                "f:revisionHistoryLimit": {},
                                "f:selector": {},
                                "f:strategy": {
                                    "f:rollingUpdate": {
                                        ".": {},
                                        "f:maxSurge": {},
                                        "f:maxUnavailable": {}
                                    },
                                    "f:type": {}
                                },
                                "f:template": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:prometheus.io/path": {},
                                            "f:prometheus.io/port": {},
                                            "f:prometheus.io/scrape": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/version": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:containers": {
                                            "k:{\"name\":\"cert-manager-webhook\"}": {
                                                ".": {},
                                                "f:args": {},
                                                "f:env": {
                                                    ".": {},
                                                    "k:{\"name\":\"POD_NAMESPACE\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    }
                                                },
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:livenessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:initialDelaySeconds": {},
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:name": {},
                                                "f:ports": {
                                                    ".": {},
                                                    "k:{\"containerPort\":10250,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    },
                                                    "k:{\"containerPort\":6080,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    },
                                                    "k:{\"containerPort\":9402,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    }
                                                },
                                                "f:readinessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:initialDelaySeconds": {},
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:resources": {},
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:allowPrivilegeEscalation": {},
                                                    "f:capabilities": {
                                                        ".": {},
                                                        "f:drop": {}
                                                    },
                                                    "f:readOnlyRootFilesystem": {}
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {}
                                            }
                                        },
                                        "f:dnsPolicy": {},
                                        "f:enableServiceLinks": {},
                                        "f:nodeSelector": {},
                                        "f:restartPolicy": {},
                                        "f:schedulerName": {},
                                        "f:securityContext": {
                                            ".": {},
                                            "f:runAsNonRoot": {},
                                            "f:seccompProfile": {
                                                ".": {},
                                                "f:type": {}
                                            }
                                        },
                                        "f:serviceAccount": {},
                                        "f:serviceAccountName": {},
                                        "f:terminationGracePeriodSeconds": {}
                                    }
                                }
                            }
                        },
                        "manager": "kubectl-client-side-apply",
                        "operation": "Update",
                        "time": "2025-10-01T12:21:47Z"
                    },
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    "f:deployment.kubernetes.io/revision": {}
                                }
                            },
                            "f:status": {
                                "f:availableReplicas": {},
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"Available\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Progressing\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:observedGeneration": {},
                                "f:readyReplicas": {},
                                "f:replicas": {},
                                "f:updatedReplicas": {}
                            }
                        },
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "subresource": "status",
                        "time": "2025-10-01T12:22:00Z"
                    }
                ],
                "name": "cert-manager-webhook",
                "namespace": "cert-manager",
                "resourceVersion": "769",
                "uid": "e8cb8db1-a6f3-4c06-91bd-22a176f7f11e"
            },
            "spec": {
                "progressDeadlineSeconds": 600,
                "replicas": 1,
                "revisionHistoryLimit": 10,
                "selector": {
                    "matchLabels": {
                        "app.kubernetes.io/component": "webhook",
                        "app.kubernetes.io/instance": "cert-manager",
                        "app.kubernetes.io/name": "webhook"
                    }
                },
                "strategy": {
                    "rollingUpdate": {
                        "maxSurge": "25%",
                        "maxUnavailable": "25%"
                    },
                    "type": "RollingUpdate"
                },
                "template": {
                    "metadata": {
                        "annotations": {
                            "prometheus.io/path": "/metrics",
                            "prometheus.io/port": "9402",
                            "prometheus.io/scrape": "true"
                        },
                        "labels": {
                            "app": "webhook",
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/name": "webhook",
                            "app.kubernetes.io/version": "v1.16.2"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "args": [
                                    "--v=2",
                                    "--secure-port=10250",
                                    "--dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)",
                                    "--dynamic-serving-ca-secret-name=cert-manager-webhook-ca",
                                    "--dynamic-serving-dns-names=cert-manager-webhook",
                                    "--dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)",
                                    "--dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE).svc"
                                ],
                                "env": [
                                    {
                                        "name": "POD_NAMESPACE",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            }
                                        }
                                    }
                                ],
                                "image": "quay.io/jetstack/cert-manager-webhook:v1.16.2",
                                "imagePullPolicy": "IfNotPresent",
                                "livenessProbe": {
                                    "failureThreshold": 3,
                                    "httpGet": {
                                        "path": "/livez",
                                        "port": 6080,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 60,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 1
                                },
                                "name": "cert-manager-webhook",
                                "ports": [
                                    {
                                        "containerPort": 10250,
                                        "name": "https",
                                        "protocol": "TCP"
                                    },
                                    {
                                        "containerPort": 6080,
                                        "name": "healthcheck",
                                        "protocol": "TCP"
                                    },
                                    {
                                        "containerPort": 9402,
                                        "name": "http-metrics",
                                        "protocol": "TCP"
                                    }
                                ],
                                "readinessProbe": {
                                    "failureThreshold": 3,
                                    "httpGet": {
                                        "path": "/healthz",
                                        "port": 6080,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 5,
                                    "periodSeconds": 5,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 1
                                },
                                "resources": {},
                                "securityContext": {
                                    "allowPrivilegeEscalation": false,
                                    "capabilities": {
                                        "drop": [
                                            "ALL"
                                        ]
                                    },
                                    "readOnlyRootFilesystem": true
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File"
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "enableServiceLinks": false,
                        "nodeSelector": {
                            "kubernetes.io/os": "linux"
                        },
                        "restartPolicy": "Always",
                        "schedulerName": "default-scheduler",
                        "securityContext": {
                            "runAsNonRoot": true,
                            "seccompProfile": {
                                "type": "RuntimeDefault"
                            }
                        },
                        "serviceAccount": "cert-manager-webhook",
                        "serviceAccountName": "cert-manager-webhook",
                        "terminationGracePeriodSeconds": 30
                    }
                }
            },
            "status": {
                "availableReplicas": 1,
                "conditions": [
                    {
                        "lastTransitionTime": "2025-10-01T12:22:00Z",
                        "lastUpdateTime": "2025-10-01T12:22:00Z",
                        "message": "Deployment has minimum availability.",
                        "reason": "MinimumReplicasAvailable",
                        "status": "True",
                        "type": "Available"
                    },
                    {
                        "lastTransitionTime": "2025-10-01T12:21:47Z",
                        "lastUpdateTime": "2025-10-01T12:22:00Z",
                        "message": "ReplicaSet \"cert-manager-webhook-758fc84d84\" has successfully progressed.",
                        "reason": "NewReplicaSetAvailable",
                        "status": "True",
                        "type": "Progressing"
                    }
                ],
                "observedGeneration": 1,
                "readyReplicas": 1,
                "replicas": 1,
                "updatedReplicas": 1
            }
        }
    ]
}

TASK [bootstrap : Wait for deployments in namespace cert-manager] **************
Wednesday 01 October 2025  12:32:23 +0000 (0:00:00.133)       0:02:55.360 ***** 
Wednesday 01 October 2025  12:32:23 +0000 (0:00:00.133)       0:02:55.359 ***** 
ok: [127.0.0.1] => (item={'metadata': {'name': 'cert-manager', 'namespace': 'cert-manager', 'uid': '3d5152ea-633e-4bde-bdff-ebfd8b527dcc', 'resourceVersion': '743', 'generation': 1, 'creationTimestamp': '2025-10-01T12:21:47Z', 'labels': {'app': 'cert-manager', 'app.kubernetes.io/component': 'controller', 'app.kubernetes.io/instance': 'cert-manager', 'app.kubernetes.io/name': 'cert-manager', 'app.kubernetes.io/version': 'v1.16.2'}, 'annotations': {'deployment.kubernetes.io/revision': '1', 'kubectl.kubernetes.io/last-applied-configuration': '{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"cert-manager","app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager","app.kubernetes.io/version":"v1.16.2"},"name":"cert-manager","namespace":"cert-manager"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager"}},"template":{"metadata":{"annotations":{"prometheus.io/path":"/metrics","prometheus.io/port":"9402","prometheus.io/scrape":"true"},"labels":{"app":"cert-manager","app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager","app.kubernetes.io/version":"v1.16.2"}},"spec":{"containers":[{"args":["--v=2","--cluster-resource-namespace=$(POD_NAMESPACE)","--leader-election-namespace=kube-system","--acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.16.2","--max-concurrent-challenges=60"],"env":[{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"quay.io/jetstack/cert-manager-controller:v1.16.2","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":8,"httpGet":{"path":"/livez","port":"http-healthz","scheme":"HTTP"},"initialDelaySeconds":10,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":15},"name":"cert-manager-controller","ports":[{"containerPort":9402,"name":"http-metrics","protocol":"TCP"},{"containerPort":9403,"name":"http-healthz","protocol":"TCP"}],"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true}}],"enableServiceLinks":false,"nodeSelector":{"kubernetes.io/os":"linux"},"securityContext":{"runAsNonRoot":true,"seccompProfile":{"type":"RuntimeDefault"}},"serviceAccountName":"cert-manager"}}}}\n'}, 'managedFields': [{'manager': 'kubectl-client-side-apply', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:21:47Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'.': {}, 'f:kubectl.kubernetes.io/last-applied-configuration': {}}, 'f:labels': {'.': {}, 'f:app': {}, 'f:app.kubernetes.io/component': {}, 'f:app.kubernetes.io/instance': {}, 'f:app.kubernetes.io/name': {}, 'f:app.kubernetes.io/version': {}}}, 'f:spec': {'f:progressDeadlineSeconds': {}, 'f:replicas': {}, 'f:revisionHistoryLimit': {}, 'f:selector': {}, 'f:strategy': {'f:rollingUpdate': {'.': {}, 'f:maxSurge': {}, 'f:maxUnavailable': {}}, 'f:type': {}}, 'f:template': {'f:metadata': {'f:annotations': {'.': {}, 'f:prometheus.io/path': {}, 'f:prometheus.io/port': {}, 'f:prometheus.io/scrape': {}}, 'f:labels': {'.': {}, 'f:app': {}, 'f:app.kubernetes.io/component': {}, 'f:app.kubernetes.io/instance': {}, 'f:app.kubernetes.io/name': {}, 'f:app.kubernetes.io/version': {}}}, 'f:spec': {'f:containers': {'k:{"name":"cert-manager-controller"}': {'.': {}, 'f:args': {}, 'f:env': {'.': {}, 'k:{"name":"POD_NAMESPACE"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}}, 'f:image': {}, 'f:imagePullPolicy': {}, 'f:livenessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:httpGet': {'.': {}, 'f:path': {}, 'f:port': {}, 'f:scheme': {}}, 'f:initialDelaySeconds': {}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:timeoutSeconds': {}}, 'f:name': {}, 'f:ports': {'.': {}, 'k:{"containerPort":9402,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:name': {}, 'f:protocol': {}}, 'k:{"containerPort":9403,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:name': {}, 'f:protocol': {}}}, 'f:resources': {}, 'f:securityContext': {'.': {}, 'f:allowPrivilegeEscalation': {}, 'f:capabilities': {'.': {}, 'f:drop': {}}, 'f:readOnlyRootFilesystem': {}}, 'f:terminationMessagePath': {}, 'f:terminationMessagePolicy': {}}}, 'f:dnsPolicy': {}, 'f:enableServiceLinks': {}, 'f:nodeSelector': {}, 'f:restartPolicy': {}, 'f:schedulerName': {}, 'f:securityContext': {'.': {}, 'f:runAsNonRoot': {}, 'f:seccompProfile': {'.': {}, 'f:type': {}}}, 'f:serviceAccount': {}, 'f:serviceAccountName': {}, 'f:terminationGracePeriodSeconds': {}}}}}}, {'manager': 'kube-controller-manager', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:21:52Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'f:deployment.kubernetes.io/revision': {}}}, 'f:status': {'f:availableReplicas': {}, 'f:conditions': {'.': {}, 'k:{"type":"Available"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}, 'k:{"type":"Progressing"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}}, 'f:observedGeneration': {}, 'f:readyReplicas': {}, 'f:replicas': {}, 'f:updatedReplicas': {}}}, 'subresource': 'status'}]}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'controller', 'app.kubernetes.io/instance': 'cert-manager', 'app.kubernetes.io/name': 'cert-manager'}}, 'template': {'metadata': {'labels': {'app': 'cert-manager', 'app.kubernetes.io/component': 'controller', 'app.kubernetes.io/instance': 'cert-manager', 'app.kubernetes.io/name': 'cert-manager', 'app.kubernetes.io/version': 'v1.16.2'}, 'annotations': {'prometheus.io/path': '/metrics', 'prometheus.io/port': '9402', 'prometheus.io/scrape': 'true'}}, 'spec': {'containers': [{'name': 'cert-manager-controller', 'image': 'quay.io/jetstack/cert-manager-controller:v1.16.2', 'args': ['--v=2', '--cluster-resource-namespace=$(POD_NAMESPACE)', '--leader-election-namespace=kube-system', '--acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.16.2', '--max-concurrent-challenges=60'], 'ports': [{'name': 'http-metrics', 'containerPort': 9402, 'protocol': 'TCP'}, {'name': 'http-healthz', 'containerPort': 9403, 'protocol': 'TCP'}], 'env': [{'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'metadata.namespace'}}}], 'resources': {}, 'livenessProbe': {'httpGet': {'path': '/livez', 'port': 'http-healthz', 'scheme': 'HTTP'}, 'initialDelaySeconds': 10, 'timeoutSeconds': 15, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 8}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'allowPrivilegeEscalation': False}}], 'restartPolicy': 'Always', 'terminationGracePeriodSeconds': 30, 'dnsPolicy': 'ClusterFirst', 'nodeSelector': {'kubernetes.io/os': 'linux'}, 'serviceAccountName': 'cert-manager', 'serviceAccount': 'cert-manager', 'securityContext': {'runAsNonRoot': True, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'schedulerName': 'default-scheduler', 'enableServiceLinks': False}}, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxUnavailable': '25%', 'maxSurge': '25%'}}, 'revisionHistoryLimit': 10, 'progressDeadlineSeconds': 600}, 'status': {'observedGeneration': 1, 'replicas': 1, 'updatedReplicas': 1, 'readyReplicas': 1, 'availableReplicas': 1, 'conditions': [{'type': 'Available', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:21:52Z', 'lastTransitionTime': '2025-10-01T12:21:52Z', 'reason': 'MinimumReplicasAvailable', 'message': 'Deployment has minimum availability.'}, {'type': 'Progressing', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:21:52Z', 'lastTransitionTime': '2025-10-01T12:21:47Z', 'reason': 'NewReplicaSetAvailable', 'message': 'ReplicaSet "cert-manager-5595474b89" has successfully progressed.'}]}, 'apiVersion': 'apps/v1', 'kind': 'Deployment'})
ok: [127.0.0.1] => (item={'metadata': {'name': 'cert-manager-cainjector', 'namespace': 'cert-manager', 'uid': 'ff924b7e-bb0a-4703-9494-8b6a7eb598b2', 'resourceVersion': '730', 'generation': 1, 'creationTimestamp': '2025-10-01T12:21:47Z', 'labels': {'app': 'cainjector', 'app.kubernetes.io/component': 'cainjector', 'app.kubernetes.io/instance': 'cert-manager', 'app.kubernetes.io/name': 'cainjector', 'app.kubernetes.io/version': 'v1.16.2'}, 'annotations': {'deployment.kubernetes.io/revision': '1', 'kubectl.kubernetes.io/last-applied-configuration': '{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"cainjector","app.kubernetes.io/component":"cainjector","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cainjector","app.kubernetes.io/version":"v1.16.2"},"name":"cert-manager-cainjector","namespace":"cert-manager"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"cainjector","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cainjector"}},"template":{"metadata":{"annotations":{"prometheus.io/path":"/metrics","prometheus.io/port":"9402","prometheus.io/scrape":"true"},"labels":{"app":"cainjector","app.kubernetes.io/component":"cainjector","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cainjector","app.kubernetes.io/version":"v1.16.2"}},"spec":{"containers":[{"args":["--v=2","--leader-election-namespace=kube-system"],"env":[{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"quay.io/jetstack/cert-manager-cainjector:v1.16.2","imagePullPolicy":"IfNotPresent","name":"cert-manager-cainjector","ports":[{"containerPort":9402,"name":"http-metrics","protocol":"TCP"}],"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true}}],"enableServiceLinks":false,"nodeSelector":{"kubernetes.io/os":"linux"},"securityContext":{"runAsNonRoot":true,"seccompProfile":{"type":"RuntimeDefault"}},"serviceAccountName":"cert-manager-cainjector"}}}}\n'}, 'managedFields': [{'manager': 'kubectl-client-side-apply', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:21:47Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'.': {}, 'f:kubectl.kubernetes.io/last-applied-configuration': {}}, 'f:labels': {'.': {}, 'f:app': {}, 'f:app.kubernetes.io/component': {}, 'f:app.kubernetes.io/instance': {}, 'f:app.kubernetes.io/name': {}, 'f:app.kubernetes.io/version': {}}}, 'f:spec': {'f:progressDeadlineSeconds': {}, 'f:replicas': {}, 'f:revisionHistoryLimit': {}, 'f:selector': {}, 'f:strategy': {'f:rollingUpdate': {'.': {}, 'f:maxSurge': {}, 'f:maxUnavailable': {}}, 'f:type': {}}, 'f:template': {'f:metadata': {'f:annotations': {'.': {}, 'f:prometheus.io/path': {}, 'f:prometheus.io/port': {}, 'f:prometheus.io/scrape': {}}, 'f:labels': {'.': {}, 'f:app': {}, 'f:app.kubernetes.io/component': {}, 'f:app.kubernetes.io/instance': {}, 'f:app.kubernetes.io/name': {}, 'f:app.kubernetes.io/version': {}}}, 'f:spec': {'f:containers': {'k:{"name":"cert-manager-cainjector"}': {'.': {}, 'f:args': {}, 'f:env': {'.': {}, 'k:{"name":"POD_NAMESPACE"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}}, 'f:image': {}, 'f:imagePullPolicy': {}, 'f:name': {}, 'f:ports': {'.': {}, 'k:{"containerPort":9402,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:name': {}, 'f:protocol': {}}}, 'f:resources': {}, 'f:securityContext': {'.': {}, 'f:allowPrivilegeEscalation': {}, 'f:capabilities': {'.': {}, 'f:drop': {}}, 'f:readOnlyRootFilesystem': {}}, 'f:terminationMessagePath': {}, 'f:terminationMessagePolicy': {}}}, 'f:dnsPolicy': {}, 'f:enableServiceLinks': {}, 'f:nodeSelector': {}, 'f:restartPolicy': {}, 'f:schedulerName': {}, 'f:securityContext': {'.': {}, 'f:runAsNonRoot': {}, 'f:seccompProfile': {'.': {}, 'f:type': {}}}, 'f:serviceAccount': {}, 'f:serviceAccountName': {}, 'f:terminationGracePeriodSeconds': {}}}}}}, {'manager': 'kube-controller-manager', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:21:50Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'f:deployment.kubernetes.io/revision': {}}}, 'f:status': {'f:availableReplicas': {}, 'f:conditions': {'.': {}, 'k:{"type":"Available"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}, 'k:{"type":"Progressing"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}}, 'f:observedGeneration': {}, 'f:readyReplicas': {}, 'f:replicas': {}, 'f:updatedReplicas': {}}}, 'subresource': 'status'}]}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'cainjector', 'app.kubernetes.io/instance': 'cert-manager', 'app.kubernetes.io/name': 'cainjector'}}, 'template': {'metadata': {'labels': {'app': 'cainjector', 'app.kubernetes.io/component': 'cainjector', 'app.kubernetes.io/instance': 'cert-manager', 'app.kubernetes.io/name': 'cainjector', 'app.kubernetes.io/version': 'v1.16.2'}, 'annotations': {'prometheus.io/path': '/metrics', 'prometheus.io/port': '9402', 'prometheus.io/scrape': 'true'}}, 'spec': {'containers': [{'name': 'cert-manager-cainjector', 'image': 'quay.io/jetstack/cert-manager-cainjector:v1.16.2', 'args': ['--v=2', '--leader-election-namespace=kube-system'], 'ports': [{'name': 'http-metrics', 'containerPort': 9402, 'protocol': 'TCP'}], 'env': [{'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'metadata.namespace'}}}], 'resources': {}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'allowPrivilegeEscalation': False}}], 'restartPolicy': 'Always', 'terminationGracePeriodSeconds': 30, 'dnsPolicy': 'ClusterFirst', 'nodeSelector': {'kubernetes.io/os': 'linux'}, 'serviceAccountName': 'cert-manager-cainjector', 'serviceAccount': 'cert-manager-cainjector', 'securityContext': {'runAsNonRoot': True, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'schedulerName': 'default-scheduler', 'enableServiceLinks': False}}, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxUnavailable': '25%', 'maxSurge': '25%'}}, 'revisionHistoryLimit': 10, 'progressDeadlineSeconds': 600}, 'status': {'observedGeneration': 1, 'replicas': 1, 'updatedReplicas': 1, 'readyReplicas': 1, 'availableReplicas': 1, 'conditions': [{'type': 'Available', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:21:50Z', 'lastTransitionTime': '2025-10-01T12:21:50Z', 'reason': 'MinimumReplicasAvailable', 'message': 'Deployment has minimum availability.'}, {'type': 'Progressing', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:21:50Z', 'lastTransitionTime': '2025-10-01T12:21:47Z', 'reason': 'NewReplicaSetAvailable', 'message': 'ReplicaSet "cert-manager-cainjector-699b655b95" has successfully progressed.'}]}, 'apiVersion': 'apps/v1', 'kind': 'Deployment'})
ok: [127.0.0.1] => (item={'metadata': {'name': 'cert-manager-webhook', 'namespace': 'cert-manager', 'uid': 'e8cb8db1-a6f3-4c06-91bd-22a176f7f11e', 'resourceVersion': '769', 'generation': 1, 'creationTimestamp': '2025-10-01T12:21:47Z', 'labels': {'app': 'webhook', 'app.kubernetes.io/component': 'webhook', 'app.kubernetes.io/instance': 'cert-manager', 'app.kubernetes.io/name': 'webhook', 'app.kubernetes.io/version': 'v1.16.2'}, 'annotations': {'deployment.kubernetes.io/revision': '1', 'kubectl.kubernetes.io/last-applied-configuration': '{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"webhook","app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"webhook","app.kubernetes.io/version":"v1.16.2"},"name":"cert-manager-webhook","namespace":"cert-manager"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"webhook"}},"template":{"metadata":{"annotations":{"prometheus.io/path":"/metrics","prometheus.io/port":"9402","prometheus.io/scrape":"true"},"labels":{"app":"webhook","app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"webhook","app.kubernetes.io/version":"v1.16.2"}},"spec":{"containers":[{"args":["--v=2","--secure-port=10250","--dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)","--dynamic-serving-ca-secret-name=cert-manager-webhook-ca","--dynamic-serving-dns-names=cert-manager-webhook","--dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)","--dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE).svc"],"env":[{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"quay.io/jetstack/cert-manager-webhook:v1.16.2","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/livez","port":6080,"scheme":"HTTP"},"initialDelaySeconds":60,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"name":"cert-manager-webhook","ports":[{"containerPort":10250,"name":"https","protocol":"TCP"},{"containerPort":6080,"name":"healthcheck","protocol":"TCP"},{"containerPort":9402,"name":"http-metrics","protocol":"TCP"}],"readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/healthz","port":6080,"scheme":"HTTP"},"initialDelaySeconds":5,"periodSeconds":5,"successThreshold":1,"timeoutSeconds":1},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true}}],"enableServiceLinks":false,"nodeSelector":{"kubernetes.io/os":"linux"},"securityContext":{"runAsNonRoot":true,"seccompProfile":{"type":"RuntimeDefault"}},"serviceAccountName":"cert-manager-webhook"}}}}\n'}, 'managedFields': [{'manager': 'kubectl-client-side-apply', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:21:47Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'.': {}, 'f:kubectl.kubernetes.io/last-applied-configuration': {}}, 'f:labels': {'.': {}, 'f:app': {}, 'f:app.kubernetes.io/component': {}, 'f:app.kubernetes.io/instance': {}, 'f:app.kubernetes.io/name': {}, 'f:app.kubernetes.io/version': {}}}, 'f:spec': {'f:progressDeadlineSeconds': {}, 'f:replicas': {}, 'f:revisionHistoryLimit': {}, 'f:selector': {}, 'f:strategy': {'f:rollingUpdate': {'.': {}, 'f:maxSurge': {}, 'f:maxUnavailable': {}}, 'f:type': {}}, 'f:template': {'f:metadata': {'f:annotations': {'.': {}, 'f:prometheus.io/path': {}, 'f:prometheus.io/port': {}, 'f:prometheus.io/scrape': {}}, 'f:labels': {'.': {}, 'f:app': {}, 'f:app.kubernetes.io/component': {}, 'f:app.kubernetes.io/instance': {}, 'f:app.kubernetes.io/name': {}, 'f:app.kubernetes.io/version': {}}}, 'f:spec': {'f:containers': {'k:{"name":"cert-manager-webhook"}': {'.': {}, 'f:args': {}, 'f:env': {'.': {}, 'k:{"name":"POD_NAMESPACE"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}}, 'f:image': {}, 'f:imagePullPolicy': {}, 'f:livenessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:httpGet': {'.': {}, 'f:path': {}, 'f:port': {}, 'f:scheme': {}}, 'f:initialDelaySeconds': {}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:timeoutSeconds': {}}, 'f:name': {}, 'f:ports': {'.': {}, 'k:{"containerPort":6080,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:name': {}, 'f:protocol': {}}, 'k:{"containerPort":9402,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:name': {}, 'f:protocol': {}}, 'k:{"containerPort":10250,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:name': {}, 'f:protocol': {}}}, 'f:readinessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:httpGet': {'.': {}, 'f:path': {}, 'f:port': {}, 'f:scheme': {}}, 'f:initialDelaySeconds': {}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:timeoutSeconds': {}}, 'f:resources': {}, 'f:securityContext': {'.': {}, 'f:allowPrivilegeEscalation': {}, 'f:capabilities': {'.': {}, 'f:drop': {}}, 'f:readOnlyRootFilesystem': {}}, 'f:terminationMessagePath': {}, 'f:terminationMessagePolicy': {}}}, 'f:dnsPolicy': {}, 'f:enableServiceLinks': {}, 'f:nodeSelector': {}, 'f:restartPolicy': {}, 'f:schedulerName': {}, 'f:securityContext': {'.': {}, 'f:runAsNonRoot': {}, 'f:seccompProfile': {'.': {}, 'f:type': {}}}, 'f:serviceAccount': {}, 'f:serviceAccountName': {}, 'f:terminationGracePeriodSeconds': {}}}}}}, {'manager': 'kube-controller-manager', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:22:00Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'f:deployment.kubernetes.io/revision': {}}}, 'f:status': {'f:availableReplicas': {}, 'f:conditions': {'.': {}, 'k:{"type":"Available"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}, 'k:{"type":"Progressing"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}}, 'f:observedGeneration': {}, 'f:readyReplicas': {}, 'f:replicas': {}, 'f:updatedReplicas': {}}}, 'subresource': 'status'}]}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/component': 'webhook', 'app.kubernetes.io/instance': 'cert-manager', 'app.kubernetes.io/name': 'webhook'}}, 'template': {'metadata': {'labels': {'app': 'webhook', 'app.kubernetes.io/component': 'webhook', 'app.kubernetes.io/instance': 'cert-manager', 'app.kubernetes.io/name': 'webhook', 'app.kubernetes.io/version': 'v1.16.2'}, 'annotations': {'prometheus.io/path': '/metrics', 'prometheus.io/port': '9402', 'prometheus.io/scrape': 'true'}}, 'spec': {'containers': [{'name': 'cert-manager-webhook', 'image': 'quay.io/jetstack/cert-manager-webhook:v1.16.2', 'args': ['--v=2', '--secure-port=10250', '--dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)', '--dynamic-serving-ca-secret-name=cert-manager-webhook-ca', '--dynamic-serving-dns-names=cert-manager-webhook', '--dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)', '--dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE).svc'], 'ports': [{'name': 'https', 'containerPort': 10250, 'protocol': 'TCP'}, {'name': 'healthcheck', 'containerPort': 6080, 'protocol': 'TCP'}, {'name': 'http-metrics', 'containerPort': 9402, 'protocol': 'TCP'}], 'env': [{'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'metadata.namespace'}}}], 'resources': {}, 'livenessProbe': {'httpGet': {'path': '/livez', 'port': 6080, 'scheme': 'HTTP'}, 'initialDelaySeconds': 60, 'timeoutSeconds': 1, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 3}, 'readinessProbe': {'httpGet': {'path': '/healthz', 'port': 6080, 'scheme': 'HTTP'}, 'initialDelaySeconds': 5, 'timeoutSeconds': 1, 'periodSeconds': 5, 'successThreshold': 1, 'failureThreshold': 3}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'allowPrivilegeEscalation': False}}], 'restartPolicy': 'Always', 'terminationGracePeriodSeconds': 30, 'dnsPolicy': 'ClusterFirst', 'nodeSelector': {'kubernetes.io/os': 'linux'}, 'serviceAccountName': 'cert-manager-webhook', 'serviceAccount': 'cert-manager-webhook', 'securityContext': {'runAsNonRoot': True, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'schedulerName': 'default-scheduler', 'enableServiceLinks': False}}, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxUnavailable': '25%', 'maxSurge': '25%'}}, 'revisionHistoryLimit': 10, 'progressDeadlineSeconds': 600}, 'status': {'observedGeneration': 1, 'replicas': 1, 'updatedReplicas': 1, 'readyReplicas': 1, 'availableReplicas': 1, 'conditions': [{'type': 'Available', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:22:00Z', 'lastTransitionTime': '2025-10-01T12:22:00Z', 'reason': 'MinimumReplicasAvailable', 'message': 'Deployment has minimum availability.'}, {'type': 'Progressing', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:22:00Z', 'lastTransitionTime': '2025-10-01T12:21:47Z', 'reason': 'NewReplicaSetAvailable', 'message': 'ReplicaSet "cert-manager-webhook-758fc84d84" has successfully progressed.'}]}, 'apiVersion': 'apps/v1', 'kind': 'Deployment'})

TASK [bootstrap : Get deployment resources in namespace gitea] *****************
Wednesday 01 October 2025  12:32:26 +0000 (0:00:03.185)       0:02:58.546 ***** 
Wednesday 01 October 2025  12:32:26 +0000 (0:00:03.185)       0:02:58.545 ***** 
ok: [127.0.0.1]

TASK [bootstrap : Print deployment resources in namespace gitea] ***************
Wednesday 01 October 2025  12:32:27 +0000 (0:00:01.224)       0:02:59.771 ***** 
Wednesday 01 October 2025  12:32:27 +0000 (0:00:01.224)       0:02:59.770 ***** 
ok: [127.0.0.1] => {
    "deployment_list.resources": [
        {
            "apiVersion": "apps/v1",
            "kind": "Deployment",
            "metadata": {
                "annotations": {
                    "config.k8s.io/owning-inventory": "92017b6da029480ff1031766d0b7b831f7eaba8d-1759321800122182151",
                    "deployment.kubernetes.io/revision": "1",
                    "internal.kpt.dev/upstream-identifier": "apps|Deployment|gitea|gitea-memcached",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{\"config.k8s.io/owning-inventory\":\"92017b6da029480ff1031766d0b7b831f7eaba8d-1759321800122182151\",\"internal.kpt.dev/upstream-identifier\":\"apps|Deployment|gitea|gitea-memcached\"},\"labels\":{\"app.kubernetes.io/instance\":\"gitea\",\"app.kubernetes.io/name\":\"memcached\"},\"name\":\"gitea-memcached\",\"namespace\":\"gitea\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app.kubernetes.io/instance\":\"gitea\",\"app.kubernetes.io/name\":\"memcached\"}},\"strategy\":{\"rollingUpdate\":{},\"type\":\"RollingUpdate\"},\"template\":{\"metadata\":{\"annotations\":null,\"labels\":{\"app.kubernetes.io/instance\":\"gitea\",\"app.kubernetes.io/name\":\"memcached\"}},\"spec\":{\"affinity\":{\"nodeAffinity\":null,\"podAffinity\":null,\"podAntiAffinity\":{\"preferredDuringSchedulingIgnoredDuringExecution\":[{\"podAffinityTerm\":{\"labelSelector\":{\"matchLabels\":{\"app.kubernetes.io/instance\":\"gitea\",\"app.kubernetes.io/name\":\"memcached\"}},\"topologyKey\":\"kubernetes.io/hostname\"},\"weight\":1}]}},\"containers\":[{\"env\":[{\"name\":\"BITNAMI_DEBUG\",\"value\":\"false\"},{\"name\":\"MEMCACHED_PORT_NUMBER\",\"value\":\"11211\"}],\"image\":\"docker.io/bitnamilegacy/memcached:1.6.19-debian-11-r7\",\"imagePullPolicy\":\"IfNotPresent\",\"livenessProbe\":{\"failureThreshold\":6,\"initialDelaySeconds\":30,\"periodSeconds\":10,\"successThreshold\":1,\"tcpSocket\":{\"port\":\"memcache\"},\"timeoutSeconds\":5},\"name\":\"memcached\",\"ports\":[{\"containerPort\":11211,\"name\":\"memcache\"}],\"readinessProbe\":{\"failureThreshold\":6,\"initialDelaySeconds\":5,\"periodSeconds\":5,\"successThreshold\":1,\"tcpSocket\":{\"port\":\"memcache\"},\"timeoutSeconds\":3},\"resources\":{\"limits\":{},\"requests\":{\"cpu\":\"250m\",\"memory\":\"256Mi\"}},\"securityContext\":{\"runAsNonRoot\":true,\"runAsUser\":1001},\"volumeMounts\":[{\"mountPath\":\"/tmp\",\"name\":\"tmp\"}]}],\"securityContext\":{\"fsGroup\":1001},\"serviceAccountName\":\"default\",\"volumes\":[{\"emptyDir\":{},\"name\":\"tmp\"}]}}}}\n"
                },
                "creationTimestamp": "2025-10-01T12:30:01Z",
                "generation": 1,
                "labels": {
                    "app.kubernetes.io/instance": "gitea",
                    "app.kubernetes.io/name": "memcached"
                },
                "managedFields": [
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:config.k8s.io/owning-inventory": {},
                                    "f:internal.kpt.dev/upstream-identifier": {},
                                    "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:app.kubernetes.io/instance": {},
                                    "f:app.kubernetes.io/name": {}
                                }
                            },
                            "f:spec": {
                                "f:progressDeadlineSeconds": {},
                                "f:replicas": {},
                                "f:revisionHistoryLimit": {},
                                "f:selector": {},
                                "f:strategy": {
                                    "f:rollingUpdate": {
                                        ".": {},
                                        "f:maxSurge": {},
                                        "f:maxUnavailable": {}
                                    },
                                    "f:type": {}
                                },
                                "f:template": {
                                    "f:metadata": {
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/name": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:affinity": {
                                            ".": {},
                                            "f:podAntiAffinity": {
                                                ".": {},
                                                "f:preferredDuringSchedulingIgnoredDuringExecution": {}
                                            }
                                        },
                                        "f:containers": {
                                            "k:{\"name\":\"memcached\"}": {
                                                ".": {},
                                                "f:env": {
                                                    ".": {},
                                                    "k:{\"name\":\"BITNAMI_DEBUG\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:value": {}
                                                    },
                                                    "k:{\"name\":\"MEMCACHED_PORT_NUMBER\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:value": {}
                                                    }
                                                },
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:livenessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:initialDelaySeconds": {},
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:tcpSocket": {
                                                        ".": {},
                                                        "f:port": {}
                                                    },
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:name": {},
                                                "f:ports": {
                                                    ".": {},
                                                    "k:{\"containerPort\":11211,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    }
                                                },
                                                "f:readinessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:initialDelaySeconds": {},
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:tcpSocket": {
                                                        ".": {},
                                                        "f:port": {}
                                                    },
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:resources": {
                                                    ".": {},
                                                    "f:requests": {
                                                        ".": {},
                                                        "f:cpu": {},
                                                        "f:memory": {}
                                                    }
                                                },
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:runAsNonRoot": {},
                                                    "f:runAsUser": {}
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {},
                                                "f:volumeMounts": {
                                                    ".": {},
                                                    "k:{\"mountPath\":\"/tmp\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    }
                                                }
                                            }
                                        },
                                        "f:dnsPolicy": {},
                                        "f:restartPolicy": {},
                                        "f:schedulerName": {},
                                        "f:securityContext": {
                                            ".": {},
                                            "f:fsGroup": {}
                                        },
                                        "f:serviceAccount": {},
                                        "f:serviceAccountName": {},
                                        "f:terminationGracePeriodSeconds": {},
                                        "f:volumes": {
                                            ".": {},
                                            "k:{\"name\":\"tmp\"}": {
                                                ".": {},
                                                "f:emptyDir": {},
                                                "f:name": {}
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "manager": "kubectl",
                        "operation": "Update",
                        "time": "2025-10-01T12:30:01Z"
                    },
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    "f:deployment.kubernetes.io/revision": {}
                                }
                            },
                            "f:status": {
                                "f:availableReplicas": {},
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"Available\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Progressing\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:observedGeneration": {},
                                "f:readyReplicas": {},
                                "f:replicas": {},
                                "f:updatedReplicas": {}
                            }
                        },
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "subresource": "status",
                        "time": "2025-10-01T12:30:11Z"
                    }
                ],
                "name": "gitea-memcached",
                "namespace": "gitea",
                "resourceVersion": "2061",
                "uid": "0e9e9f53-e6d3-48d5-8ebc-0af2cd5df58c"
            },
            "spec": {
                "progressDeadlineSeconds": 600,
                "replicas": 1,
                "revisionHistoryLimit": 10,
                "selector": {
                    "matchLabels": {
                        "app.kubernetes.io/instance": "gitea",
                        "app.kubernetes.io/name": "memcached"
                    }
                },
                "strategy": {
                    "rollingUpdate": {
                        "maxSurge": "25%",
                        "maxUnavailable": "25%"
                    },
                    "type": "RollingUpdate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/instance": "gitea",
                            "app.kubernetes.io/name": "memcached"
                        }
                    },
                    "spec": {
                        "affinity": {
                            "podAntiAffinity": {
                                "preferredDuringSchedulingIgnoredDuringExecution": [
                                    {
                                        "podAffinityTerm": {
                                            "labelSelector": {
                                                "matchLabels": {
                                                    "app.kubernetes.io/instance": "gitea",
                                                    "app.kubernetes.io/name": "memcached"
                                                }
                                            },
                                            "topologyKey": "kubernetes.io/hostname"
                                        },
                                        "weight": 1
                                    }
                                ]
                            }
                        },
                        "containers": [
                            {
                                "env": [
                                    {
                                        "name": "BITNAMI_DEBUG",
                                        "value": "false"
                                    },
                                    {
                                        "name": "MEMCACHED_PORT_NUMBER",
                                        "value": "11211"
                                    }
                                ],
                                "image": "docker.io/bitnamilegacy/memcached:1.6.19-debian-11-r7",
                                "imagePullPolicy": "IfNotPresent",
                                "livenessProbe": {
                                    "failureThreshold": 6,
                                    "initialDelaySeconds": 30,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "tcpSocket": {
                                        "port": "memcache"
                                    },
                                    "timeoutSeconds": 5
                                },
                                "name": "memcached",
                                "ports": [
                                    {
                                        "containerPort": 11211,
                                        "name": "memcache",
                                        "protocol": "TCP"
                                    }
                                ],
                                "readinessProbe": {
                                    "failureThreshold": 6,
                                    "initialDelaySeconds": 5,
                                    "periodSeconds": 5,
                                    "successThreshold": 1,
                                    "tcpSocket": {
                                        "port": "memcache"
                                    },
                                    "timeoutSeconds": 3
                                },
                                "resources": {
                                    "requests": {
                                        "cpu": "250m",
                                        "memory": "256Mi"
                                    }
                                },
                                "securityContext": {
                                    "runAsNonRoot": true,
                                    "runAsUser": 1001
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/tmp",
                                        "name": "tmp"
                                    }
                                ]
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "restartPolicy": "Always",
                        "schedulerName": "default-scheduler",
                        "securityContext": {
                            "fsGroup": 1001
                        },
                        "serviceAccount": "default",
                        "serviceAccountName": "default",
                        "terminationGracePeriodSeconds": 30,
                        "volumes": [
                            {
                                "emptyDir": {},
                                "name": "tmp"
                            }
                        ]
                    }
                }
            },
            "status": {
                "availableReplicas": 1,
                "conditions": [
                    {
                        "lastTransitionTime": "2025-10-01T12:30:11Z",
                        "lastUpdateTime": "2025-10-01T12:30:11Z",
                        "message": "Deployment has minimum availability.",
                        "reason": "MinimumReplicasAvailable",
                        "status": "True",
                        "type": "Available"
                    },
                    {
                        "lastTransitionTime": "2025-10-01T12:30:01Z",
                        "lastUpdateTime": "2025-10-01T12:30:11Z",
                        "message": "ReplicaSet \"gitea-memcached-76df6656b8\" has successfully progressed.",
                        "reason": "NewReplicaSetAvailable",
                        "status": "True",
                        "type": "Progressing"
                    }
                ],
                "observedGeneration": 1,
                "readyReplicas": 1,
                "replicas": 1,
                "updatedReplicas": 1
            }
        }
    ]
}

TASK [bootstrap : Wait for deployments in namespace gitea] *********************
Wednesday 01 October 2025  12:32:27 +0000 (0:00:00.095)       0:02:59.866 ***** 
Wednesday 01 October 2025  12:32:27 +0000 (0:00:00.095)       0:02:59.866 ***** 
ok: [127.0.0.1] => (item={'metadata': {'name': 'gitea-memcached', 'namespace': 'gitea', 'uid': '0e9e9f53-e6d3-48d5-8ebc-0af2cd5df58c', 'resourceVersion': '2061', 'generation': 1, 'creationTimestamp': '2025-10-01T12:30:01Z', 'labels': {'app.kubernetes.io/instance': 'gitea', 'app.kubernetes.io/name': 'memcached'}, 'annotations': {'config.k8s.io/owning-inventory': '92017b6da029480ff1031766d0b7b831f7eaba8d-1759321800122182151', 'deployment.kubernetes.io/revision': '1', 'internal.kpt.dev/upstream-identifier': 'apps|Deployment|gitea|gitea-memcached', 'kubectl.kubernetes.io/last-applied-configuration': '{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"config.k8s.io/owning-inventory":"92017b6da029480ff1031766d0b7b831f7eaba8d-1759321800122182151","internal.kpt.dev/upstream-identifier":"apps|Deployment|gitea|gitea-memcached"},"labels":{"app.kubernetes.io/instance":"gitea","app.kubernetes.io/name":"memcached"},"name":"gitea-memcached","namespace":"gitea"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/instance":"gitea","app.kubernetes.io/name":"memcached"}},"strategy":{"rollingUpdate":{},"type":"RollingUpdate"},"template":{"metadata":{"annotations":null,"labels":{"app.kubernetes.io/instance":"gitea","app.kubernetes.io/name":"memcached"}},"spec":{"affinity":{"nodeAffinity":null,"podAffinity":null,"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/instance":"gitea","app.kubernetes.io/name":"memcached"}},"topologyKey":"kubernetes.io/hostname"},"weight":1}]}},"containers":[{"env":[{"name":"BITNAMI_DEBUG","value":"false"},{"name":"MEMCACHED_PORT_NUMBER","value":"11211"}],"image":"docker.io/bitnamilegacy/memcached:1.6.19-debian-11-r7","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":6,"initialDelaySeconds":30,"periodSeconds":10,"successThreshold":1,"tcpSocket":{"port":"memcache"},"timeoutSeconds":5},"name":"memcached","ports":[{"containerPort":11211,"name":"memcache"}],"readinessProbe":{"failureThreshold":6,"initialDelaySeconds":5,"periodSeconds":5,"successThreshold":1,"tcpSocket":{"port":"memcache"},"timeoutSeconds":3},"resources":{"limits":{},"requests":{"cpu":"250m","memory":"256Mi"}},"securityContext":{"runAsNonRoot":true,"runAsUser":1001},"volumeMounts":[{"mountPath":"/tmp","name":"tmp"}]}],"securityContext":{"fsGroup":1001},"serviceAccountName":"default","volumes":[{"emptyDir":{},"name":"tmp"}]}}}}\n'}, 'managedFields': [{'manager': 'kubectl', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:30:01Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'.': {}, 'f:config.k8s.io/owning-inventory': {}, 'f:internal.kpt.dev/upstream-identifier': {}, 'f:kubectl.kubernetes.io/last-applied-configuration': {}}, 'f:labels': {'.': {}, 'f:app.kubernetes.io/instance': {}, 'f:app.kubernetes.io/name': {}}}, 'f:spec': {'f:progressDeadlineSeconds': {}, 'f:replicas': {}, 'f:revisionHistoryLimit': {}, 'f:selector': {}, 'f:strategy': {'f:rollingUpdate': {'.': {}, 'f:maxSurge': {}, 'f:maxUnavailable': {}}, 'f:type': {}}, 'f:template': {'f:metadata': {'f:labels': {'.': {}, 'f:app.kubernetes.io/instance': {}, 'f:app.kubernetes.io/name': {}}}, 'f:spec': {'f:affinity': {'.': {}, 'f:podAntiAffinity': {'.': {}, 'f:preferredDuringSchedulingIgnoredDuringExecution': {}}}, 'f:containers': {'k:{"name":"memcached"}': {'.': {}, 'f:env': {'.': {}, 'k:{"name":"BITNAMI_DEBUG"}': {'.': {}, 'f:name': {}, 'f:value': {}}, 'k:{"name":"MEMCACHED_PORT_NUMBER"}': {'.': {}, 'f:name': {}, 'f:value': {}}}, 'f:image': {}, 'f:imagePullPolicy': {}, 'f:livenessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:initialDelaySeconds': {}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:tcpSocket': {'.': {}, 'f:port': {}}, 'f:timeoutSeconds': {}}, 'f:name': {}, 'f:ports': {'.': {}, 'k:{"containerPort":11211,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:name': {}, 'f:protocol': {}}}, 'f:readinessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:initialDelaySeconds': {}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:tcpSocket': {'.': {}, 'f:port': {}}, 'f:timeoutSeconds': {}}, 'f:resources': {'.': {}, 'f:requests': {'.': {}, 'f:cpu': {}, 'f:memory': {}}}, 'f:securityContext': {'.': {}, 'f:runAsNonRoot': {}, 'f:runAsUser': {}}, 'f:terminationMessagePath': {}, 'f:terminationMessagePolicy': {}, 'f:volumeMounts': {'.': {}, 'k:{"mountPath":"/tmp"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}}}}, 'f:dnsPolicy': {}, 'f:restartPolicy': {}, 'f:schedulerName': {}, 'f:securityContext': {'.': {}, 'f:fsGroup': {}}, 'f:serviceAccount': {}, 'f:serviceAccountName': {}, 'f:terminationGracePeriodSeconds': {}, 'f:volumes': {'.': {}, 'k:{"name":"tmp"}': {'.': {}, 'f:emptyDir': {}, 'f:name': {}}}}}}}}, {'manager': 'kube-controller-manager', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:30:11Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'f:deployment.kubernetes.io/revision': {}}}, 'f:status': {'f:availableReplicas': {}, 'f:conditions': {'.': {}, 'k:{"type":"Available"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}, 'k:{"type":"Progressing"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}}, 'f:observedGeneration': {}, 'f:readyReplicas': {}, 'f:replicas': {}, 'f:updatedReplicas': {}}}, 'subresource': 'status'}]}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/instance': 'gitea', 'app.kubernetes.io/name': 'memcached'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/instance': 'gitea', 'app.kubernetes.io/name': 'memcached'}}, 'spec': {'volumes': [{'name': 'tmp', 'emptyDir': {}}], 'containers': [{'name': 'memcached', 'image': 'docker.io/bitnamilegacy/memcached:1.6.19-debian-11-r7', 'ports': [{'name': 'memcache', 'containerPort': 11211, 'protocol': 'TCP'}], 'env': [{'name': 'BITNAMI_DEBUG', 'value': 'false'}, {'name': 'MEMCACHED_PORT_NUMBER', 'value': '11211'}], 'resources': {'requests': {'cpu': '250m', 'memory': '256Mi'}}, 'volumeMounts': [{'name': 'tmp', 'mountPath': '/tmp'}], 'livenessProbe': {'tcpSocket': {'port': 'memcache'}, 'initialDelaySeconds': 30, 'timeoutSeconds': 5, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 6}, 'readinessProbe': {'tcpSocket': {'port': 'memcache'}, 'initialDelaySeconds': 5, 'timeoutSeconds': 3, 'periodSeconds': 5, 'successThreshold': 1, 'failureThreshold': 6}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 1001, 'runAsNonRoot': True}}], 'restartPolicy': 'Always', 'terminationGracePeriodSeconds': 30, 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'default', 'serviceAccount': 'default', 'securityContext': {'fsGroup': 1001}, 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 1, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/instance': 'gitea', 'app.kubernetes.io/name': 'memcached'}}, 'topologyKey': 'kubernetes.io/hostname'}}]}}, 'schedulerName': 'default-scheduler'}}, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxUnavailable': '25%', 'maxSurge': '25%'}}, 'revisionHistoryLimit': 10, 'progressDeadlineSeconds': 600}, 'status': {'observedGeneration': 1, 'replicas': 1, 'updatedReplicas': 1, 'readyReplicas': 1, 'availableReplicas': 1, 'conditions': [{'type': 'Available', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:30:11Z', 'lastTransitionTime': '2025-10-01T12:30:11Z', 'reason': 'MinimumReplicasAvailable', 'message': 'Deployment has minimum availability.'}, {'type': 'Progressing', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:30:11Z', 'lastTransitionTime': '2025-10-01T12:30:01Z', 'reason': 'NewReplicaSetAvailable', 'message': 'ReplicaSet "gitea-memcached-76df6656b8" has successfully progressed.'}]}, 'apiVersion': 'apps/v1', 'kind': 'Deployment'})

TASK [bootstrap : Get deployment resources in namespace backend-system] ********
Wednesday 01 October 2025  12:32:28 +0000 (0:00:01.165)       0:03:01.031 ***** 
Wednesday 01 October 2025  12:32:28 +0000 (0:00:01.165)       0:03:01.031 ***** 
ok: [127.0.0.1]

TASK [bootstrap : Print deployment resources in namespace backend-system] ******
Wednesday 01 October 2025  12:32:30 +0000 (0:00:01.137)       0:03:02.169 ***** 
Wednesday 01 October 2025  12:32:30 +0000 (0:00:01.137)       0:03:02.169 ***** 
ok: [127.0.0.1] => {
    "deployment_list.resources": [
        {
            "apiVersion": "apps/v1",
            "kind": "Deployment",
            "metadata": {
                "annotations": {
                    "config.k8s.io/owning-inventory": "5ab329349251c3cc31cf2ed7cd0818f07c77c86d-1759321805930066348",
                    "deployment.kubernetes.io/revision": "1",
                    "internal.kpt.dev/upstream-identifier": "apps|Deployment|backend-system|resource-backend-controller",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{\"config.k8s.io/owning-inventory\":\"5ab329349251c3cc31cf2ed7cd0818f07c77c86d-1759321805930066348\",\"internal.kpt.dev/upstream-identifier\":\"apps|Deployment|backend-system|resource-backend-controller\"},\"name\":\"resource-backend-controller\",\"namespace\":\"backend-system\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"fn.kptgen.dev/controller\":\"resource-backend-controller\",\"fn.kptgen.dev/grpc\":\"resource-backend-controller\"}},\"strategy\":{},\"template\":{\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"tbd\",\"app.kubernetes.io/instance\":\"tbd\",\"app.kubernetes.io/managed-by\":\"kpt\",\"app.kubernetes.io/name\":\"resource-backend\",\"app.kubernetes.io/part-of\":\"resource-backend\",\"app.kubernetes.io/version\":\"tbd\",\"fn.kptgen.dev/controller\":\"resource-backend-controller\",\"fn.kptgen.dev/grpc\":\"resource-backend-controller\"},\"name\":\"resource-backend-controller\",\"namespace\":\"backend-system\"},\"spec\":{\"containers\":[{\"args\":[\"--secure-listen-address=0.0.0.0:8443\",\"--upstream=http://127.0.0.1:8080/\",\"--logtostderr=true\",\"--v=10\"],\"image\":\"gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0\",\"name\":\"kube-rbac-proxy\",\"ports\":[{\"containerPort\":8443,\"name\":\"https\"}],\"resources\":{}},{\"args\":[\"--health-probe-bind-address=:8081\",\"--metrics-bind-address=127.0.0.1:8080\",\"--leader-elect\"],\"command\":[\"/manager\"],\"env\":[{\"name\":\"POD_NAMESPACE\",\"valueFrom\":{\"fieldRef\":{\"apiVersion\":\"v1\",\"fieldPath\":\"metadata.namespace\"}}},{\"name\":\"POD_IP\",\"valueFrom\":{\"fieldRef\":{\"apiVersion\":\"v1\",\"fieldPath\":\"status.podIP\"}}},{\"name\":\"POD_NAME\",\"valueFrom\":{\"fieldRef\":{\"apiVersion\":\"v1\",\"fieldPath\":\"metadata.name\"}}},{\"name\":\"NODE_NAME\",\"valueFrom\":{\"fieldRef\":{\"apiVersion\":\"v1\",\"fieldPath\":\"spec.nodeName\"}}},{\"name\":\"NODE_IP\",\"valueFrom\":{\"fieldRef\":{\"apiVersion\":\"v1\",\"fieldPath\":\"status.hostIP\"}}},{\"name\":\"RESOURCE_BACKEND\",\"value\":\"127.0.0.1:9999\"},{\"name\":\"ENABLE_IPCLAIM\",\"value\":\"true\"},{\"name\":\"ENABLE_NETWORKINSTANCE\",\"value\":\"true\"},{\"name\":\"ENABLE_IPPREFIX\",\"value\":\"true\"},{\"name\":\"ENABLE_VLANCLAIM\",\"value\":\"true\"},{\"name\":\"ENABLE_VLANINDEX\",\"value\":\"true\"},{\"name\":\"ENABLE_VLAN\",\"value\":\"true\"},{\"name\":\"ENABLE_RAWTOPOLOGIES\",\"value\":\"true\"}],\"image\":\"docker.io/nephio/resource-backend-controller:latest\",\"livenessProbe\":{\"httpGet\":{\"path\":\"/healthz\",\"port\":8081},\"initialDelaySeconds\":15,\"periodSeconds\":20},\"name\":\"controller\",\"readinessProbe\":{\"httpGet\":{\"path\":\"/readyz\",\"port\":8081},\"initialDelaySeconds\":5,\"periodSeconds\":10},\"resources\":{\"limits\":{\"cpu\":\"500m\",\"memory\":\"128Mi\"},\"requests\":{\"cpu\":\"10m\",\"memory\":\"64Mi\"}},\"securityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]}}}],\"serviceAccountName\":\"resource-backend-controller\"}}},\"status\":{}}\n"
                },
                "creationTimestamp": "2025-10-01T12:30:07Z",
                "generation": 1,
                "managedFields": [
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:config.k8s.io/owning-inventory": {},
                                    "f:internal.kpt.dev/upstream-identifier": {},
                                    "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                }
                            },
                            "f:spec": {
                                "f:progressDeadlineSeconds": {},
                                "f:replicas": {},
                                "f:revisionHistoryLimit": {},
                                "f:selector": {},
                                "f:strategy": {
                                    "f:rollingUpdate": {
                                        ".": {},
                                        "f:maxSurge": {},
                                        "f:maxUnavailable": {}
                                    },
                                    "f:type": {}
                                },
                                "f:template": {
                                    "f:metadata": {
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:app.kubernetes.io/version": {},
                                            "f:fn.kptgen.dev/controller": {},
                                            "f:fn.kptgen.dev/grpc": {}
                                        },
                                        "f:name": {},
                                        "f:namespace": {}
                                    },
                                    "f:spec": {
                                        "f:containers": {
                                            "k:{\"name\":\"controller\"}": {
                                                ".": {},
                                                "f:args": {},
                                                "f:command": {},
                                                "f:env": {
                                                    ".": {},
                                                    "k:{\"name\":\"ENABLE_IPCLAIM\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:value": {}
                                                    },
                                                    "k:{\"name\":\"ENABLE_IPPREFIX\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:value": {}
                                                    },
                                                    "k:{\"name\":\"ENABLE_NETWORKINSTANCE\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:value": {}
                                                    },
                                                    "k:{\"name\":\"ENABLE_RAWTOPOLOGIES\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:value": {}
                                                    },
                                                    "k:{\"name\":\"ENABLE_VLAN\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:value": {}
                                                    },
                                                    "k:{\"name\":\"ENABLE_VLANCLAIM\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:value": {}
                                                    },
                                                    "k:{\"name\":\"ENABLE_VLANINDEX\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:value": {}
                                                    },
                                                    "k:{\"name\":\"NODE_IP\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"NODE_NAME\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"POD_IP\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"POD_NAME\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"POD_NAMESPACE\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"RESOURCE_BACKEND\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:value": {}
                                                    }
                                                },
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:livenessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:initialDelaySeconds": {},
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:name": {},
                                                "f:readinessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:initialDelaySeconds": {},
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:resources": {
                                                    ".": {},
                                                    "f:limits": {
                                                        ".": {},
                                                        "f:cpu": {},
                                                        "f:memory": {}
                                                    },
                                                    "f:requests": {
                                                        ".": {},
                                                        "f:cpu": {},
                                                        "f:memory": {}
                                                    }
                                                },
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:allowPrivilegeEscalation": {},
                                                    "f:capabilities": {
                                                        ".": {},
                                                        "f:drop": {}
                                                    }
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {}
                                            },
                                            "k:{\"name\":\"kube-rbac-proxy\"}": {
                                                ".": {},
                                                "f:args": {},
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:name": {},
                                                "f:ports": {
                                                    ".": {},
                                                    "k:{\"containerPort\":8443,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    }
                                                },
                                                "f:resources": {},
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {}
                                            }
                                        },
                                        "f:dnsPolicy": {},
                                        "f:restartPolicy": {},
                                        "f:schedulerName": {},
                                        "f:securityContext": {},
                                        "f:serviceAccount": {},
                                        "f:serviceAccountName": {},
                                        "f:terminationGracePeriodSeconds": {}
                                    }
                                }
                            }
                        },
                        "manager": "kubectl",
                        "operation": "Update",
                        "time": "2025-10-01T12:30:07Z"
                    },
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    "f:deployment.kubernetes.io/revision": {}
                                }
                            },
                            "f:status": {
                                "f:availableReplicas": {},
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"Available\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Progressing\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:observedGeneration": {},
                                "f:readyReplicas": {},
                                "f:replicas": {},
                                "f:updatedReplicas": {}
                            }
                        },
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "subresource": "status",
                        "time": "2025-10-01T12:30:24Z"
                    }
                ],
                "name": "resource-backend-controller",
                "namespace": "backend-system",
                "resourceVersion": "2192",
                "uid": "fdcd20a4-8080-4c69-a86e-7166dea3a7fc"
            },
            "spec": {
                "progressDeadlineSeconds": 600,
                "replicas": 1,
                "revisionHistoryLimit": 10,
                "selector": {
                    "matchLabels": {
                        "fn.kptgen.dev/controller": "resource-backend-controller",
                        "fn.kptgen.dev/grpc": "resource-backend-controller"
                    }
                },
                "strategy": {
                    "rollingUpdate": {
                        "maxSurge": "25%",
                        "maxUnavailable": "25%"
                    },
                    "type": "RollingUpdate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "tbd",
                            "app.kubernetes.io/instance": "tbd",
                            "app.kubernetes.io/managed-by": "kpt",
                            "app.kubernetes.io/name": "resource-backend",
                            "app.kubernetes.io/part-of": "resource-backend",
                            "app.kubernetes.io/version": "tbd",
                            "fn.kptgen.dev/controller": "resource-backend-controller",
                            "fn.kptgen.dev/grpc": "resource-backend-controller"
                        },
                        "name": "resource-backend-controller",
                        "namespace": "backend-system"
                    },
                    "spec": {
                        "containers": [
                            {
                                "args": [
                                    "--secure-listen-address=0.0.0.0:8443",
                                    "--upstream=http://127.0.0.1:8080/",
                                    "--logtostderr=true",
                                    "--v=10"
                                ],
                                "image": "gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0",
                                "imagePullPolicy": "IfNotPresent",
                                "name": "kube-rbac-proxy",
                                "ports": [
                                    {
                                        "containerPort": 8443,
                                        "name": "https",
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {},
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File"
                            },
                            {
                                "args": [
                                    "--health-probe-bind-address=:8081",
                                    "--metrics-bind-address=127.0.0.1:8080",
                                    "--leader-elect"
                                ],
                                "command": [
                                    "/manager"
                                ],
                                "env": [
                                    {
                                        "name": "POD_NAMESPACE",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POD_IP",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "status.podIP"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POD_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.name"
                                            }
                                        }
                                    },
                                    {
                                        "name": "NODE_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "spec.nodeName"
                                            }
                                        }
                                    },
                                    {
                                        "name": "NODE_IP",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "status.hostIP"
                                            }
                                        }
                                    },
                                    {
                                        "name": "RESOURCE_BACKEND",
                                        "value": "127.0.0.1:9999"
                                    },
                                    {
                                        "name": "ENABLE_IPCLAIM",
                                        "value": "true"
                                    },
                                    {
                                        "name": "ENABLE_NETWORKINSTANCE",
                                        "value": "true"
                                    },
                                    {
                                        "name": "ENABLE_IPPREFIX",
                                        "value": "true"
                                    },
                                    {
                                        "name": "ENABLE_VLANCLAIM",
                                        "value": "true"
                                    },
                                    {
                                        "name": "ENABLE_VLANINDEX",
                                        "value": "true"
                                    },
                                    {
                                        "name": "ENABLE_VLAN",
                                        "value": "true"
                                    },
                                    {
                                        "name": "ENABLE_RAWTOPOLOGIES",
                                        "value": "true"
                                    }
                                ],
                                "image": "docker.io/nephio/resource-backend-controller:latest",
                                "imagePullPolicy": "Always",
                                "livenessProbe": {
                                    "failureThreshold": 3,
                                    "httpGet": {
                                        "path": "/healthz",
                                        "port": 8081,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 15,
                                    "periodSeconds": 20,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 1
                                },
                                "name": "controller",
                                "readinessProbe": {
                                    "failureThreshold": 3,
                                    "httpGet": {
                                        "path": "/readyz",
                                        "port": 8081,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 1
                                },
                                "resources": {
                                    "limits": {
                                        "cpu": "500m",
                                        "memory": "128Mi"
                                    },
                                    "requests": {
                                        "cpu": "10m",
                                        "memory": "64Mi"
                                    }
                                },
                                "securityContext": {
                                    "allowPrivilegeEscalation": false,
                                    "capabilities": {
                                        "drop": [
                                            "ALL"
                                        ]
                                    }
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File"
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "restartPolicy": "Always",
                        "schedulerName": "default-scheduler",
                        "securityContext": {},
                        "serviceAccount": "resource-backend-controller",
                        "serviceAccountName": "resource-backend-controller",
                        "terminationGracePeriodSeconds": 30
                    }
                }
            },
            "status": {
                "availableReplicas": 1,
                "conditions": [
                    {
                        "lastTransitionTime": "2025-10-01T12:30:24Z",
                        "lastUpdateTime": "2025-10-01T12:30:24Z",
                        "message": "Deployment has minimum availability.",
                        "reason": "MinimumReplicasAvailable",
                        "status": "True",
                        "type": "Available"
                    },
                    {
                        "lastTransitionTime": "2025-10-01T12:30:07Z",
                        "lastUpdateTime": "2025-10-01T12:30:24Z",
                        "message": "ReplicaSet \"resource-backend-controller-68f97f586f\" has successfully progressed.",
                        "reason": "NewReplicaSetAvailable",
                        "status": "True",
                        "type": "Progressing"
                    }
                ],
                "observedGeneration": 1,
                "readyReplicas": 1,
                "replicas": 1,
                "updatedReplicas": 1
            }
        }
    ]
}

TASK [bootstrap : Wait for deployments in namespace backend-system] ************
Wednesday 01 October 2025  12:32:30 +0000 (0:00:00.103)       0:03:02.273 ***** 
Wednesday 01 October 2025  12:32:30 +0000 (0:00:00.103)       0:03:02.273 ***** 
ok: [127.0.0.1] => (item={'metadata': {'name': 'resource-backend-controller', 'namespace': 'backend-system', 'uid': 'fdcd20a4-8080-4c69-a86e-7166dea3a7fc', 'resourceVersion': '2192', 'generation': 1, 'creationTimestamp': '2025-10-01T12:30:07Z', 'annotations': {'config.k8s.io/owning-inventory': '5ab329349251c3cc31cf2ed7cd0818f07c77c86d-1759321805930066348', 'deployment.kubernetes.io/revision': '1', 'internal.kpt.dev/upstream-identifier': 'apps|Deployment|backend-system|resource-backend-controller', 'kubectl.kubernetes.io/last-applied-configuration': '{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"config.k8s.io/owning-inventory":"5ab329349251c3cc31cf2ed7cd0818f07c77c86d-1759321805930066348","internal.kpt.dev/upstream-identifier":"apps|Deployment|backend-system|resource-backend-controller"},"name":"resource-backend-controller","namespace":"backend-system"},"spec":{"replicas":1,"selector":{"matchLabels":{"fn.kptgen.dev/controller":"resource-backend-controller","fn.kptgen.dev/grpc":"resource-backend-controller"}},"strategy":{},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"tbd","app.kubernetes.io/instance":"tbd","app.kubernetes.io/managed-by":"kpt","app.kubernetes.io/name":"resource-backend","app.kubernetes.io/part-of":"resource-backend","app.kubernetes.io/version":"tbd","fn.kptgen.dev/controller":"resource-backend-controller","fn.kptgen.dev/grpc":"resource-backend-controller"},"name":"resource-backend-controller","namespace":"backend-system"},"spec":{"containers":[{"args":["--secure-listen-address=0.0.0.0:8443","--upstream=http://127.0.0.1:8080/","--logtostderr=true","--v=10"],"image":"gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0","name":"kube-rbac-proxy","ports":[{"containerPort":8443,"name":"https"}],"resources":{}},{"args":["--health-probe-bind-address=:8081","--metrics-bind-address=127.0.0.1:8080","--leader-elect"],"command":["/manager"],"env":[{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}},{"name":"POD_IP","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"status.podIP"}}},{"name":"POD_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.name"}}},{"name":"NODE_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"spec.nodeName"}}},{"name":"NODE_IP","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"status.hostIP"}}},{"name":"RESOURCE_BACKEND","value":"127.0.0.1:9999"},{"name":"ENABLE_IPCLAIM","value":"true"},{"name":"ENABLE_NETWORKINSTANCE","value":"true"},{"name":"ENABLE_IPPREFIX","value":"true"},{"name":"ENABLE_VLANCLAIM","value":"true"},{"name":"ENABLE_VLANINDEX","value":"true"},{"name":"ENABLE_VLAN","value":"true"},{"name":"ENABLE_RAWTOPOLOGIES","value":"true"}],"image":"docker.io/nephio/resource-backend-controller:latest","livenessProbe":{"httpGet":{"path":"/healthz","port":8081},"initialDelaySeconds":15,"periodSeconds":20},"name":"controller","readinessProbe":{"httpGet":{"path":"/readyz","port":8081},"initialDelaySeconds":5,"periodSeconds":10},"resources":{"limits":{"cpu":"500m","memory":"128Mi"},"requests":{"cpu":"10m","memory":"64Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]}}}],"serviceAccountName":"resource-backend-controller"}}},"status":{}}\n'}, 'managedFields': [{'manager': 'kubectl', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:30:07Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'.': {}, 'f:config.k8s.io/owning-inventory': {}, 'f:internal.kpt.dev/upstream-identifier': {}, 'f:kubectl.kubernetes.io/last-applied-configuration': {}}}, 'f:spec': {'f:progressDeadlineSeconds': {}, 'f:replicas': {}, 'f:revisionHistoryLimit': {}, 'f:selector': {}, 'f:strategy': {'f:rollingUpdate': {'.': {}, 'f:maxSurge': {}, 'f:maxUnavailable': {}}, 'f:type': {}}, 'f:template': {'f:metadata': {'f:labels': {'.': {}, 'f:app.kubernetes.io/component': {}, 'f:app.kubernetes.io/instance': {}, 'f:app.kubernetes.io/managed-by': {}, 'f:app.kubernetes.io/name': {}, 'f:app.kubernetes.io/part-of': {}, 'f:app.kubernetes.io/version': {}, 'f:fn.kptgen.dev/controller': {}, 'f:fn.kptgen.dev/grpc': {}}, 'f:name': {}, 'f:namespace': {}}, 'f:spec': {'f:containers': {'k:{"name":"controller"}': {'.': {}, 'f:args': {}, 'f:command': {}, 'f:env': {'.': {}, 'k:{"name":"ENABLE_IPCLAIM"}': {'.': {}, 'f:name': {}, 'f:value': {}}, 'k:{"name":"ENABLE_IPPREFIX"}': {'.': {}, 'f:name': {}, 'f:value': {}}, 'k:{"name":"ENABLE_NETWORKINSTANCE"}': {'.': {}, 'f:name': {}, 'f:value': {}}, 'k:{"name":"ENABLE_RAWTOPOLOGIES"}': {'.': {}, 'f:name': {}, 'f:value': {}}, 'k:{"name":"ENABLE_VLAN"}': {'.': {}, 'f:name': {}, 'f:value': {}}, 'k:{"name":"ENABLE_VLANCLAIM"}': {'.': {}, 'f:name': {}, 'f:value': {}}, 'k:{"name":"ENABLE_VLANINDEX"}': {'.': {}, 'f:name': {}, 'f:value': {}}, 'k:{"name":"NODE_IP"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}, 'k:{"name":"NODE_NAME"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}, 'k:{"name":"POD_IP"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}, 'k:{"name":"POD_NAME"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}, 'k:{"name":"POD_NAMESPACE"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}, 'k:{"name":"RESOURCE_BACKEND"}': {'.': {}, 'f:name': {}, 'f:value': {}}}, 'f:image': {}, 'f:imagePullPolicy': {}, 'f:livenessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:httpGet': {'.': {}, 'f:path': {}, 'f:port': {}, 'f:scheme': {}}, 'f:initialDelaySeconds': {}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:timeoutSeconds': {}}, 'f:name': {}, 'f:readinessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:httpGet': {'.': {}, 'f:path': {}, 'f:port': {}, 'f:scheme': {}}, 'f:initialDelaySeconds': {}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:timeoutSeconds': {}}, 'f:resources': {'.': {}, 'f:limits': {'.': {}, 'f:cpu': {}, 'f:memory': {}}, 'f:requests': {'.': {}, 'f:cpu': {}, 'f:memory': {}}}, 'f:securityContext': {'.': {}, 'f:allowPrivilegeEscalation': {}, 'f:capabilities': {'.': {}, 'f:drop': {}}}, 'f:terminationMessagePath': {}, 'f:terminationMessagePolicy': {}}, 'k:{"name":"kube-rbac-proxy"}': {'.': {}, 'f:args': {}, 'f:image': {}, 'f:imagePullPolicy': {}, 'f:name': {}, 'f:ports': {'.': {}, 'k:{"containerPort":8443,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:name': {}, 'f:protocol': {}}}, 'f:resources': {}, 'f:terminationMessagePath': {}, 'f:terminationMessagePolicy': {}}}, 'f:dnsPolicy': {}, 'f:restartPolicy': {}, 'f:schedulerName': {}, 'f:securityContext': {}, 'f:serviceAccount': {}, 'f:serviceAccountName': {}, 'f:terminationGracePeriodSeconds': {}}}}}}, {'manager': 'kube-controller-manager', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:30:24Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'f:deployment.kubernetes.io/revision': {}}}, 'f:status': {'f:availableReplicas': {}, 'f:conditions': {'.': {}, 'k:{"type":"Available"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}, 'k:{"type":"Progressing"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}}, 'f:observedGeneration': {}, 'f:readyReplicas': {}, 'f:replicas': {}, 'f:updatedReplicas': {}}}, 'subresource': 'status'}]}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'fn.kptgen.dev/controller': 'resource-backend-controller', 'fn.kptgen.dev/grpc': 'resource-backend-controller'}}, 'template': {'metadata': {'name': 'resource-backend-controller', 'namespace': 'backend-system', 'labels': {'app.kubernetes.io/component': 'tbd', 'app.kubernetes.io/instance': 'tbd', 'app.kubernetes.io/managed-by': 'kpt', 'app.kubernetes.io/name': 'resource-backend', 'app.kubernetes.io/part-of': 'resource-backend', 'app.kubernetes.io/version': 'tbd', 'fn.kptgen.dev/controller': 'resource-backend-controller', 'fn.kptgen.dev/grpc': 'resource-backend-controller'}}, 'spec': {'containers': [{'name': 'kube-rbac-proxy', 'image': 'gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0', 'args': ['--secure-listen-address=0.0.0.0:8443', '--upstream=http://127.0.0.1:8080/', '--logtostderr=true', '--v=10'], 'ports': [{'name': 'https', 'containerPort': 8443, 'protocol': 'TCP'}], 'resources': {}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'IfNotPresent'}, {'name': 'controller', 'image': 'docker.io/nephio/resource-backend-controller:latest', 'command': ['/manager'], 'args': ['--health-probe-bind-address=:8081', '--metrics-bind-address=127.0.0.1:8080', '--leader-elect'], 'env': [{'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'status.podIP'}}}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'metadata.name'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'spec.nodeName'}}}, {'name': 'NODE_IP', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'status.hostIP'}}}, {'name': 'RESOURCE_BACKEND', 'value': '127.0.0.1:9999'}, {'name': 'ENABLE_IPCLAIM', 'value': 'true'}, {'name': 'ENABLE_NETWORKINSTANCE', 'value': 'true'}, {'name': 'ENABLE_IPPREFIX', 'value': 'true'}, {'name': 'ENABLE_VLANCLAIM', 'value': 'true'}, {'name': 'ENABLE_VLANINDEX', 'value': 'true'}, {'name': 'ENABLE_VLAN', 'value': 'true'}, {'name': 'ENABLE_RAWTOPOLOGIES', 'value': 'true'}], 'resources': {'limits': {'cpu': '500m', 'memory': '128Mi'}, 'requests': {'cpu': '10m', 'memory': '64Mi'}}, 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 8081, 'scheme': 'HTTP'}, 'initialDelaySeconds': 15, 'timeoutSeconds': 1, 'periodSeconds': 20, 'successThreshold': 1, 'failureThreshold': 3}, 'readinessProbe': {'httpGet': {'path': '/readyz', 'port': 8081, 'scheme': 'HTTP'}, 'initialDelaySeconds': 5, 'timeoutSeconds': 1, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 3}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'Always', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'allowPrivilegeEscalation': False}}], 'restartPolicy': 'Always', 'terminationGracePeriodSeconds': 30, 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'resource-backend-controller', 'serviceAccount': 'resource-backend-controller', 'securityContext': {}, 'schedulerName': 'default-scheduler'}}, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxUnavailable': '25%', 'maxSurge': '25%'}}, 'revisionHistoryLimit': 10, 'progressDeadlineSeconds': 600}, 'status': {'observedGeneration': 1, 'replicas': 1, 'updatedReplicas': 1, 'readyReplicas': 1, 'availableReplicas': 1, 'conditions': [{'type': 'Available', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:30:24Z', 'lastTransitionTime': '2025-10-01T12:30:24Z', 'reason': 'MinimumReplicasAvailable', 'message': 'Deployment has minimum availability.'}, {'type': 'Progressing', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:30:24Z', 'lastTransitionTime': '2025-10-01T12:30:07Z', 'reason': 'NewReplicaSetAvailable', 'message': 'ReplicaSet "resource-backend-controller-68f97f586f" has successfully progressed.'}]}, 'apiVersion': 'apps/v1', 'kind': 'Deployment'})

TASK [bootstrap : Get deployment resources in namespace metallb-system] ********
Wednesday 01 October 2025  12:32:31 +0000 (0:00:01.152)       0:03:03.426 ***** 
Wednesday 01 October 2025  12:32:31 +0000 (0:00:01.152)       0:03:03.425 ***** 
ok: [127.0.0.1]

TASK [bootstrap : Print deployment resources in namespace metallb-system] ******
Wednesday 01 October 2025  12:32:32 +0000 (0:00:00.902)       0:03:04.329 ***** 
Wednesday 01 October 2025  12:32:32 +0000 (0:00:00.902)       0:03:04.328 ***** 
ok: [127.0.0.1] => {
    "deployment_list.resources": [
        {
            "apiVersion": "apps/v1",
            "kind": "Deployment",
            "metadata": {
                "annotations": {
                    "config.k8s.io/owning-inventory": "6141cab47f34edb549bd2362705771b611218b90-1759321814108664618",
                    "deployment.kubernetes.io/revision": "1",
                    "internal.kpt.dev/upstream-identifier": "apps|Deployment|metallb-system|controller",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{\"config.k8s.io/owning-inventory\":\"6141cab47f34edb549bd2362705771b611218b90-1759321814108664618\",\"internal.kpt.dev/upstream-identifier\":\"apps|Deployment|metallb-system|controller\"},\"labels\":{\"app\":\"metallb\",\"component\":\"controller\"},\"name\":\"controller\",\"namespace\":\"metallb-system\"},\"spec\":{\"revisionHistoryLimit\":3,\"selector\":{\"matchLabels\":{\"app\":\"metallb\",\"component\":\"controller\"}},\"template\":{\"metadata\":{\"annotations\":{\"prometheus.io/port\":\"7472\",\"prometheus.io/scrape\":\"true\"},\"labels\":{\"app\":\"metallb\",\"component\":\"controller\"}},\"spec\":{\"containers\":[{\"args\":[\"--port=7472\",\"--log-level=info\"],\"env\":[{\"name\":\"METALLB_ML_SECRET_NAME\",\"value\":\"memberlist\"},{\"name\":\"METALLB_DEPLOYMENT\",\"value\":\"controller\"}],\"image\":\"quay.io/metallb/controller:v0.13.9\",\"livenessProbe\":{\"failureThreshold\":3,\"httpGet\":{\"path\":\"/metrics\",\"port\":\"monitoring\"},\"initialDelaySeconds\":10,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":1},\"name\":\"controller\",\"ports\":[{\"containerPort\":7472,\"name\":\"monitoring\"},{\"containerPort\":9443,\"name\":\"webhook-server\",\"protocol\":\"TCP\"}],\"readinessProbe\":{\"failureThreshold\":3,\"httpGet\":{\"path\":\"/metrics\",\"port\":\"monitoring\"},\"initialDelaySeconds\":10,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":1},\"securityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"all\"]},\"readOnlyRootFilesystem\":true},\"volumeMounts\":[{\"mountPath\":\"/tmp/k8s-webhook-server/serving-certs\",\"name\":\"cert\",\"readOnly\":true}]}],\"nodeSelector\":{\"kubernetes.io/os\":\"linux\"},\"securityContext\":{\"fsGroup\":65534,\"runAsNonRoot\":true,\"runAsUser\":65534},\"serviceAccountName\":\"controller\",\"terminationGracePeriodSeconds\":0,\"volumes\":[{\"name\":\"cert\",\"secret\":{\"defaultMode\":420,\"secretName\":\"webhook-server-cert\"}}]}}}}\n"
                },
                "creationTimestamp": "2025-10-01T12:30:15Z",
                "generation": 1,
                "labels": {
                    "app": "metallb",
                    "component": "controller"
                },
                "managedFields": [
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:config.k8s.io/owning-inventory": {},
                                    "f:internal.kpt.dev/upstream-identifier": {},
                                    "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:app": {},
                                    "f:component": {}
                                }
                            },
                            "f:spec": {
                                "f:progressDeadlineSeconds": {},
                                "f:replicas": {},
                                "f:revisionHistoryLimit": {},
                                "f:selector": {},
                                "f:strategy": {
                                    "f:rollingUpdate": {
                                        ".": {},
                                        "f:maxSurge": {},
                                        "f:maxUnavailable": {}
                                    },
                                    "f:type": {}
                                },
                                "f:template": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:prometheus.io/port": {},
                                            "f:prometheus.io/scrape": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:component": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:containers": {
                                            "k:{\"name\":\"controller\"}": {
                                                ".": {},
                                                "f:args": {},
                                                "f:env": {
                                                    ".": {},
                                                    "k:{\"name\":\"METALLB_DEPLOYMENT\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:value": {}
                                                    },
                                                    "k:{\"name\":\"METALLB_ML_SECRET_NAME\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:value": {}
                                                    }
                                                },
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:livenessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:initialDelaySeconds": {},
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:name": {},
                                                "f:ports": {
                                                    ".": {},
                                                    "k:{\"containerPort\":7472,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    },
                                                    "k:{\"containerPort\":9443,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    }
                                                },
                                                "f:readinessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:initialDelaySeconds": {},
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:resources": {},
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:allowPrivilegeEscalation": {},
                                                    "f:capabilities": {
                                                        ".": {},
                                                        "f:drop": {}
                                                    },
                                                    "f:readOnlyRootFilesystem": {}
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {},
                                                "f:volumeMounts": {
                                                    ".": {},
                                                    "k:{\"mountPath\":\"/tmp/k8s-webhook-server/serving-certs\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {},
                                                        "f:readOnly": {}
                                                    }
                                                }
                                            }
                                        },
                                        "f:dnsPolicy": {},
                                        "f:nodeSelector": {},
                                        "f:restartPolicy": {},
                                        "f:schedulerName": {},
                                        "f:securityContext": {
                                            ".": {},
                                            "f:fsGroup": {},
                                            "f:runAsNonRoot": {},
                                            "f:runAsUser": {}
                                        },
                                        "f:serviceAccount": {},
                                        "f:serviceAccountName": {},
                                        "f:terminationGracePeriodSeconds": {},
                                        "f:volumes": {
                                            ".": {},
                                            "k:{\"name\":\"cert\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:secret": {
                                                    ".": {},
                                                    "f:defaultMode": {},
                                                    "f:secretName": {}
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "manager": "kubectl",
                        "operation": "Update",
                        "time": "2025-10-01T12:30:15Z"
                    },
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    "f:deployment.kubernetes.io/revision": {}
                                }
                            },
                            "f:status": {
                                "f:availableReplicas": {},
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"Available\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Progressing\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:observedGeneration": {},
                                "f:readyReplicas": {},
                                "f:replicas": {},
                                "f:updatedReplicas": {}
                            }
                        },
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "subresource": "status",
                        "time": "2025-10-01T12:31:17Z"
                    }
                ],
                "name": "controller",
                "namespace": "metallb-system",
                "resourceVersion": "2413",
                "uid": "ce36749f-36e0-471e-9ad5-9596725ab60e"
            },
            "spec": {
                "progressDeadlineSeconds": 600,
                "replicas": 1,
                "revisionHistoryLimit": 3,
                "selector": {
                    "matchLabels": {
                        "app": "metallb",
                        "component": "controller"
                    }
                },
                "strategy": {
                    "rollingUpdate": {
                        "maxSurge": "25%",
                        "maxUnavailable": "25%"
                    },
                    "type": "RollingUpdate"
                },
                "template": {
                    "metadata": {
                        "annotations": {
                            "prometheus.io/port": "7472",
                            "prometheus.io/scrape": "true"
                        },
                        "labels": {
                            "app": "metallb",
                            "component": "controller"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "args": [
                                    "--port=7472",
                                    "--log-level=info"
                                ],
                                "env": [
                                    {
                                        "name": "METALLB_ML_SECRET_NAME",
                                        "value": "memberlist"
                                    },
                                    {
                                        "name": "METALLB_DEPLOYMENT",
                                        "value": "controller"
                                    }
                                ],
                                "image": "quay.io/metallb/controller:v0.13.9",
                                "imagePullPolicy": "IfNotPresent",
                                "livenessProbe": {
                                    "failureThreshold": 3,
                                    "httpGet": {
                                        "path": "/metrics",
                                        "port": "monitoring",
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 10,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 1
                                },
                                "name": "controller",
                                "ports": [
                                    {
                                        "containerPort": 7472,
                                        "name": "monitoring",
                                        "protocol": "TCP"
                                    },
                                    {
                                        "containerPort": 9443,
                                        "name": "webhook-server",
                                        "protocol": "TCP"
                                    }
                                ],
                                "readinessProbe": {
                                    "failureThreshold": 3,
                                    "httpGet": {
                                        "path": "/metrics",
                                        "port": "monitoring",
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 10,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 1
                                },
                                "resources": {},
                                "securityContext": {
                                    "allowPrivilegeEscalation": false,
                                    "capabilities": {
                                        "drop": [
                                            "all"
                                        ]
                                    },
                                    "readOnlyRootFilesystem": true
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/tmp/k8s-webhook-server/serving-certs",
                                        "name": "cert",
                                        "readOnly": true
                                    }
                                ]
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "nodeSelector": {
                            "kubernetes.io/os": "linux"
                        },
                        "restartPolicy": "Always",
                        "schedulerName": "default-scheduler",
                        "securityContext": {
                            "fsGroup": 65534,
                            "runAsNonRoot": true,
                            "runAsUser": 65534
                        },
                        "serviceAccount": "controller",
                        "serviceAccountName": "controller",
                        "terminationGracePeriodSeconds": 0,
                        "volumes": [
                            {
                                "name": "cert",
                                "secret": {
                                    "defaultMode": 420,
                                    "secretName": "webhook-server-cert"
                                }
                            }
                        ]
                    }
                }
            },
            "status": {
                "availableReplicas": 1,
                "conditions": [
                    {
                        "lastTransitionTime": "2025-10-01T12:31:17Z",
                        "lastUpdateTime": "2025-10-01T12:31:17Z",
                        "message": "Deployment has minimum availability.",
                        "reason": "MinimumReplicasAvailable",
                        "status": "True",
                        "type": "Available"
                    },
                    {
                        "lastTransitionTime": "2025-10-01T12:30:15Z",
                        "lastUpdateTime": "2025-10-01T12:31:17Z",
                        "message": "ReplicaSet \"controller-6d77974f85\" has successfully progressed.",
                        "reason": "NewReplicaSetAvailable",
                        "status": "True",
                        "type": "Progressing"
                    }
                ],
                "observedGeneration": 1,
                "readyReplicas": 1,
                "replicas": 1,
                "updatedReplicas": 1
            }
        }
    ]
}

TASK [bootstrap : Wait for deployments in namespace metallb-system] ************
Wednesday 01 October 2025  12:32:32 +0000 (0:00:00.091)       0:03:04.420 ***** 
Wednesday 01 October 2025  12:32:32 +0000 (0:00:00.091)       0:03:04.420 ***** 
ok: [127.0.0.1] => (item={'metadata': {'name': 'controller', 'namespace': 'metallb-system', 'uid': 'ce36749f-36e0-471e-9ad5-9596725ab60e', 'resourceVersion': '2413', 'generation': 1, 'creationTimestamp': '2025-10-01T12:30:15Z', 'labels': {'app': 'metallb', 'component': 'controller'}, 'annotations': {'config.k8s.io/owning-inventory': '6141cab47f34edb549bd2362705771b611218b90-1759321814108664618', 'deployment.kubernetes.io/revision': '1', 'internal.kpt.dev/upstream-identifier': 'apps|Deployment|metallb-system|controller', 'kubectl.kubernetes.io/last-applied-configuration': '{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"config.k8s.io/owning-inventory":"6141cab47f34edb549bd2362705771b611218b90-1759321814108664618","internal.kpt.dev/upstream-identifier":"apps|Deployment|metallb-system|controller"},"labels":{"app":"metallb","component":"controller"},"name":"controller","namespace":"metallb-system"},"spec":{"revisionHistoryLimit":3,"selector":{"matchLabels":{"app":"metallb","component":"controller"}},"template":{"metadata":{"annotations":{"prometheus.io/port":"7472","prometheus.io/scrape":"true"},"labels":{"app":"metallb","component":"controller"}},"spec":{"containers":[{"args":["--port=7472","--log-level=info"],"env":[{"name":"METALLB_ML_SECRET_NAME","value":"memberlist"},{"name":"METALLB_DEPLOYMENT","value":"controller"}],"image":"quay.io/metallb/controller:v0.13.9","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/metrics","port":"monitoring"},"initialDelaySeconds":10,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"name":"controller","ports":[{"containerPort":7472,"name":"monitoring"},{"containerPort":9443,"name":"webhook-server","protocol":"TCP"}],"readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/metrics","port":"monitoring"},"initialDelaySeconds":10,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["all"]},"readOnlyRootFilesystem":true},"volumeMounts":[{"mountPath":"/tmp/k8s-webhook-server/serving-certs","name":"cert","readOnly":true}]}],"nodeSelector":{"kubernetes.io/os":"linux"},"securityContext":{"fsGroup":65534,"runAsNonRoot":true,"runAsUser":65534},"serviceAccountName":"controller","terminationGracePeriodSeconds":0,"volumes":[{"name":"cert","secret":{"defaultMode":420,"secretName":"webhook-server-cert"}}]}}}}\n'}, 'managedFields': [{'manager': 'kubectl', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:30:15Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'.': {}, 'f:config.k8s.io/owning-inventory': {}, 'f:internal.kpt.dev/upstream-identifier': {}, 'f:kubectl.kubernetes.io/last-applied-configuration': {}}, 'f:labels': {'.': {}, 'f:app': {}, 'f:component': {}}}, 'f:spec': {'f:progressDeadlineSeconds': {}, 'f:replicas': {}, 'f:revisionHistoryLimit': {}, 'f:selector': {}, 'f:strategy': {'f:rollingUpdate': {'.': {}, 'f:maxSurge': {}, 'f:maxUnavailable': {}}, 'f:type': {}}, 'f:template': {'f:metadata': {'f:annotations': {'.': {}, 'f:prometheus.io/port': {}, 'f:prometheus.io/scrape': {}}, 'f:labels': {'.': {}, 'f:app': {}, 'f:component': {}}}, 'f:spec': {'f:containers': {'k:{"name":"controller"}': {'.': {}, 'f:args': {}, 'f:env': {'.': {}, 'k:{"name":"METALLB_DEPLOYMENT"}': {'.': {}, 'f:name': {}, 'f:value': {}}, 'k:{"name":"METALLB_ML_SECRET_NAME"}': {'.': {}, 'f:name': {}, 'f:value': {}}}, 'f:image': {}, 'f:imagePullPolicy': {}, 'f:livenessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:httpGet': {'.': {}, 'f:path': {}, 'f:port': {}, 'f:scheme': {}}, 'f:initialDelaySeconds': {}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:timeoutSeconds': {}}, 'f:name': {}, 'f:ports': {'.': {}, 'k:{"containerPort":7472,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:name': {}, 'f:protocol': {}}, 'k:{"containerPort":9443,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:name': {}, 'f:protocol': {}}}, 'f:readinessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:httpGet': {'.': {}, 'f:path': {}, 'f:port': {}, 'f:scheme': {}}, 'f:initialDelaySeconds': {}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:timeoutSeconds': {}}, 'f:resources': {}, 'f:securityContext': {'.': {}, 'f:allowPrivilegeEscalation': {}, 'f:capabilities': {'.': {}, 'f:drop': {}}, 'f:readOnlyRootFilesystem': {}}, 'f:terminationMessagePath': {}, 'f:terminationMessagePolicy': {}, 'f:volumeMounts': {'.': {}, 'k:{"mountPath":"/tmp/k8s-webhook-server/serving-certs"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}, 'f:readOnly': {}}}}}, 'f:dnsPolicy': {}, 'f:nodeSelector': {}, 'f:restartPolicy': {}, 'f:schedulerName': {}, 'f:securityContext': {'.': {}, 'f:fsGroup': {}, 'f:runAsNonRoot': {}, 'f:runAsUser': {}}, 'f:serviceAccount': {}, 'f:serviceAccountName': {}, 'f:terminationGracePeriodSeconds': {}, 'f:volumes': {'.': {}, 'k:{"name":"cert"}': {'.': {}, 'f:name': {}, 'f:secret': {'.': {}, 'f:defaultMode': {}, 'f:secretName': {}}}}}}}}}, {'manager': 'kube-controller-manager', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:31:17Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'f:deployment.kubernetes.io/revision': {}}}, 'f:status': {'f:availableReplicas': {}, 'f:conditions': {'.': {}, 'k:{"type":"Available"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}, 'k:{"type":"Progressing"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}}, 'f:observedGeneration': {}, 'f:readyReplicas': {}, 'f:replicas': {}, 'f:updatedReplicas': {}}}, 'subresource': 'status'}]}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'metallb', 'component': 'controller'}}, 'template': {'metadata': {'labels': {'app': 'metallb', 'component': 'controller'}, 'annotations': {'prometheus.io/port': '7472', 'prometheus.io/scrape': 'true'}}, 'spec': {'volumes': [{'name': 'cert', 'secret': {'secretName': 'webhook-server-cert', 'defaultMode': 420}}], 'containers': [{'name': 'controller', 'image': 'quay.io/metallb/controller:v0.13.9', 'args': ['--port=7472', '--log-level=info'], 'ports': [{'name': 'monitoring', 'containerPort': 7472, 'protocol': 'TCP'}, {'name': 'webhook-server', 'containerPort': 9443, 'protocol': 'TCP'}], 'env': [{'name': 'METALLB_ML_SECRET_NAME', 'value': 'memberlist'}, {'name': 'METALLB_DEPLOYMENT', 'value': 'controller'}], 'resources': {}, 'volumeMounts': [{'name': 'cert', 'readOnly': True, 'mountPath': '/tmp/k8s-webhook-server/serving-certs'}], 'livenessProbe': {'httpGet': {'path': '/metrics', 'port': 'monitoring', 'scheme': 'HTTP'}, 'initialDelaySeconds': 10, 'timeoutSeconds': 1, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 3}, 'readinessProbe': {'httpGet': {'path': '/metrics', 'port': 'monitoring', 'scheme': 'HTTP'}, 'initialDelaySeconds': 10, 'timeoutSeconds': 1, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 3}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'capabilities': {'drop': ['all']}, 'readOnlyRootFilesystem': True, 'allowPrivilegeEscalation': False}}], 'restartPolicy': 'Always', 'terminationGracePeriodSeconds': 0, 'dnsPolicy': 'ClusterFirst', 'nodeSelector': {'kubernetes.io/os': 'linux'}, 'serviceAccountName': 'controller', 'serviceAccount': 'controller', 'securityContext': {'runAsUser': 65534, 'runAsNonRoot': True, 'fsGroup': 65534}, 'schedulerName': 'default-scheduler'}}, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxUnavailable': '25%', 'maxSurge': '25%'}}, 'revisionHistoryLimit': 3, 'progressDeadlineSeconds': 600}, 'status': {'observedGeneration': 1, 'replicas': 1, 'updatedReplicas': 1, 'readyReplicas': 1, 'availableReplicas': 1, 'conditions': [{'type': 'Available', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:31:17Z', 'lastTransitionTime': '2025-10-01T12:31:17Z', 'reason': 'MinimumReplicasAvailable', 'message': 'Deployment has minimum availability.'}, {'type': 'Progressing', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:31:17Z', 'lastTransitionTime': '2025-10-01T12:30:15Z', 'reason': 'NewReplicaSetAvailable', 'message': 'ReplicaSet "controller-6d77974f85" has successfully progressed.'}]}, 'apiVersion': 'apps/v1', 'kind': 'Deployment'})

TASK [bootstrap : Get deployment resources in namespace capi-system] ***********
Wednesday 01 October 2025  12:32:33 +0000 (0:00:01.008)       0:03:05.429 ***** 
Wednesday 01 October 2025  12:32:33 +0000 (0:00:01.008)       0:03:05.428 ***** 
ok: [127.0.0.1]

TASK [bootstrap : Print deployment resources in namespace capi-system] *********
Wednesday 01 October 2025  12:32:34 +0000 (0:00:01.198)       0:03:06.627 ***** 
Wednesday 01 October 2025  12:32:34 +0000 (0:00:01.198)       0:03:06.626 ***** 
ok: [127.0.0.1] => {
    "deployment_list.resources": [
        {
            "apiVersion": "apps/v1",
            "kind": "Deployment",
            "metadata": {
                "annotations": {
                    "config.k8s.io/owning-inventory": "e516c0006aef5d2e7ffa7c63449219e5254a97a0-1759321897029345152",
                    "deployment.kubernetes.io/revision": "1",
                    "internal.kpt.dev/upstream-identifier": "apps|Deployment|capi-system|capi-controller-manager",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{\"config.k8s.io/owning-inventory\":\"e516c0006aef5d2e7ffa7c63449219e5254a97a0-1759321897029345152\",\"internal.kpt.dev/upstream-identifier\":\"apps|Deployment|capi-system|capi-controller-manager\"},\"labels\":{\"cluster.x-k8s.io/provider\":\"cluster-api\",\"control-plane\":\"controller-manager\"},\"name\":\"capi-controller-manager\",\"namespace\":\"capi-system\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"cluster.x-k8s.io/provider\":\"cluster-api\",\"control-plane\":\"controller-manager\"}},\"template\":{\"metadata\":{\"labels\":{\"cluster.x-k8s.io/provider\":\"cluster-api\",\"control-plane\":\"controller-manager\"}},\"spec\":{\"containers\":[{\"args\":[\"--leader-elect\",\"--diagnostics-address=:8443\",\"--insecure-diagnostics=false\",\"--feature-gates=MachinePool=false,ClusterResourceSet=false,ClusterTopology=true,RuntimeSDK=false,MachineSetPreflightChecks=false\",\"--use-deprecated-infra-machine-naming=false\"],\"command\":[\"/manager\"],\"env\":[{\"name\":\"POD_NAMESPACE\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.namespace\"}}},{\"name\":\"POD_NAME\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.name\"}}},{\"name\":\"POD_UID\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.uid\"}}}],\"image\":\"registry.k8s.io/cluster-api/cluster-api-controller:v1.8.1\",\"imagePullPolicy\":\"IfNotPresent\",\"livenessProbe\":{\"httpGet\":{\"path\":\"/healthz\",\"port\":\"healthz\"}},\"name\":\"manager\",\"ports\":[{\"containerPort\":9443,\"name\":\"webhook-server\",\"protocol\":\"TCP\"},{\"containerPort\":9440,\"name\":\"healthz\",\"protocol\":\"TCP\"},{\"containerPort\":8443,\"name\":\"metrics\",\"protocol\":\"TCP\"}],\"readinessProbe\":{\"httpGet\":{\"path\":\"/readyz\",\"port\":\"healthz\"}},\"securityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"privileged\":false,\"runAsGroup\":65532,\"runAsUser\":65532},\"terminationMessagePolicy\":\"FallbackToLogsOnError\",\"volumeMounts\":[{\"mountPath\":\"/tmp/k8s-webhook-server/serving-certs\",\"name\":\"cert\",\"readOnly\":true}]}],\"securityContext\":{\"runAsNonRoot\":true,\"seccompProfile\":{\"type\":\"RuntimeDefault\"}},\"serviceAccountName\":\"capi-manager\",\"terminationGracePeriodSeconds\":10,\"tolerations\":[{\"effect\":\"NoSchedule\",\"key\":\"node-role.kubernetes.io/master\"},{\"effect\":\"NoSchedule\",\"key\":\"node-role.kubernetes.io/control-plane\"}],\"volumes\":[{\"name\":\"cert\",\"secret\":{\"secretName\":\"capi-webhook-service-cert\"}}]}}}}\n"
                },
                "creationTimestamp": "2025-10-01T12:31:41Z",
                "generation": 1,
                "labels": {
                    "cluster.x-k8s.io/provider": "cluster-api",
                    "control-plane": "controller-manager"
                },
                "managedFields": [
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:config.k8s.io/owning-inventory": {},
                                    "f:internal.kpt.dev/upstream-identifier": {},
                                    "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:cluster.x-k8s.io/provider": {},
                                    "f:control-plane": {}
                                }
                            },
                            "f:spec": {
                                "f:progressDeadlineSeconds": {},
                                "f:replicas": {},
                                "f:revisionHistoryLimit": {},
                                "f:selector": {},
                                "f:strategy": {
                                    "f:rollingUpdate": {
                                        ".": {},
                                        "f:maxSurge": {},
                                        "f:maxUnavailable": {}
                                    },
                                    "f:type": {}
                                },
                                "f:template": {
                                    "f:metadata": {
                                        "f:labels": {
                                            ".": {},
                                            "f:cluster.x-k8s.io/provider": {},
                                            "f:control-plane": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:containers": {
                                            "k:{\"name\":\"manager\"}": {
                                                ".": {},
                                                "f:args": {},
                                                "f:command": {},
                                                "f:env": {
                                                    ".": {},
                                                    "k:{\"name\":\"POD_NAME\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"POD_NAMESPACE\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"POD_UID\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    }
                                                },
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:livenessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:name": {},
                                                "f:ports": {
                                                    ".": {},
                                                    "k:{\"containerPort\":8443,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    },
                                                    "k:{\"containerPort\":9440,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    },
                                                    "k:{\"containerPort\":9443,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    }
                                                },
                                                "f:readinessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:resources": {},
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:allowPrivilegeEscalation": {},
                                                    "f:capabilities": {
                                                        ".": {},
                                                        "f:drop": {}
                                                    },
                                                    "f:privileged": {},
                                                    "f:runAsGroup": {},
                                                    "f:runAsUser": {}
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {},
                                                "f:volumeMounts": {
                                                    ".": {},
                                                    "k:{\"mountPath\":\"/tmp/k8s-webhook-server/serving-certs\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {},
                                                        "f:readOnly": {}
                                                    }
                                                }
                                            }
                                        },
                                        "f:dnsPolicy": {},
                                        "f:restartPolicy": {},
                                        "f:schedulerName": {},
                                        "f:securityContext": {
                                            ".": {},
                                            "f:runAsNonRoot": {},
                                            "f:seccompProfile": {
                                                ".": {},
                                                "f:type": {}
                                            }
                                        },
                                        "f:serviceAccount": {},
                                        "f:serviceAccountName": {},
                                        "f:terminationGracePeriodSeconds": {},
                                        "f:tolerations": {},
                                        "f:volumes": {
                                            ".": {},
                                            "k:{\"name\":\"cert\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:secret": {
                                                    ".": {},
                                                    "f:defaultMode": {},
                                                    "f:secretName": {}
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "manager": "kubectl",
                        "operation": "Update",
                        "time": "2025-10-01T12:31:41Z"
                    },
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    "f:deployment.kubernetes.io/revision": {}
                                }
                            },
                            "f:status": {
                                "f:availableReplicas": {},
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"Available\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Progressing\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:observedGeneration": {},
                                "f:readyReplicas": {},
                                "f:replicas": {},
                                "f:updatedReplicas": {}
                            }
                        },
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "subresource": "status",
                        "time": "2025-10-01T12:31:56Z"
                    }
                ],
                "name": "capi-controller-manager",
                "namespace": "capi-system",
                "resourceVersion": "2812",
                "uid": "4b982800-b135-4d94-921f-b706fab11b13"
            },
            "spec": {
                "progressDeadlineSeconds": 600,
                "replicas": 1,
                "revisionHistoryLimit": 10,
                "selector": {
                    "matchLabels": {
                        "cluster.x-k8s.io/provider": "cluster-api",
                        "control-plane": "controller-manager"
                    }
                },
                "strategy": {
                    "rollingUpdate": {
                        "maxSurge": "25%",
                        "maxUnavailable": "25%"
                    },
                    "type": "RollingUpdate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "cluster.x-k8s.io/provider": "cluster-api",
                            "control-plane": "controller-manager"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "args": [
                                    "--leader-elect",
                                    "--diagnostics-address=:8443",
                                    "--insecure-diagnostics=false",
                                    "--feature-gates=MachinePool=false,ClusterResourceSet=false,ClusterTopology=true,RuntimeSDK=false,MachineSetPreflightChecks=false",
                                    "--use-deprecated-infra-machine-naming=false"
                                ],
                                "command": [
                                    "/manager"
                                ],
                                "env": [
                                    {
                                        "name": "POD_NAMESPACE",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POD_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.name"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POD_UID",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.uid"
                                            }
                                        }
                                    }
                                ],
                                "image": "registry.k8s.io/cluster-api/cluster-api-controller:v1.8.1",
                                "imagePullPolicy": "IfNotPresent",
                                "livenessProbe": {
                                    "failureThreshold": 3,
                                    "httpGet": {
                                        "path": "/healthz",
                                        "port": "healthz",
                                        "scheme": "HTTP"
                                    },
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 1
                                },
                                "name": "manager",
                                "ports": [
                                    {
                                        "containerPort": 9443,
                                        "name": "webhook-server",
                                        "protocol": "TCP"
                                    },
                                    {
                                        "containerPort": 9440,
                                        "name": "healthz",
                                        "protocol": "TCP"
                                    },
                                    {
                                        "containerPort": 8443,
                                        "name": "metrics",
                                        "protocol": "TCP"
                                    }
                                ],
                                "readinessProbe": {
                                    "failureThreshold": 3,
                                    "httpGet": {
                                        "path": "/readyz",
                                        "port": "healthz",
                                        "scheme": "HTTP"
                                    },
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 1
                                },
                                "resources": {},
                                "securityContext": {
                                    "allowPrivilegeEscalation": false,
                                    "capabilities": {
                                        "drop": [
                                            "ALL"
                                        ]
                                    },
                                    "privileged": false,
                                    "runAsGroup": 65532,
                                    "runAsUser": 65532
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "FallbackToLogsOnError",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/tmp/k8s-webhook-server/serving-certs",
                                        "name": "cert",
                                        "readOnly": true
                                    }
                                ]
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "restartPolicy": "Always",
                        "schedulerName": "default-scheduler",
                        "securityContext": {
                            "runAsNonRoot": true,
                            "seccompProfile": {
                                "type": "RuntimeDefault"
                            }
                        },
                        "serviceAccount": "capi-manager",
                        "serviceAccountName": "capi-manager",
                        "terminationGracePeriodSeconds": 10,
                        "tolerations": [
                            {
                                "effect": "NoSchedule",
                                "key": "node-role.kubernetes.io/master"
                            },
                            {
                                "effect": "NoSchedule",
                                "key": "node-role.kubernetes.io/control-plane"
                            }
                        ],
                        "volumes": [
                            {
                                "name": "cert",
                                "secret": {
                                    "defaultMode": 420,
                                    "secretName": "capi-webhook-service-cert"
                                }
                            }
                        ]
                    }
                }
            },
            "status": {
                "availableReplicas": 1,
                "conditions": [
                    {
                        "lastTransitionTime": "2025-10-01T12:31:56Z",
                        "lastUpdateTime": "2025-10-01T12:31:56Z",
                        "message": "Deployment has minimum availability.",
                        "reason": "MinimumReplicasAvailable",
                        "status": "True",
                        "type": "Available"
                    },
                    {
                        "lastTransitionTime": "2025-10-01T12:31:41Z",
                        "lastUpdateTime": "2025-10-01T12:31:56Z",
                        "message": "ReplicaSet \"capi-controller-manager-69c77c9795\" has successfully progressed.",
                        "reason": "NewReplicaSetAvailable",
                        "status": "True",
                        "type": "Progressing"
                    }
                ],
                "observedGeneration": 1,
                "readyReplicas": 1,
                "replicas": 1,
                "updatedReplicas": 1
            }
        }
    ]
}

TASK [bootstrap : Wait for deployments in namespace capi-system] ***************
Wednesday 01 October 2025  12:32:34 +0000 (0:00:00.095)       0:03:06.722 ***** 
Wednesday 01 October 2025  12:32:34 +0000 (0:00:00.095)       0:03:06.721 ***** 
ok: [127.0.0.1] => (item={'metadata': {'name': 'capi-controller-manager', 'namespace': 'capi-system', 'uid': '4b982800-b135-4d94-921f-b706fab11b13', 'resourceVersion': '2812', 'generation': 1, 'creationTimestamp': '2025-10-01T12:31:41Z', 'labels': {'cluster.x-k8s.io/provider': 'cluster-api', 'control-plane': 'controller-manager'}, 'annotations': {'config.k8s.io/owning-inventory': 'e516c0006aef5d2e7ffa7c63449219e5254a97a0-1759321897029345152', 'deployment.kubernetes.io/revision': '1', 'internal.kpt.dev/upstream-identifier': 'apps|Deployment|capi-system|capi-controller-manager', 'kubectl.kubernetes.io/last-applied-configuration': '{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"config.k8s.io/owning-inventory":"e516c0006aef5d2e7ffa7c63449219e5254a97a0-1759321897029345152","internal.kpt.dev/upstream-identifier":"apps|Deployment|capi-system|capi-controller-manager"},"labels":{"cluster.x-k8s.io/provider":"cluster-api","control-plane":"controller-manager"},"name":"capi-controller-manager","namespace":"capi-system"},"spec":{"replicas":1,"selector":{"matchLabels":{"cluster.x-k8s.io/provider":"cluster-api","control-plane":"controller-manager"}},"template":{"metadata":{"labels":{"cluster.x-k8s.io/provider":"cluster-api","control-plane":"controller-manager"}},"spec":{"containers":[{"args":["--leader-elect","--diagnostics-address=:8443","--insecure-diagnostics=false","--feature-gates=MachinePool=false,ClusterResourceSet=false,ClusterTopology=true,RuntimeSDK=false,MachineSetPreflightChecks=false","--use-deprecated-infra-machine-naming=false"],"command":["/manager"],"env":[{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"POD_UID","valueFrom":{"fieldRef":{"fieldPath":"metadata.uid"}}}],"image":"registry.k8s.io/cluster-api/cluster-api-controller:v1.8.1","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/healthz","port":"healthz"}},"name":"manager","ports":[{"containerPort":9443,"name":"webhook-server","protocol":"TCP"},{"containerPort":9440,"name":"healthz","protocol":"TCP"},{"containerPort":8443,"name":"metrics","protocol":"TCP"}],"readinessProbe":{"httpGet":{"path":"/readyz","port":"healthz"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"privileged":false,"runAsGroup":65532,"runAsUser":65532},"terminationMessagePolicy":"FallbackToLogsOnError","volumeMounts":[{"mountPath":"/tmp/k8s-webhook-server/serving-certs","name":"cert","readOnly":true}]}],"securityContext":{"runAsNonRoot":true,"seccompProfile":{"type":"RuntimeDefault"}},"serviceAccountName":"capi-manager","terminationGracePeriodSeconds":10,"tolerations":[{"effect":"NoSchedule","key":"node-role.kubernetes.io/master"},{"effect":"NoSchedule","key":"node-role.kubernetes.io/control-plane"}],"volumes":[{"name":"cert","secret":{"secretName":"capi-webhook-service-cert"}}]}}}}\n'}, 'managedFields': [{'manager': 'kubectl', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:31:41Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'.': {}, 'f:config.k8s.io/owning-inventory': {}, 'f:internal.kpt.dev/upstream-identifier': {}, 'f:kubectl.kubernetes.io/last-applied-configuration': {}}, 'f:labels': {'.': {}, 'f:cluster.x-k8s.io/provider': {}, 'f:control-plane': {}}}, 'f:spec': {'f:progressDeadlineSeconds': {}, 'f:replicas': {}, 'f:revisionHistoryLimit': {}, 'f:selector': {}, 'f:strategy': {'f:rollingUpdate': {'.': {}, 'f:maxSurge': {}, 'f:maxUnavailable': {}}, 'f:type': {}}, 'f:template': {'f:metadata': {'f:labels': {'.': {}, 'f:cluster.x-k8s.io/provider': {}, 'f:control-plane': {}}}, 'f:spec': {'f:containers': {'k:{"name":"manager"}': {'.': {}, 'f:args': {}, 'f:command': {}, 'f:env': {'.': {}, 'k:{"name":"POD_NAME"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}, 'k:{"name":"POD_NAMESPACE"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}, 'k:{"name":"POD_UID"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}}, 'f:image': {}, 'f:imagePullPolicy': {}, 'f:livenessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:httpGet': {'.': {}, 'f:path': {}, 'f:port': {}, 'f:scheme': {}}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:timeoutSeconds': {}}, 'f:name': {}, 'f:ports': {'.': {}, 'k:{"containerPort":8443,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:name': {}, 'f:protocol': {}}, 'k:{"containerPort":9440,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:name': {}, 'f:protocol': {}}, 'k:{"containerPort":9443,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:name': {}, 'f:protocol': {}}}, 'f:readinessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:httpGet': {'.': {}, 'f:path': {}, 'f:port': {}, 'f:scheme': {}}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:timeoutSeconds': {}}, 'f:resources': {}, 'f:securityContext': {'.': {}, 'f:allowPrivilegeEscalation': {}, 'f:capabilities': {'.': {}, 'f:drop': {}}, 'f:privileged': {}, 'f:runAsGroup': {}, 'f:runAsUser': {}}, 'f:terminationMessagePath': {}, 'f:terminationMessagePolicy': {}, 'f:volumeMounts': {'.': {}, 'k:{"mountPath":"/tmp/k8s-webhook-server/serving-certs"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}, 'f:readOnly': {}}}}}, 'f:dnsPolicy': {}, 'f:restartPolicy': {}, 'f:schedulerName': {}, 'f:securityContext': {'.': {}, 'f:runAsNonRoot': {}, 'f:seccompProfile': {'.': {}, 'f:type': {}}}, 'f:serviceAccount': {}, 'f:serviceAccountName': {}, 'f:terminationGracePeriodSeconds': {}, 'f:tolerations': {}, 'f:volumes': {'.': {}, 'k:{"name":"cert"}': {'.': {}, 'f:name': {}, 'f:secret': {'.': {}, 'f:defaultMode': {}, 'f:secretName': {}}}}}}}}}, {'manager': 'kube-controller-manager', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:31:56Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'f:deployment.kubernetes.io/revision': {}}}, 'f:status': {'f:availableReplicas': {}, 'f:conditions': {'.': {}, 'k:{"type":"Available"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}, 'k:{"type":"Progressing"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}}, 'f:observedGeneration': {}, 'f:readyReplicas': {}, 'f:replicas': {}, 'f:updatedReplicas': {}}}, 'subresource': 'status'}]}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'cluster.x-k8s.io/provider': 'cluster-api', 'control-plane': 'controller-manager'}}, 'template': {'metadata': {'labels': {'cluster.x-k8s.io/provider': 'cluster-api', 'control-plane': 'controller-manager'}}, 'spec': {'volumes': [{'name': 'cert', 'secret': {'secretName': 'capi-webhook-service-cert', 'defaultMode': 420}}], 'containers': [{'name': 'manager', 'image': 'registry.k8s.io/cluster-api/cluster-api-controller:v1.8.1', 'command': ['/manager'], 'args': ['--leader-elect', '--diagnostics-address=:8443', '--insecure-diagnostics=false', '--feature-gates=MachinePool=false,ClusterResourceSet=false,ClusterTopology=true,RuntimeSDK=false,MachineSetPreflightChecks=false', '--use-deprecated-infra-machine-naming=false'], 'ports': [{'name': 'webhook-server', 'containerPort': 9443, 'protocol': 'TCP'}, {'name': 'healthz', 'containerPort': 9440, 'protocol': 'TCP'}, {'name': 'metrics', 'containerPort': 8443, 'protocol': 'TCP'}], 'env': [{'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'metadata.name'}}}, {'name': 'POD_UID', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'metadata.uid'}}}], 'resources': {}, 'volumeMounts': [{'name': 'cert', 'readOnly': True, 'mountPath': '/tmp/k8s-webhook-server/serving-certs'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'healthz', 'scheme': 'HTTP'}, 'timeoutSeconds': 1, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 3}, 'readinessProbe': {'httpGet': {'path': '/readyz', 'port': 'healthz', 'scheme': 'HTTP'}, 'timeoutSeconds': 1, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 3}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'FallbackToLogsOnError', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'privileged': False, 'runAsUser': 65532, 'runAsGroup': 65532, 'allowPrivilegeEscalation': False}}], 'restartPolicy': 'Always', 'terminationGracePeriodSeconds': 10, 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'capi-manager', 'serviceAccount': 'capi-manager', 'securityContext': {'runAsNonRoot': True, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'schedulerName': 'default-scheduler', 'tolerations': [{'key': 'node-role.kubernetes.io/master', 'effect': 'NoSchedule'}, {'key': 'node-role.kubernetes.io/control-plane', 'effect': 'NoSchedule'}]}}, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxUnavailable': '25%', 'maxSurge': '25%'}}, 'revisionHistoryLimit': 10, 'progressDeadlineSeconds': 600}, 'status': {'observedGeneration': 1, 'replicas': 1, 'updatedReplicas': 1, 'readyReplicas': 1, 'availableReplicas': 1, 'conditions': [{'type': 'Available', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:31:56Z', 'lastTransitionTime': '2025-10-01T12:31:56Z', 'reason': 'MinimumReplicasAvailable', 'message': 'Deployment has minimum availability.'}, {'type': 'Progressing', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:31:56Z', 'lastTransitionTime': '2025-10-01T12:31:41Z', 'reason': 'NewReplicaSetAvailable', 'message': 'ReplicaSet "capi-controller-manager-69c77c9795" has successfully progressed.'}]}, 'apiVersion': 'apps/v1', 'kind': 'Deployment'})

TASK [bootstrap : Get deployment resources in namespace capi-kubeadm-control-plane-system] ***
Wednesday 01 October 2025  12:32:35 +0000 (0:00:00.928)       0:03:07.651 ***** 
Wednesday 01 October 2025  12:32:35 +0000 (0:00:00.928)       0:03:07.650 ***** 
ok: [127.0.0.1]

TASK [bootstrap : Print deployment resources in namespace capi-kubeadm-control-plane-system] ***
Wednesday 01 October 2025  12:32:36 +0000 (0:00:01.079)       0:03:08.730 ***** 
Wednesday 01 October 2025  12:32:36 +0000 (0:00:01.079)       0:03:08.730 ***** 
ok: [127.0.0.1] => {
    "deployment_list.resources": [
        {
            "apiVersion": "apps/v1",
            "kind": "Deployment",
            "metadata": {
                "annotations": {
                    "config.k8s.io/owning-inventory": "e516c0006aef5d2e7ffa7c63449219e5254a97a0-1759321897029345152",
                    "deployment.kubernetes.io/revision": "1",
                    "internal.kpt.dev/upstream-identifier": "apps|Deployment|capi-kubeadm-control-plane-system|capi-kubeadm-control-plane-controller-manager",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{\"config.k8s.io/owning-inventory\":\"e516c0006aef5d2e7ffa7c63449219e5254a97a0-1759321897029345152\",\"internal.kpt.dev/upstream-identifier\":\"apps|Deployment|capi-kubeadm-control-plane-system|capi-kubeadm-control-plane-controller-manager\"},\"labels\":{\"cluster.x-k8s.io/provider\":\"control-plane-kubeadm\",\"control-plane\":\"controller-manager\"},\"name\":\"capi-kubeadm-control-plane-controller-manager\",\"namespace\":\"capi-kubeadm-control-plane-system\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"cluster.x-k8s.io/provider\":\"control-plane-kubeadm\",\"control-plane\":\"controller-manager\"}},\"template\":{\"metadata\":{\"labels\":{\"cluster.x-k8s.io/provider\":\"control-plane-kubeadm\",\"control-plane\":\"controller-manager\"}},\"spec\":{\"containers\":[{\"args\":[\"--leader-elect\",\"--diagnostics-address=:8443\",\"--insecure-diagnostics=false\",\"--use-deprecated-infra-machine-naming=false\",\"--feature-gates=ClusterTopology=true,KubeadmBootstrapFormatIgnition=false\"],\"command\":[\"/manager\"],\"env\":[{\"name\":\"POD_NAMESPACE\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.namespace\"}}},{\"name\":\"POD_NAME\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.name\"}}},{\"name\":\"POD_UID\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.uid\"}}}],\"image\":\"registry.k8s.io/cluster-api/kubeadm-control-plane-controller:v1.8.1\",\"imagePullPolicy\":\"IfNotPresent\",\"livenessProbe\":{\"httpGet\":{\"path\":\"/healthz\",\"port\":\"healthz\"}},\"name\":\"manager\",\"ports\":[{\"containerPort\":9443,\"name\":\"webhook-server\",\"protocol\":\"TCP\"},{\"containerPort\":9440,\"name\":\"healthz\",\"protocol\":\"TCP\"},{\"containerPort\":8443,\"name\":\"metrics\",\"protocol\":\"TCP\"}],\"readinessProbe\":{\"httpGet\":{\"path\":\"/readyz\",\"port\":\"healthz\"}},\"securityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"privileged\":false,\"runAsGroup\":65532,\"runAsUser\":65532},\"terminationMessagePolicy\":\"FallbackToLogsOnError\",\"volumeMounts\":[{\"mountPath\":\"/tmp/k8s-webhook-server/serving-certs\",\"name\":\"cert\",\"readOnly\":true}]}],\"securityContext\":{\"runAsNonRoot\":true,\"seccompProfile\":{\"type\":\"RuntimeDefault\"}},\"serviceAccountName\":\"capi-kubeadm-control-plane-manager\",\"terminationGracePeriodSeconds\":10,\"tolerations\":[{\"effect\":\"NoSchedule\",\"key\":\"node-role.kubernetes.io/master\"},{\"effect\":\"NoSchedule\",\"key\":\"node-role.kubernetes.io/control-plane\"}],\"volumes\":[{\"name\":\"cert\",\"secret\":{\"secretName\":\"capi-kubeadm-control-plane-webhook-service-cert\"}}]}}}}\n"
                },
                "creationTimestamp": "2025-10-01T12:31:41Z",
                "generation": 1,
                "labels": {
                    "cluster.x-k8s.io/provider": "control-plane-kubeadm",
                    "control-plane": "controller-manager"
                },
                "managedFields": [
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:config.k8s.io/owning-inventory": {},
                                    "f:internal.kpt.dev/upstream-identifier": {},
                                    "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:cluster.x-k8s.io/provider": {},
                                    "f:control-plane": {}
                                }
                            },
                            "f:spec": {
                                "f:progressDeadlineSeconds": {},
                                "f:replicas": {},
                                "f:revisionHistoryLimit": {},
                                "f:selector": {},
                                "f:strategy": {
                                    "f:rollingUpdate": {
                                        ".": {},
                                        "f:maxSurge": {},
                                        "f:maxUnavailable": {}
                                    },
                                    "f:type": {}
                                },
                                "f:template": {
                                    "f:metadata": {
                                        "f:labels": {
                                            ".": {},
                                            "f:cluster.x-k8s.io/provider": {},
                                            "f:control-plane": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:containers": {
                                            "k:{\"name\":\"manager\"}": {
                                                ".": {},
                                                "f:args": {},
                                                "f:command": {},
                                                "f:env": {
                                                    ".": {},
                                                    "k:{\"name\":\"POD_NAME\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"POD_NAMESPACE\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"POD_UID\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    }
                                                },
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:livenessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:name": {},
                                                "f:ports": {
                                                    ".": {},
                                                    "k:{\"containerPort\":8443,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    },
                                                    "k:{\"containerPort\":9440,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    },
                                                    "k:{\"containerPort\":9443,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    }
                                                },
                                                "f:readinessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:resources": {},
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:allowPrivilegeEscalation": {},
                                                    "f:capabilities": {
                                                        ".": {},
                                                        "f:drop": {}
                                                    },
                                                    "f:privileged": {},
                                                    "f:runAsGroup": {},
                                                    "f:runAsUser": {}
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {},
                                                "f:volumeMounts": {
                                                    ".": {},
                                                    "k:{\"mountPath\":\"/tmp/k8s-webhook-server/serving-certs\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {},
                                                        "f:readOnly": {}
                                                    }
                                                }
                                            }
                                        },
                                        "f:dnsPolicy": {},
                                        "f:restartPolicy": {},
                                        "f:schedulerName": {},
                                        "f:securityContext": {
                                            ".": {},
                                            "f:runAsNonRoot": {},
                                            "f:seccompProfile": {
                                                ".": {},
                                                "f:type": {}
                                            }
                                        },
                                        "f:serviceAccount": {},
                                        "f:serviceAccountName": {},
                                        "f:terminationGracePeriodSeconds": {},
                                        "f:tolerations": {},
                                        "f:volumes": {
                                            ".": {},
                                            "k:{\"name\":\"cert\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:secret": {
                                                    ".": {},
                                                    "f:defaultMode": {},
                                                    "f:secretName": {}
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "manager": "kubectl",
                        "operation": "Update",
                        "time": "2025-10-01T12:31:41Z"
                    },
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    "f:deployment.kubernetes.io/revision": {}
                                }
                            },
                            "f:status": {
                                "f:availableReplicas": {},
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"Available\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Progressing\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:observedGeneration": {},
                                "f:readyReplicas": {},
                                "f:replicas": {},
                                "f:updatedReplicas": {}
                            }
                        },
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "subresource": "status",
                        "time": "2025-10-01T12:31:50Z"
                    }
                ],
                "name": "capi-kubeadm-control-plane-controller-manager",
                "namespace": "capi-kubeadm-control-plane-system",
                "resourceVersion": "2778",
                "uid": "ad9d60ed-5737-4373-b4b0-a95a5998b40b"
            },
            "spec": {
                "progressDeadlineSeconds": 600,
                "replicas": 1,
                "revisionHistoryLimit": 10,
                "selector": {
                    "matchLabels": {
                        "cluster.x-k8s.io/provider": "control-plane-kubeadm",
                        "control-plane": "controller-manager"
                    }
                },
                "strategy": {
                    "rollingUpdate": {
                        "maxSurge": "25%",
                        "maxUnavailable": "25%"
                    },
                    "type": "RollingUpdate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "cluster.x-k8s.io/provider": "control-plane-kubeadm",
                            "control-plane": "controller-manager"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "args": [
                                    "--leader-elect",
                                    "--diagnostics-address=:8443",
                                    "--insecure-diagnostics=false",
                                    "--use-deprecated-infra-machine-naming=false",
                                    "--feature-gates=ClusterTopology=true,KubeadmBootstrapFormatIgnition=false"
                                ],
                                "command": [
                                    "/manager"
                                ],
                                "env": [
                                    {
                                        "name": "POD_NAMESPACE",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POD_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.name"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POD_UID",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.uid"
                                            }
                                        }
                                    }
                                ],
                                "image": "registry.k8s.io/cluster-api/kubeadm-control-plane-controller:v1.8.1",
                                "imagePullPolicy": "IfNotPresent",
                                "livenessProbe": {
                                    "failureThreshold": 3,
                                    "httpGet": {
                                        "path": "/healthz",
                                        "port": "healthz",
                                        "scheme": "HTTP"
                                    },
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 1
                                },
                                "name": "manager",
                                "ports": [
                                    {
                                        "containerPort": 9443,
                                        "name": "webhook-server",
                                        "protocol": "TCP"
                                    },
                                    {
                                        "containerPort": 9440,
                                        "name": "healthz",
                                        "protocol": "TCP"
                                    },
                                    {
                                        "containerPort": 8443,
                                        "name": "metrics",
                                        "protocol": "TCP"
                                    }
                                ],
                                "readinessProbe": {
                                    "failureThreshold": 3,
                                    "httpGet": {
                                        "path": "/readyz",
                                        "port": "healthz",
                                        "scheme": "HTTP"
                                    },
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 1
                                },
                                "resources": {},
                                "securityContext": {
                                    "allowPrivilegeEscalation": false,
                                    "capabilities": {
                                        "drop": [
                                            "ALL"
                                        ]
                                    },
                                    "privileged": false,
                                    "runAsGroup": 65532,
                                    "runAsUser": 65532
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "FallbackToLogsOnError",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/tmp/k8s-webhook-server/serving-certs",
                                        "name": "cert",
                                        "readOnly": true
                                    }
                                ]
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "restartPolicy": "Always",
                        "schedulerName": "default-scheduler",
                        "securityContext": {
                            "runAsNonRoot": true,
                            "seccompProfile": {
                                "type": "RuntimeDefault"
                            }
                        },
                        "serviceAccount": "capi-kubeadm-control-plane-manager",
                        "serviceAccountName": "capi-kubeadm-control-plane-manager",
                        "terminationGracePeriodSeconds": 10,
                        "tolerations": [
                            {
                                "effect": "NoSchedule",
                                "key": "node-role.kubernetes.io/master"
                            },
                            {
                                "effect": "NoSchedule",
                                "key": "node-role.kubernetes.io/control-plane"
                            }
                        ],
                        "volumes": [
                            {
                                "name": "cert",
                                "secret": {
                                    "defaultMode": 420,
                                    "secretName": "capi-kubeadm-control-plane-webhook-service-cert"
                                }
                            }
                        ]
                    }
                }
            },
            "status": {
                "availableReplicas": 1,
                "conditions": [
                    {
                        "lastTransitionTime": "2025-10-01T12:31:50Z",
                        "lastUpdateTime": "2025-10-01T12:31:50Z",
                        "message": "Deployment has minimum availability.",
                        "reason": "MinimumReplicasAvailable",
                        "status": "True",
                        "type": "Available"
                    },
                    {
                        "lastTransitionTime": "2025-10-01T12:31:41Z",
                        "lastUpdateTime": "2025-10-01T12:31:50Z",
                        "message": "ReplicaSet \"capi-kubeadm-control-plane-controller-manager-c695d8655\" has successfully progressed.",
                        "reason": "NewReplicaSetAvailable",
                        "status": "True",
                        "type": "Progressing"
                    }
                ],
                "observedGeneration": 1,
                "readyReplicas": 1,
                "replicas": 1,
                "updatedReplicas": 1
            }
        }
    ]
}

TASK [bootstrap : Wait for deployments in namespace capi-kubeadm-control-plane-system] ***
Wednesday 01 October 2025  12:32:36 +0000 (0:00:00.086)       0:03:08.817 ***** 
Wednesday 01 October 2025  12:32:36 +0000 (0:00:00.086)       0:03:08.817 ***** 
ok: [127.0.0.1] => (item={'metadata': {'name': 'capi-kubeadm-control-plane-controller-manager', 'namespace': 'capi-kubeadm-control-plane-system', 'uid': 'ad9d60ed-5737-4373-b4b0-a95a5998b40b', 'resourceVersion': '2778', 'generation': 1, 'creationTimestamp': '2025-10-01T12:31:41Z', 'labels': {'cluster.x-k8s.io/provider': 'control-plane-kubeadm', 'control-plane': 'controller-manager'}, 'annotations': {'config.k8s.io/owning-inventory': 'e516c0006aef5d2e7ffa7c63449219e5254a97a0-1759321897029345152', 'deployment.kubernetes.io/revision': '1', 'internal.kpt.dev/upstream-identifier': 'apps|Deployment|capi-kubeadm-control-plane-system|capi-kubeadm-control-plane-controller-manager', 'kubectl.kubernetes.io/last-applied-configuration': '{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"config.k8s.io/owning-inventory":"e516c0006aef5d2e7ffa7c63449219e5254a97a0-1759321897029345152","internal.kpt.dev/upstream-identifier":"apps|Deployment|capi-kubeadm-control-plane-system|capi-kubeadm-control-plane-controller-manager"},"labels":{"cluster.x-k8s.io/provider":"control-plane-kubeadm","control-plane":"controller-manager"},"name":"capi-kubeadm-control-plane-controller-manager","namespace":"capi-kubeadm-control-plane-system"},"spec":{"replicas":1,"selector":{"matchLabels":{"cluster.x-k8s.io/provider":"control-plane-kubeadm","control-plane":"controller-manager"}},"template":{"metadata":{"labels":{"cluster.x-k8s.io/provider":"control-plane-kubeadm","control-plane":"controller-manager"}},"spec":{"containers":[{"args":["--leader-elect","--diagnostics-address=:8443","--insecure-diagnostics=false","--use-deprecated-infra-machine-naming=false","--feature-gates=ClusterTopology=true,KubeadmBootstrapFormatIgnition=false"],"command":["/manager"],"env":[{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"POD_UID","valueFrom":{"fieldRef":{"fieldPath":"metadata.uid"}}}],"image":"registry.k8s.io/cluster-api/kubeadm-control-plane-controller:v1.8.1","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/healthz","port":"healthz"}},"name":"manager","ports":[{"containerPort":9443,"name":"webhook-server","protocol":"TCP"},{"containerPort":9440,"name":"healthz","protocol":"TCP"},{"containerPort":8443,"name":"metrics","protocol":"TCP"}],"readinessProbe":{"httpGet":{"path":"/readyz","port":"healthz"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"privileged":false,"runAsGroup":65532,"runAsUser":65532},"terminationMessagePolicy":"FallbackToLogsOnError","volumeMounts":[{"mountPath":"/tmp/k8s-webhook-server/serving-certs","name":"cert","readOnly":true}]}],"securityContext":{"runAsNonRoot":true,"seccompProfile":{"type":"RuntimeDefault"}},"serviceAccountName":"capi-kubeadm-control-plane-manager","terminationGracePeriodSeconds":10,"tolerations":[{"effect":"NoSchedule","key":"node-role.kubernetes.io/master"},{"effect":"NoSchedule","key":"node-role.kubernetes.io/control-plane"}],"volumes":[{"name":"cert","secret":{"secretName":"capi-kubeadm-control-plane-webhook-service-cert"}}]}}}}\n'}, 'managedFields': [{'manager': 'kubectl', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:31:41Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'.': {}, 'f:config.k8s.io/owning-inventory': {}, 'f:internal.kpt.dev/upstream-identifier': {}, 'f:kubectl.kubernetes.io/last-applied-configuration': {}}, 'f:labels': {'.': {}, 'f:cluster.x-k8s.io/provider': {}, 'f:control-plane': {}}}, 'f:spec': {'f:progressDeadlineSeconds': {}, 'f:replicas': {}, 'f:revisionHistoryLimit': {}, 'f:selector': {}, 'f:strategy': {'f:rollingUpdate': {'.': {}, 'f:maxSurge': {}, 'f:maxUnavailable': {}}, 'f:type': {}}, 'f:template': {'f:metadata': {'f:labels': {'.': {}, 'f:cluster.x-k8s.io/provider': {}, 'f:control-plane': {}}}, 'f:spec': {'f:containers': {'k:{"name":"manager"}': {'.': {}, 'f:args': {}, 'f:command': {}, 'f:env': {'.': {}, 'k:{"name":"POD_NAME"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}, 'k:{"name":"POD_NAMESPACE"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}, 'k:{"name":"POD_UID"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}}, 'f:image': {}, 'f:imagePullPolicy': {}, 'f:livenessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:httpGet': {'.': {}, 'f:path': {}, 'f:port': {}, 'f:scheme': {}}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:timeoutSeconds': {}}, 'f:name': {}, 'f:ports': {'.': {}, 'k:{"containerPort":8443,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:name': {}, 'f:protocol': {}}, 'k:{"containerPort":9440,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:name': {}, 'f:protocol': {}}, 'k:{"containerPort":9443,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:name': {}, 'f:protocol': {}}}, 'f:readinessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:httpGet': {'.': {}, 'f:path': {}, 'f:port': {}, 'f:scheme': {}}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:timeoutSeconds': {}}, 'f:resources': {}, 'f:securityContext': {'.': {}, 'f:allowPrivilegeEscalation': {}, 'f:capabilities': {'.': {}, 'f:drop': {}}, 'f:privileged': {}, 'f:runAsGroup': {}, 'f:runAsUser': {}}, 'f:terminationMessagePath': {}, 'f:terminationMessagePolicy': {}, 'f:volumeMounts': {'.': {}, 'k:{"mountPath":"/tmp/k8s-webhook-server/serving-certs"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}, 'f:readOnly': {}}}}}, 'f:dnsPolicy': {}, 'f:restartPolicy': {}, 'f:schedulerName': {}, 'f:securityContext': {'.': {}, 'f:runAsNonRoot': {}, 'f:seccompProfile': {'.': {}, 'f:type': {}}}, 'f:serviceAccount': {}, 'f:serviceAccountName': {}, 'f:terminationGracePeriodSeconds': {}, 'f:tolerations': {}, 'f:volumes': {'.': {}, 'k:{"name":"cert"}': {'.': {}, 'f:name': {}, 'f:secret': {'.': {}, 'f:defaultMode': {}, 'f:secretName': {}}}}}}}}}, {'manager': 'kube-controller-manager', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:31:50Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'f:deployment.kubernetes.io/revision': {}}}, 'f:status': {'f:availableReplicas': {}, 'f:conditions': {'.': {}, 'k:{"type":"Available"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}, 'k:{"type":"Progressing"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}}, 'f:observedGeneration': {}, 'f:readyReplicas': {}, 'f:replicas': {}, 'f:updatedReplicas': {}}}, 'subresource': 'status'}]}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'cluster.x-k8s.io/provider': 'control-plane-kubeadm', 'control-plane': 'controller-manager'}}, 'template': {'metadata': {'labels': {'cluster.x-k8s.io/provider': 'control-plane-kubeadm', 'control-plane': 'controller-manager'}}, 'spec': {'volumes': [{'name': 'cert', 'secret': {'secretName': 'capi-kubeadm-control-plane-webhook-service-cert', 'defaultMode': 420}}], 'containers': [{'name': 'manager', 'image': 'registry.k8s.io/cluster-api/kubeadm-control-plane-controller:v1.8.1', 'command': ['/manager'], 'args': ['--leader-elect', '--diagnostics-address=:8443', '--insecure-diagnostics=false', '--use-deprecated-infra-machine-naming=false', '--feature-gates=ClusterTopology=true,KubeadmBootstrapFormatIgnition=false'], 'ports': [{'name': 'webhook-server', 'containerPort': 9443, 'protocol': 'TCP'}, {'name': 'healthz', 'containerPort': 9440, 'protocol': 'TCP'}, {'name': 'metrics', 'containerPort': 8443, 'protocol': 'TCP'}], 'env': [{'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'metadata.name'}}}, {'name': 'POD_UID', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'metadata.uid'}}}], 'resources': {}, 'volumeMounts': [{'name': 'cert', 'readOnly': True, 'mountPath': '/tmp/k8s-webhook-server/serving-certs'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'healthz', 'scheme': 'HTTP'}, 'timeoutSeconds': 1, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 3}, 'readinessProbe': {'httpGet': {'path': '/readyz', 'port': 'healthz', 'scheme': 'HTTP'}, 'timeoutSeconds': 1, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 3}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'FallbackToLogsOnError', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'privileged': False, 'runAsUser': 65532, 'runAsGroup': 65532, 'allowPrivilegeEscalation': False}}], 'restartPolicy': 'Always', 'terminationGracePeriodSeconds': 10, 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'capi-kubeadm-control-plane-manager', 'serviceAccount': 'capi-kubeadm-control-plane-manager', 'securityContext': {'runAsNonRoot': True, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'schedulerName': 'default-scheduler', 'tolerations': [{'key': 'node-role.kubernetes.io/master', 'effect': 'NoSchedule'}, {'key': 'node-role.kubernetes.io/control-plane', 'effect': 'NoSchedule'}]}}, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxUnavailable': '25%', 'maxSurge': '25%'}}, 'revisionHistoryLimit': 10, 'progressDeadlineSeconds': 600}, 'status': {'observedGeneration': 1, 'replicas': 1, 'updatedReplicas': 1, 'readyReplicas': 1, 'availableReplicas': 1, 'conditions': [{'type': 'Available', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:31:50Z', 'lastTransitionTime': '2025-10-01T12:31:50Z', 'reason': 'MinimumReplicasAvailable', 'message': 'Deployment has minimum availability.'}, {'type': 'Progressing', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:31:50Z', 'lastTransitionTime': '2025-10-01T12:31:41Z', 'reason': 'NewReplicaSetAvailable', 'message': 'ReplicaSet "capi-kubeadm-control-plane-controller-manager-c695d8655" has successfully progressed.'}]}, 'apiVersion': 'apps/v1', 'kind': 'Deployment'})

TASK [bootstrap : Get deployment resources in namespace capi-kubeadm-bootstrap-system] ***
Wednesday 01 October 2025  12:32:37 +0000 (0:00:01.203)       0:03:10.021 ***** 
Wednesday 01 October 2025  12:32:37 +0000 (0:00:01.203)       0:03:10.020 ***** 
ok: [127.0.0.1]

TASK [bootstrap : Print deployment resources in namespace capi-kubeadm-bootstrap-system] ***
Wednesday 01 October 2025  12:32:39 +0000 (0:00:01.216)       0:03:11.238 ***** 
Wednesday 01 October 2025  12:32:39 +0000 (0:00:01.216)       0:03:11.237 ***** 
ok: [127.0.0.1] => {
    "deployment_list.resources": [
        {
            "apiVersion": "apps/v1",
            "kind": "Deployment",
            "metadata": {
                "annotations": {
                    "config.k8s.io/owning-inventory": "e516c0006aef5d2e7ffa7c63449219e5254a97a0-1759321897029345152",
                    "deployment.kubernetes.io/revision": "1",
                    "internal.kpt.dev/upstream-identifier": "apps|Deployment|capi-kubeadm-bootstrap-system|capi-kubeadm-bootstrap-controller-manager",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{\"config.k8s.io/owning-inventory\":\"e516c0006aef5d2e7ffa7c63449219e5254a97a0-1759321897029345152\",\"internal.kpt.dev/upstream-identifier\":\"apps|Deployment|capi-kubeadm-bootstrap-system|capi-kubeadm-bootstrap-controller-manager\"},\"labels\":{\"cluster.x-k8s.io/provider\":\"bootstrap-kubeadm\",\"control-plane\":\"controller-manager\"},\"name\":\"capi-kubeadm-bootstrap-controller-manager\",\"namespace\":\"capi-kubeadm-bootstrap-system\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"cluster.x-k8s.io/provider\":\"bootstrap-kubeadm\",\"control-plane\":\"controller-manager\"}},\"template\":{\"metadata\":{\"labels\":{\"cluster.x-k8s.io/provider\":\"bootstrap-kubeadm\",\"control-plane\":\"controller-manager\"}},\"spec\":{\"containers\":[{\"args\":[\"--leader-elect\",\"--diagnostics-address=:8443\",\"--insecure-diagnostics=false\",\"--feature-gates=MachinePool=false,KubeadmBootstrapFormatIgnition=false\",\"--bootstrap-token-ttl=15m\"],\"command\":[\"/manager\"],\"image\":\"registry.k8s.io/cluster-api/kubeadm-bootstrap-controller:v1.8.1\",\"imagePullPolicy\":\"IfNotPresent\",\"livenessProbe\":{\"httpGet\":{\"path\":\"/healthz\",\"port\":\"healthz\"}},\"name\":\"manager\",\"ports\":[{\"containerPort\":9443,\"name\":\"webhook-server\",\"protocol\":\"TCP\"},{\"containerPort\":9440,\"name\":\"healthz\",\"protocol\":\"TCP\"},{\"containerPort\":8443,\"name\":\"metrics\",\"protocol\":\"TCP\"}],\"readinessProbe\":{\"httpGet\":{\"path\":\"/readyz\",\"port\":\"healthz\"}},\"securityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"privileged\":false,\"runAsGroup\":65532,\"runAsUser\":65532},\"terminationMessagePolicy\":\"FallbackToLogsOnError\",\"volumeMounts\":[{\"mountPath\":\"/tmp/k8s-webhook-server/serving-certs\",\"name\":\"cert\",\"readOnly\":true}]}],\"securityContext\":{\"runAsNonRoot\":true,\"seccompProfile\":{\"type\":\"RuntimeDefault\"}},\"serviceAccountName\":\"capi-kubeadm-bootstrap-manager\",\"terminationGracePeriodSeconds\":10,\"tolerations\":[{\"effect\":\"NoSchedule\",\"key\":\"node-role.kubernetes.io/master\"},{\"effect\":\"NoSchedule\",\"key\":\"node-role.kubernetes.io/control-plane\"}],\"volumes\":[{\"name\":\"cert\",\"secret\":{\"secretName\":\"capi-kubeadm-bootstrap-webhook-service-cert\"}}]}}}}\n"
                },
                "creationTimestamp": "2025-10-01T12:31:41Z",
                "generation": 1,
                "labels": {
                    "cluster.x-k8s.io/provider": "bootstrap-kubeadm",
                    "control-plane": "controller-manager"
                },
                "managedFields": [
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:config.k8s.io/owning-inventory": {},
                                    "f:internal.kpt.dev/upstream-identifier": {},
                                    "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:cluster.x-k8s.io/provider": {},
                                    "f:control-plane": {}
                                }
                            },
                            "f:spec": {
                                "f:progressDeadlineSeconds": {},
                                "f:replicas": {},
                                "f:revisionHistoryLimit": {},
                                "f:selector": {},
                                "f:strategy": {
                                    "f:rollingUpdate": {
                                        ".": {},
                                        "f:maxSurge": {},
                                        "f:maxUnavailable": {}
                                    },
                                    "f:type": {}
                                },
                                "f:template": {
                                    "f:metadata": {
                                        "f:labels": {
                                            ".": {},
                                            "f:cluster.x-k8s.io/provider": {},
                                            "f:control-plane": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:containers": {
                                            "k:{\"name\":\"manager\"}": {
                                                ".": {},
                                                "f:args": {},
                                                "f:command": {},
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:livenessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:name": {},
                                                "f:ports": {
                                                    ".": {},
                                                    "k:{\"containerPort\":8443,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    },
                                                    "k:{\"containerPort\":9440,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    },
                                                    "k:{\"containerPort\":9443,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    }
                                                },
                                                "f:readinessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:resources": {},
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:allowPrivilegeEscalation": {},
                                                    "f:capabilities": {
                                                        ".": {},
                                                        "f:drop": {}
                                                    },
                                                    "f:privileged": {},
                                                    "f:runAsGroup": {},
                                                    "f:runAsUser": {}
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {},
                                                "f:volumeMounts": {
                                                    ".": {},
                                                    "k:{\"mountPath\":\"/tmp/k8s-webhook-server/serving-certs\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {},
                                                        "f:readOnly": {}
                                                    }
                                                }
                                            }
                                        },
                                        "f:dnsPolicy": {},
                                        "f:restartPolicy": {},
                                        "f:schedulerName": {},
                                        "f:securityContext": {
                                            ".": {},
                                            "f:runAsNonRoot": {},
                                            "f:seccompProfile": {
                                                ".": {},
                                                "f:type": {}
                                            }
                                        },
                                        "f:serviceAccount": {},
                                        "f:serviceAccountName": {},
                                        "f:terminationGracePeriodSeconds": {},
                                        "f:tolerations": {},
                                        "f:volumes": {
                                            ".": {},
                                            "k:{\"name\":\"cert\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:secret": {
                                                    ".": {},
                                                    "f:defaultMode": {},
                                                    "f:secretName": {}
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "manager": "kubectl",
                        "operation": "Update",
                        "time": "2025-10-01T12:31:41Z"
                    },
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    "f:deployment.kubernetes.io/revision": {}
                                }
                            },
                            "f:status": {
                                "f:availableReplicas": {},
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"Available\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Progressing\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:observedGeneration": {},
                                "f:readyReplicas": {},
                                "f:replicas": {},
                                "f:updatedReplicas": {}
                            }
                        },
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "subresource": "status",
                        "time": "2025-10-01T12:31:47Z"
                    }
                ],
                "name": "capi-kubeadm-bootstrap-controller-manager",
                "namespace": "capi-kubeadm-bootstrap-system",
                "resourceVersion": "2756",
                "uid": "221786c6-f74d-4661-904c-9b71826129f1"
            },
            "spec": {
                "progressDeadlineSeconds": 600,
                "replicas": 1,
                "revisionHistoryLimit": 10,
                "selector": {
                    "matchLabels": {
                        "cluster.x-k8s.io/provider": "bootstrap-kubeadm",
                        "control-plane": "controller-manager"
                    }
                },
                "strategy": {
                    "rollingUpdate": {
                        "maxSurge": "25%",
                        "maxUnavailable": "25%"
                    },
                    "type": "RollingUpdate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "cluster.x-k8s.io/provider": "bootstrap-kubeadm",
                            "control-plane": "controller-manager"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "args": [
                                    "--leader-elect",
                                    "--diagnostics-address=:8443",
                                    "--insecure-diagnostics=false",
                                    "--feature-gates=MachinePool=false,KubeadmBootstrapFormatIgnition=false",
                                    "--bootstrap-token-ttl=15m"
                                ],
                                "command": [
                                    "/manager"
                                ],
                                "image": "registry.k8s.io/cluster-api/kubeadm-bootstrap-controller:v1.8.1",
                                "imagePullPolicy": "IfNotPresent",
                                "livenessProbe": {
                                    "failureThreshold": 3,
                                    "httpGet": {
                                        "path": "/healthz",
                                        "port": "healthz",
                                        "scheme": "HTTP"
                                    },
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 1
                                },
                                "name": "manager",
                                "ports": [
                                    {
                                        "containerPort": 9443,
                                        "name": "webhook-server",
                                        "protocol": "TCP"
                                    },
                                    {
                                        "containerPort": 9440,
                                        "name": "healthz",
                                        "protocol": "TCP"
                                    },
                                    {
                                        "containerPort": 8443,
                                        "name": "metrics",
                                        "protocol": "TCP"
                                    }
                                ],
                                "readinessProbe": {
                                    "failureThreshold": 3,
                                    "httpGet": {
                                        "path": "/readyz",
                                        "port": "healthz",
                                        "scheme": "HTTP"
                                    },
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 1
                                },
                                "resources": {},
                                "securityContext": {
                                    "allowPrivilegeEscalation": false,
                                    "capabilities": {
                                        "drop": [
                                            "ALL"
                                        ]
                                    },
                                    "privileged": false,
                                    "runAsGroup": 65532,
                                    "runAsUser": 65532
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "FallbackToLogsOnError",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/tmp/k8s-webhook-server/serving-certs",
                                        "name": "cert",
                                        "readOnly": true
                                    }
                                ]
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "restartPolicy": "Always",
                        "schedulerName": "default-scheduler",
                        "securityContext": {
                            "runAsNonRoot": true,
                            "seccompProfile": {
                                "type": "RuntimeDefault"
                            }
                        },
                        "serviceAccount": "capi-kubeadm-bootstrap-manager",
                        "serviceAccountName": "capi-kubeadm-bootstrap-manager",
                        "terminationGracePeriodSeconds": 10,
                        "tolerations": [
                            {
                                "effect": "NoSchedule",
                                "key": "node-role.kubernetes.io/master"
                            },
                            {
                                "effect": "NoSchedule",
                                "key": "node-role.kubernetes.io/control-plane"
                            }
                        ],
                        "volumes": [
                            {
                                "name": "cert",
                                "secret": {
                                    "defaultMode": 420,
                                    "secretName": "capi-kubeadm-bootstrap-webhook-service-cert"
                                }
                            }
                        ]
                    }
                }
            },
            "status": {
                "availableReplicas": 1,
                "conditions": [
                    {
                        "lastTransitionTime": "2025-10-01T12:31:47Z",
                        "lastUpdateTime": "2025-10-01T12:31:47Z",
                        "message": "Deployment has minimum availability.",
                        "reason": "MinimumReplicasAvailable",
                        "status": "True",
                        "type": "Available"
                    },
                    {
                        "lastTransitionTime": "2025-10-01T12:31:41Z",
                        "lastUpdateTime": "2025-10-01T12:31:47Z",
                        "message": "ReplicaSet \"capi-kubeadm-bootstrap-controller-manager-894c86bc\" has successfully progressed.",
                        "reason": "NewReplicaSetAvailable",
                        "status": "True",
                        "type": "Progressing"
                    }
                ],
                "observedGeneration": 1,
                "readyReplicas": 1,
                "replicas": 1,
                "updatedReplicas": 1
            }
        }
    ]
}

TASK [bootstrap : Wait for deployments in namespace capi-kubeadm-bootstrap-system] ***
Wednesday 01 October 2025  12:32:39 +0000 (0:00:00.087)       0:03:11.325 ***** 
Wednesday 01 October 2025  12:32:39 +0000 (0:00:00.087)       0:03:11.324 ***** 
ok: [127.0.0.1] => (item={'metadata': {'name': 'capi-kubeadm-bootstrap-controller-manager', 'namespace': 'capi-kubeadm-bootstrap-system', 'uid': '221786c6-f74d-4661-904c-9b71826129f1', 'resourceVersion': '2756', 'generation': 1, 'creationTimestamp': '2025-10-01T12:31:41Z', 'labels': {'cluster.x-k8s.io/provider': 'bootstrap-kubeadm', 'control-plane': 'controller-manager'}, 'annotations': {'config.k8s.io/owning-inventory': 'e516c0006aef5d2e7ffa7c63449219e5254a97a0-1759321897029345152', 'deployment.kubernetes.io/revision': '1', 'internal.kpt.dev/upstream-identifier': 'apps|Deployment|capi-kubeadm-bootstrap-system|capi-kubeadm-bootstrap-controller-manager', 'kubectl.kubernetes.io/last-applied-configuration': '{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"config.k8s.io/owning-inventory":"e516c0006aef5d2e7ffa7c63449219e5254a97a0-1759321897029345152","internal.kpt.dev/upstream-identifier":"apps|Deployment|capi-kubeadm-bootstrap-system|capi-kubeadm-bootstrap-controller-manager"},"labels":{"cluster.x-k8s.io/provider":"bootstrap-kubeadm","control-plane":"controller-manager"},"name":"capi-kubeadm-bootstrap-controller-manager","namespace":"capi-kubeadm-bootstrap-system"},"spec":{"replicas":1,"selector":{"matchLabels":{"cluster.x-k8s.io/provider":"bootstrap-kubeadm","control-plane":"controller-manager"}},"template":{"metadata":{"labels":{"cluster.x-k8s.io/provider":"bootstrap-kubeadm","control-plane":"controller-manager"}},"spec":{"containers":[{"args":["--leader-elect","--diagnostics-address=:8443","--insecure-diagnostics=false","--feature-gates=MachinePool=false,KubeadmBootstrapFormatIgnition=false","--bootstrap-token-ttl=15m"],"command":["/manager"],"image":"registry.k8s.io/cluster-api/kubeadm-bootstrap-controller:v1.8.1","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/healthz","port":"healthz"}},"name":"manager","ports":[{"containerPort":9443,"name":"webhook-server","protocol":"TCP"},{"containerPort":9440,"name":"healthz","protocol":"TCP"},{"containerPort":8443,"name":"metrics","protocol":"TCP"}],"readinessProbe":{"httpGet":{"path":"/readyz","port":"healthz"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"privileged":false,"runAsGroup":65532,"runAsUser":65532},"terminationMessagePolicy":"FallbackToLogsOnError","volumeMounts":[{"mountPath":"/tmp/k8s-webhook-server/serving-certs","name":"cert","readOnly":true}]}],"securityContext":{"runAsNonRoot":true,"seccompProfile":{"type":"RuntimeDefault"}},"serviceAccountName":"capi-kubeadm-bootstrap-manager","terminationGracePeriodSeconds":10,"tolerations":[{"effect":"NoSchedule","key":"node-role.kubernetes.io/master"},{"effect":"NoSchedule","key":"node-role.kubernetes.io/control-plane"}],"volumes":[{"name":"cert","secret":{"secretName":"capi-kubeadm-bootstrap-webhook-service-cert"}}]}}}}\n'}, 'managedFields': [{'manager': 'kubectl', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:31:41Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'.': {}, 'f:config.k8s.io/owning-inventory': {}, 'f:internal.kpt.dev/upstream-identifier': {}, 'f:kubectl.kubernetes.io/last-applied-configuration': {}}, 'f:labels': {'.': {}, 'f:cluster.x-k8s.io/provider': {}, 'f:control-plane': {}}}, 'f:spec': {'f:progressDeadlineSeconds': {}, 'f:replicas': {}, 'f:revisionHistoryLimit': {}, 'f:selector': {}, 'f:strategy': {'f:rollingUpdate': {'.': {}, 'f:maxSurge': {}, 'f:maxUnavailable': {}}, 'f:type': {}}, 'f:template': {'f:metadata': {'f:labels': {'.': {}, 'f:cluster.x-k8s.io/provider': {}, 'f:control-plane': {}}}, 'f:spec': {'f:containers': {'k:{"name":"manager"}': {'.': {}, 'f:args': {}, 'f:command': {}, 'f:image': {}, 'f:imagePullPolicy': {}, 'f:livenessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:httpGet': {'.': {}, 'f:path': {}, 'f:port': {}, 'f:scheme': {}}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:timeoutSeconds': {}}, 'f:name': {}, 'f:ports': {'.': {}, 'k:{"containerPort":8443,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:name': {}, 'f:protocol': {}}, 'k:{"containerPort":9440,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:name': {}, 'f:protocol': {}}, 'k:{"containerPort":9443,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:name': {}, 'f:protocol': {}}}, 'f:readinessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:httpGet': {'.': {}, 'f:path': {}, 'f:port': {}, 'f:scheme': {}}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:timeoutSeconds': {}}, 'f:resources': {}, 'f:securityContext': {'.': {}, 'f:allowPrivilegeEscalation': {}, 'f:capabilities': {'.': {}, 'f:drop': {}}, 'f:privileged': {}, 'f:runAsGroup': {}, 'f:runAsUser': {}}, 'f:terminationMessagePath': {}, 'f:terminationMessagePolicy': {}, 'f:volumeMounts': {'.': {}, 'k:{"mountPath":"/tmp/k8s-webhook-server/serving-certs"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}, 'f:readOnly': {}}}}}, 'f:dnsPolicy': {}, 'f:restartPolicy': {}, 'f:schedulerName': {}, 'f:securityContext': {'.': {}, 'f:runAsNonRoot': {}, 'f:seccompProfile': {'.': {}, 'f:type': {}}}, 'f:serviceAccount': {}, 'f:serviceAccountName': {}, 'f:terminationGracePeriodSeconds': {}, 'f:tolerations': {}, 'f:volumes': {'.': {}, 'k:{"name":"cert"}': {'.': {}, 'f:name': {}, 'f:secret': {'.': {}, 'f:defaultMode': {}, 'f:secretName': {}}}}}}}}}, {'manager': 'kube-controller-manager', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:31:47Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'f:deployment.kubernetes.io/revision': {}}}, 'f:status': {'f:availableReplicas': {}, 'f:conditions': {'.': {}, 'k:{"type":"Available"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}, 'k:{"type":"Progressing"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}}, 'f:observedGeneration': {}, 'f:readyReplicas': {}, 'f:replicas': {}, 'f:updatedReplicas': {}}}, 'subresource': 'status'}]}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'cluster.x-k8s.io/provider': 'bootstrap-kubeadm', 'control-plane': 'controller-manager'}}, 'template': {'metadata': {'labels': {'cluster.x-k8s.io/provider': 'bootstrap-kubeadm', 'control-plane': 'controller-manager'}}, 'spec': {'volumes': [{'name': 'cert', 'secret': {'secretName': 'capi-kubeadm-bootstrap-webhook-service-cert', 'defaultMode': 420}}], 'containers': [{'name': 'manager', 'image': 'registry.k8s.io/cluster-api/kubeadm-bootstrap-controller:v1.8.1', 'command': ['/manager'], 'args': ['--leader-elect', '--diagnostics-address=:8443', '--insecure-diagnostics=false', '--feature-gates=MachinePool=false,KubeadmBootstrapFormatIgnition=false', '--bootstrap-token-ttl=15m'], 'ports': [{'name': 'webhook-server', 'containerPort': 9443, 'protocol': 'TCP'}, {'name': 'healthz', 'containerPort': 9440, 'protocol': 'TCP'}, {'name': 'metrics', 'containerPort': 8443, 'protocol': 'TCP'}], 'resources': {}, 'volumeMounts': [{'name': 'cert', 'readOnly': True, 'mountPath': '/tmp/k8s-webhook-server/serving-certs'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'healthz', 'scheme': 'HTTP'}, 'timeoutSeconds': 1, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 3}, 'readinessProbe': {'httpGet': {'path': '/readyz', 'port': 'healthz', 'scheme': 'HTTP'}, 'timeoutSeconds': 1, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 3}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'FallbackToLogsOnError', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'privileged': False, 'runAsUser': 65532, 'runAsGroup': 65532, 'allowPrivilegeEscalation': False}}], 'restartPolicy': 'Always', 'terminationGracePeriodSeconds': 10, 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'capi-kubeadm-bootstrap-manager', 'serviceAccount': 'capi-kubeadm-bootstrap-manager', 'securityContext': {'runAsNonRoot': True, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'schedulerName': 'default-scheduler', 'tolerations': [{'key': 'node-role.kubernetes.io/master', 'effect': 'NoSchedule'}, {'key': 'node-role.kubernetes.io/control-plane', 'effect': 'NoSchedule'}]}}, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxUnavailable': '25%', 'maxSurge': '25%'}}, 'revisionHistoryLimit': 10, 'progressDeadlineSeconds': 600}, 'status': {'observedGeneration': 1, 'replicas': 1, 'updatedReplicas': 1, 'readyReplicas': 1, 'availableReplicas': 1, 'conditions': [{'type': 'Available', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:31:47Z', 'lastTransitionTime': '2025-10-01T12:31:47Z', 'reason': 'MinimumReplicasAvailable', 'message': 'Deployment has minimum availability.'}, {'type': 'Progressing', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:31:47Z', 'lastTransitionTime': '2025-10-01T12:31:41Z', 'reason': 'NewReplicaSetAvailable', 'message': 'ReplicaSet "capi-kubeadm-bootstrap-controller-manager-894c86bc" has successfully progressed.'}]}, 'apiVersion': 'apps/v1', 'kind': 'Deployment'})

TASK [bootstrap : Get deployment resources in namespace capd-system] ***********
Wednesday 01 October 2025  12:32:40 +0000 (0:00:00.950)       0:03:12.275 ***** 
Wednesday 01 October 2025  12:32:40 +0000 (0:00:00.950)       0:03:12.274 ***** 
ok: [127.0.0.1]

TASK [bootstrap : Print deployment resources in namespace capd-system] *********
Wednesday 01 October 2025  12:32:41 +0000 (0:00:01.181)       0:03:13.457 ***** 
Wednesday 01 October 2025  12:32:41 +0000 (0:00:01.181)       0:03:13.456 ***** 
ok: [127.0.0.1] => {
    "deployment_list.resources": [
        {
            "apiVersion": "apps/v1",
            "kind": "Deployment",
            "metadata": {
                "annotations": {
                    "config.k8s.io/owning-inventory": "3c43b76004a8ce0f9b90a4c21b9b7df375437c6a-1759321924452811806",
                    "deployment.kubernetes.io/revision": "1",
                    "internal.kpt.dev/upstream-identifier": "apps|Deployment|capd-system|capd-controller-manager",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{\"config.k8s.io/owning-inventory\":\"3c43b76004a8ce0f9b90a4c21b9b7df375437c6a-1759321924452811806\",\"internal.kpt.dev/upstream-identifier\":\"apps|Deployment|capd-system|capd-controller-manager\"},\"labels\":{\"cluster.x-k8s.io/provider\":\"infrastructure-docker\",\"control-plane\":\"controller-manager\"},\"name\":\"capd-controller-manager\",\"namespace\":\"capd-system\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"cluster.x-k8s.io/provider\":\"infrastructure-docker\",\"control-plane\":\"controller-manager\"}},\"template\":{\"metadata\":{\"labels\":{\"cluster.x-k8s.io/provider\":\"infrastructure-docker\",\"control-plane\":\"controller-manager\"}},\"spec\":{\"containers\":[{\"args\":[\"--leader-elect\",\"--diagnostics-address=:8443\",\"--insecure-diagnostics=false\",\"--feature-gates=MachinePool=false,ClusterTopology=true\"],\"env\":[{\"name\":\"POD_NAMESPACE\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.namespace\"}}},{\"name\":\"POD_NAME\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.name\"}}},{\"name\":\"POD_UID\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.uid\"}}},{\"name\":\"DOCKER_HOST\"}],\"image\":\"gcr.io/k8s-staging-cluster-api/capd-manager:v1.8.1\",\"imagePullPolicy\":\"IfNotPresent\",\"livenessProbe\":{\"httpGet\":{\"path\":\"/healthz\",\"port\":\"healthz\"}},\"name\":\"manager\",\"ports\":[{\"containerPort\":9443,\"name\":\"webhook-server\",\"protocol\":\"TCP\"},{\"containerPort\":9440,\"name\":\"healthz\",\"protocol\":\"TCP\"},{\"containerPort\":8443,\"name\":\"metrics\",\"protocol\":\"TCP\"}],\"readinessProbe\":{\"httpGet\":{\"path\":\"/readyz\",\"port\":\"healthz\"}},\"securityContext\":{\"privileged\":true},\"terminationMessagePolicy\":\"FallbackToLogsOnError\",\"volumeMounts\":[{\"mountPath\":\"/tmp/k8s-webhook-server/serving-certs\",\"name\":\"cert\",\"readOnly\":true},{\"mountPath\":\"/var/run/docker.sock\",\"name\":\"dockersock\"}]}],\"serviceAccountName\":\"capd-manager\",\"terminationGracePeriodSeconds\":10,\"tolerations\":[{\"effect\":\"NoSchedule\",\"key\":\"node-role.kubernetes.io/master\"},{\"effect\":\"NoSchedule\",\"key\":\"node-role.kubernetes.io/control-plane\"}],\"volumes\":[{\"name\":\"cert\",\"secret\":{\"secretName\":\"capd-webhook-service-cert\"}},{\"hostPath\":{\"path\":\"/var/run/docker.sock\"},\"name\":\"dockersock\"}]}}}}\n"
                },
                "creationTimestamp": "2025-10-01T12:32:06Z",
                "generation": 1,
                "labels": {
                    "cluster.x-k8s.io/provider": "infrastructure-docker",
                    "control-plane": "controller-manager"
                },
                "managedFields": [
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:config.k8s.io/owning-inventory": {},
                                    "f:internal.kpt.dev/upstream-identifier": {},
                                    "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:cluster.x-k8s.io/provider": {},
                                    "f:control-plane": {}
                                }
                            },
                            "f:spec": {
                                "f:progressDeadlineSeconds": {},
                                "f:replicas": {},
                                "f:revisionHistoryLimit": {},
                                "f:selector": {},
                                "f:strategy": {
                                    "f:rollingUpdate": {
                                        ".": {},
                                        "f:maxSurge": {},
                                        "f:maxUnavailable": {}
                                    },
                                    "f:type": {}
                                },
                                "f:template": {
                                    "f:metadata": {
                                        "f:labels": {
                                            ".": {},
                                            "f:cluster.x-k8s.io/provider": {},
                                            "f:control-plane": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:containers": {
                                            "k:{\"name\":\"manager\"}": {
                                                ".": {},
                                                "f:args": {},
                                                "f:env": {
                                                    ".": {},
                                                    "k:{\"name\":\"DOCKER_HOST\"}": {
                                                        ".": {},
                                                        "f:name": {}
                                                    },
                                                    "k:{\"name\":\"POD_NAME\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"POD_NAMESPACE\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"POD_UID\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    }
                                                },
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:livenessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:name": {},
                                                "f:ports": {
                                                    ".": {},
                                                    "k:{\"containerPort\":8443,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    },
                                                    "k:{\"containerPort\":9440,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    },
                                                    "k:{\"containerPort\":9443,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    }
                                                },
                                                "f:readinessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:resources": {},
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:privileged": {}
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {},
                                                "f:volumeMounts": {
                                                    ".": {},
                                                    "k:{\"mountPath\":\"/tmp/k8s-webhook-server/serving-certs\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {},
                                                        "f:readOnly": {}
                                                    },
                                                    "k:{\"mountPath\":\"/var/run/docker.sock\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    }
                                                }
                                            }
                                        },
                                        "f:dnsPolicy": {},
                                        "f:restartPolicy": {},
                                        "f:schedulerName": {},
                                        "f:securityContext": {},
                                        "f:serviceAccount": {},
                                        "f:serviceAccountName": {},
                                        "f:terminationGracePeriodSeconds": {},
                                        "f:tolerations": {},
                                        "f:volumes": {
                                            ".": {},
                                            "k:{\"name\":\"cert\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:secret": {
                                                    ".": {},
                                                    "f:defaultMode": {},
                                                    "f:secretName": {}
                                                }
                                            },
                                            "k:{\"name\":\"dockersock\"}": {
                                                ".": {},
                                                "f:hostPath": {
                                                    ".": {},
                                                    "f:path": {},
                                                    "f:type": {}
                                                },
                                                "f:name": {}
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "manager": "kubectl",
                        "operation": "Update",
                        "time": "2025-10-01T12:32:06Z"
                    },
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    "f:deployment.kubernetes.io/revision": {}
                                }
                            },
                            "f:status": {
                                "f:availableReplicas": {},
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"Available\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Progressing\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:observedGeneration": {},
                                "f:readyReplicas": {},
                                "f:replicas": {},
                                "f:updatedReplicas": {}
                            }
                        },
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "subresource": "status",
                        "time": "2025-10-01T12:32:10Z"
                    }
                ],
                "name": "capd-controller-manager",
                "namespace": "capd-system",
                "resourceVersion": "2966",
                "uid": "fabd1de3-6ab4-4386-a337-68508d816913"
            },
            "spec": {
                "progressDeadlineSeconds": 600,
                "replicas": 1,
                "revisionHistoryLimit": 10,
                "selector": {
                    "matchLabels": {
                        "cluster.x-k8s.io/provider": "infrastructure-docker",
                        "control-plane": "controller-manager"
                    }
                },
                "strategy": {
                    "rollingUpdate": {
                        "maxSurge": "25%",
                        "maxUnavailable": "25%"
                    },
                    "type": "RollingUpdate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "cluster.x-k8s.io/provider": "infrastructure-docker",
                            "control-plane": "controller-manager"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "args": [
                                    "--leader-elect",
                                    "--diagnostics-address=:8443",
                                    "--insecure-diagnostics=false",
                                    "--feature-gates=MachinePool=false,ClusterTopology=true"
                                ],
                                "env": [
                                    {
                                        "name": "POD_NAMESPACE",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POD_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.name"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POD_UID",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.uid"
                                            }
                                        }
                                    },
                                    {
                                        "name": "DOCKER_HOST"
                                    }
                                ],
                                "image": "gcr.io/k8s-staging-cluster-api/capd-manager:v1.8.1",
                                "imagePullPolicy": "IfNotPresent",
                                "livenessProbe": {
                                    "failureThreshold": 3,
                                    "httpGet": {
                                        "path": "/healthz",
                                        "port": "healthz",
                                        "scheme": "HTTP"
                                    },
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 1
                                },
                                "name": "manager",
                                "ports": [
                                    {
                                        "containerPort": 9443,
                                        "name": "webhook-server",
                                        "protocol": "TCP"
                                    },
                                    {
                                        "containerPort": 9440,
                                        "name": "healthz",
                                        "protocol": "TCP"
                                    },
                                    {
                                        "containerPort": 8443,
                                        "name": "metrics",
                                        "protocol": "TCP"
                                    }
                                ],
                                "readinessProbe": {
                                    "failureThreshold": 3,
                                    "httpGet": {
                                        "path": "/readyz",
                                        "port": "healthz",
                                        "scheme": "HTTP"
                                    },
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 1
                                },
                                "resources": {},
                                "securityContext": {
                                    "privileged": true
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "FallbackToLogsOnError",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/tmp/k8s-webhook-server/serving-certs",
                                        "name": "cert",
                                        "readOnly": true
                                    },
                                    {
                                        "mountPath": "/var/run/docker.sock",
                                        "name": "dockersock"
                                    }
                                ]
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "restartPolicy": "Always",
                        "schedulerName": "default-scheduler",
                        "securityContext": {},
                        "serviceAccount": "capd-manager",
                        "serviceAccountName": "capd-manager",
                        "terminationGracePeriodSeconds": 10,
                        "tolerations": [
                            {
                                "effect": "NoSchedule",
                                "key": "node-role.kubernetes.io/master"
                            },
                            {
                                "effect": "NoSchedule",
                                "key": "node-role.kubernetes.io/control-plane"
                            }
                        ],
                        "volumes": [
                            {
                                "name": "cert",
                                "secret": {
                                    "defaultMode": 420,
                                    "secretName": "capd-webhook-service-cert"
                                }
                            },
                            {
                                "hostPath": {
                                    "path": "/var/run/docker.sock",
                                    "type": ""
                                },
                                "name": "dockersock"
                            }
                        ]
                    }
                }
            },
            "status": {
                "availableReplicas": 1,
                "conditions": [
                    {
                        "lastTransitionTime": "2025-10-01T12:32:10Z",
                        "lastUpdateTime": "2025-10-01T12:32:10Z",
                        "message": "Deployment has minimum availability.",
                        "reason": "MinimumReplicasAvailable",
                        "status": "True",
                        "type": "Available"
                    },
                    {
                        "lastTransitionTime": "2025-10-01T12:32:06Z",
                        "lastUpdateTime": "2025-10-01T12:32:10Z",
                        "message": "ReplicaSet \"capd-controller-manager-7b4cb4f885\" has successfully progressed.",
                        "reason": "NewReplicaSetAvailable",
                        "status": "True",
                        "type": "Progressing"
                    }
                ],
                "observedGeneration": 1,
                "readyReplicas": 1,
                "replicas": 1,
                "updatedReplicas": 1
            }
        }
    ]
}

TASK [bootstrap : Wait for deployments in namespace capd-system] ***************
Wednesday 01 October 2025  12:32:41 +0000 (0:00:00.101)       0:03:13.558 ***** 
Wednesday 01 October 2025  12:32:41 +0000 (0:00:00.101)       0:03:13.557 ***** 
ok: [127.0.0.1] => (item={'metadata': {'name': 'capd-controller-manager', 'namespace': 'capd-system', 'uid': 'fabd1de3-6ab4-4386-a337-68508d816913', 'resourceVersion': '2966', 'generation': 1, 'creationTimestamp': '2025-10-01T12:32:06Z', 'labels': {'cluster.x-k8s.io/provider': 'infrastructure-docker', 'control-plane': 'controller-manager'}, 'annotations': {'config.k8s.io/owning-inventory': '3c43b76004a8ce0f9b90a4c21b9b7df375437c6a-1759321924452811806', 'deployment.kubernetes.io/revision': '1', 'internal.kpt.dev/upstream-identifier': 'apps|Deployment|capd-system|capd-controller-manager', 'kubectl.kubernetes.io/last-applied-configuration': '{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"config.k8s.io/owning-inventory":"3c43b76004a8ce0f9b90a4c21b9b7df375437c6a-1759321924452811806","internal.kpt.dev/upstream-identifier":"apps|Deployment|capd-system|capd-controller-manager"},"labels":{"cluster.x-k8s.io/provider":"infrastructure-docker","control-plane":"controller-manager"},"name":"capd-controller-manager","namespace":"capd-system"},"spec":{"replicas":1,"selector":{"matchLabels":{"cluster.x-k8s.io/provider":"infrastructure-docker","control-plane":"controller-manager"}},"template":{"metadata":{"labels":{"cluster.x-k8s.io/provider":"infrastructure-docker","control-plane":"controller-manager"}},"spec":{"containers":[{"args":["--leader-elect","--diagnostics-address=:8443","--insecure-diagnostics=false","--feature-gates=MachinePool=false,ClusterTopology=true"],"env":[{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"POD_UID","valueFrom":{"fieldRef":{"fieldPath":"metadata.uid"}}},{"name":"DOCKER_HOST"}],"image":"gcr.io/k8s-staging-cluster-api/capd-manager:v1.8.1","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/healthz","port":"healthz"}},"name":"manager","ports":[{"containerPort":9443,"name":"webhook-server","protocol":"TCP"},{"containerPort":9440,"name":"healthz","protocol":"TCP"},{"containerPort":8443,"name":"metrics","protocol":"TCP"}],"readinessProbe":{"httpGet":{"path":"/readyz","port":"healthz"}},"securityContext":{"privileged":true},"terminationMessagePolicy":"FallbackToLogsOnError","volumeMounts":[{"mountPath":"/tmp/k8s-webhook-server/serving-certs","name":"cert","readOnly":true},{"mountPath":"/var/run/docker.sock","name":"dockersock"}]}],"serviceAccountName":"capd-manager","terminationGracePeriodSeconds":10,"tolerations":[{"effect":"NoSchedule","key":"node-role.kubernetes.io/master"},{"effect":"NoSchedule","key":"node-role.kubernetes.io/control-plane"}],"volumes":[{"name":"cert","secret":{"secretName":"capd-webhook-service-cert"}},{"hostPath":{"path":"/var/run/docker.sock"},"name":"dockersock"}]}}}}\n'}, 'managedFields': [{'manager': 'kubectl', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:32:06Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'.': {}, 'f:config.k8s.io/owning-inventory': {}, 'f:internal.kpt.dev/upstream-identifier': {}, 'f:kubectl.kubernetes.io/last-applied-configuration': {}}, 'f:labels': {'.': {}, 'f:cluster.x-k8s.io/provider': {}, 'f:control-plane': {}}}, 'f:spec': {'f:progressDeadlineSeconds': {}, 'f:replicas': {}, 'f:revisionHistoryLimit': {}, 'f:selector': {}, 'f:strategy': {'f:rollingUpdate': {'.': {}, 'f:maxSurge': {}, 'f:maxUnavailable': {}}, 'f:type': {}}, 'f:template': {'f:metadata': {'f:labels': {'.': {}, 'f:cluster.x-k8s.io/provider': {}, 'f:control-plane': {}}}, 'f:spec': {'f:containers': {'k:{"name":"manager"}': {'.': {}, 'f:args': {}, 'f:env': {'.': {}, 'k:{"name":"DOCKER_HOST"}': {'.': {}, 'f:name': {}}, 'k:{"name":"POD_NAME"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}, 'k:{"name":"POD_NAMESPACE"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}, 'k:{"name":"POD_UID"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}}, 'f:image': {}, 'f:imagePullPolicy': {}, 'f:livenessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:httpGet': {'.': {}, 'f:path': {}, 'f:port': {}, 'f:scheme': {}}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:timeoutSeconds': {}}, 'f:name': {}, 'f:ports': {'.': {}, 'k:{"containerPort":8443,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:name': {}, 'f:protocol': {}}, 'k:{"containerPort":9440,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:name': {}, 'f:protocol': {}}, 'k:{"containerPort":9443,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:name': {}, 'f:protocol': {}}}, 'f:readinessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:httpGet': {'.': {}, 'f:path': {}, 'f:port': {}, 'f:scheme': {}}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:timeoutSeconds': {}}, 'f:resources': {}, 'f:securityContext': {'.': {}, 'f:privileged': {}}, 'f:terminationMessagePath': {}, 'f:terminationMessagePolicy': {}, 'f:volumeMounts': {'.': {}, 'k:{"mountPath":"/tmp/k8s-webhook-server/serving-certs"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}, 'f:readOnly': {}}, 'k:{"mountPath":"/var/run/docker.sock"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}}}}, 'f:dnsPolicy': {}, 'f:restartPolicy': {}, 'f:schedulerName': {}, 'f:securityContext': {}, 'f:serviceAccount': {}, 'f:serviceAccountName': {}, 'f:terminationGracePeriodSeconds': {}, 'f:tolerations': {}, 'f:volumes': {'.': {}, 'k:{"name":"cert"}': {'.': {}, 'f:name': {}, 'f:secret': {'.': {}, 'f:defaultMode': {}, 'f:secretName': {}}}, 'k:{"name":"dockersock"}': {'.': {}, 'f:hostPath': {'.': {}, 'f:path': {}, 'f:type': {}}, 'f:name': {}}}}}}}}, {'manager': 'kube-controller-manager', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:32:10Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'f:deployment.kubernetes.io/revision': {}}}, 'f:status': {'f:availableReplicas': {}, 'f:conditions': {'.': {}, 'k:{"type":"Available"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}, 'k:{"type":"Progressing"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}}, 'f:observedGeneration': {}, 'f:readyReplicas': {}, 'f:replicas': {}, 'f:updatedReplicas': {}}}, 'subresource': 'status'}]}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'cluster.x-k8s.io/provider': 'infrastructure-docker', 'control-plane': 'controller-manager'}}, 'template': {'metadata': {'labels': {'cluster.x-k8s.io/provider': 'infrastructure-docker', 'control-plane': 'controller-manager'}}, 'spec': {'volumes': [{'name': 'cert', 'secret': {'secretName': 'capd-webhook-service-cert', 'defaultMode': 420}}, {'name': 'dockersock', 'hostPath': {'path': '/var/run/docker.sock', 'type': ''}}], 'containers': [{'name': 'manager', 'image': 'gcr.io/k8s-staging-cluster-api/capd-manager:v1.8.1', 'args': ['--leader-elect', '--diagnostics-address=:8443', '--insecure-diagnostics=false', '--feature-gates=MachinePool=false,ClusterTopology=true'], 'ports': [{'name': 'webhook-server', 'containerPort': 9443, 'protocol': 'TCP'}, {'name': 'healthz', 'containerPort': 9440, 'protocol': 'TCP'}, {'name': 'metrics', 'containerPort': 8443, 'protocol': 'TCP'}], 'env': [{'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'metadata.name'}}}, {'name': 'POD_UID', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'metadata.uid'}}}, {'name': 'DOCKER_HOST'}], 'resources': {}, 'volumeMounts': [{'name': 'cert', 'readOnly': True, 'mountPath': '/tmp/k8s-webhook-server/serving-certs'}, {'name': 'dockersock', 'mountPath': '/var/run/docker.sock'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'healthz', 'scheme': 'HTTP'}, 'timeoutSeconds': 1, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 3}, 'readinessProbe': {'httpGet': {'path': '/readyz', 'port': 'healthz', 'scheme': 'HTTP'}, 'timeoutSeconds': 1, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 3}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'FallbackToLogsOnError', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'privileged': True}}], 'restartPolicy': 'Always', 'terminationGracePeriodSeconds': 10, 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'capd-manager', 'serviceAccount': 'capd-manager', 'securityContext': {}, 'schedulerName': 'default-scheduler', 'tolerations': [{'key': 'node-role.kubernetes.io/master', 'effect': 'NoSchedule'}, {'key': 'node-role.kubernetes.io/control-plane', 'effect': 'NoSchedule'}]}}, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxUnavailable': '25%', 'maxSurge': '25%'}}, 'revisionHistoryLimit': 10, 'progressDeadlineSeconds': 600}, 'status': {'observedGeneration': 1, 'replicas': 1, 'updatedReplicas': 1, 'readyReplicas': 1, 'availableReplicas': 1, 'conditions': [{'type': 'Available', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:32:10Z', 'lastTransitionTime': '2025-10-01T12:32:10Z', 'reason': 'MinimumReplicasAvailable', 'message': 'Deployment has minimum availability.'}, {'type': 'Progressing', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:32:10Z', 'lastTransitionTime': '2025-10-01T12:32:06Z', 'reason': 'NewReplicaSetAvailable', 'message': 'ReplicaSet "capd-controller-manager-7b4cb4f885" has successfully progressed.'}]}, 'apiVersion': 'apps/v1', 'kind': 'Deployment'})

TASK [bootstrap : Debug k8s.context value and its type] ************************
Wednesday 01 October 2025  12:32:42 +0000 (0:00:00.964)       0:03:14.522 ***** 
Wednesday 01 October 2025  12:32:42 +0000 (0:00:00.964)       0:03:14.522 ***** 
ok: [127.0.0.1] => {
    "msg": [
        "Value of k8s.context: 'kubernetes-admin@kubernetes'",
        "Type of k8s.context: AnsibleUnicode",
        "Result of condition 'k8s.context is defined': True",
        "Result of condition 'k8s.context != 'kind-kind'': True",
        "Overall 'when' condition result (if variable defined): True"
    ]
}

TASK [bootstrap : Apply kpt packages that are supported only on nonkind_k8s clusters] ***
Wednesday 01 October 2025  12:32:42 +0000 (0:00:00.080)       0:03:14.603 ***** 
Wednesday 01 October 2025  12:32:42 +0000 (0:00:00.080)       0:03:14.602 ***** 
included: /home/rehanfazal/test-infra/e2e/provision/playbooks/roles/bootstrap/tasks/apply-pkgs-nonkind-k8s.yml for 127.0.0.1

TASK [bootstrap : Init job ids array for nonkind_k8s clusters] *****************
Wednesday 01 October 2025  12:32:42 +0000 (0:00:00.077)       0:03:14.681 ***** 
Wednesday 01 October 2025  12:32:42 +0000 (0:00:00.077)       0:03:14.680 ***** 
ok: [127.0.0.1]

TASK [bootstrap : Create list of packages for install applicable only on nonkind_k8s clusters] ***
Wednesday 01 October 2025  12:32:42 +0000 (0:00:00.046)       0:03:14.727 ***** 
Wednesday 01 October 2025  12:32:42 +0000 (0:00:00.046)       0:03:14.727 ***** 
ok: [127.0.0.1]

TASK [Deploy base packages applicable only on nonkind_k8s clusters] ************
Wednesday 01 October 2025  12:32:42 +0000 (0:00:00.052)       0:03:14.780 ***** 
Wednesday 01 October 2025  12:32:42 +0000 (0:00:00.052)       0:03:14.779 ***** 
included: kpt for 127.0.0.1 => (item={'repo_uri': 'https://github.com/nephio-project/catalog.git', 'pkg': 'infra/capi/cluster-capi-infrastructure-metal3', 'version': 'main', 'async': 1500, 'poll': 0})

TASK [kpt : Define working directory] ******************************************
Wednesday 01 October 2025  12:32:42 +0000 (0:00:00.126)       0:03:14.907 ***** 
Wednesday 01 October 2025  12:32:42 +0000 (0:00:00.126)       0:03:14.906 ***** 
ok: [127.0.0.1]

TASK [kpt : Create base directory if it does not exist: /tmp/kpt-pkg/infra/capi/cluster-capi-infrastructure-metal3] ***
Wednesday 01 October 2025  12:32:42 +0000 (0:00:00.052)       0:03:14.959 ***** 
Wednesday 01 October 2025  12:32:42 +0000 (0:00:00.052)       0:03:14.958 ***** 
ok: [127.0.0.1]

TASK [kpt : Fetch package: infra/capi/cluster-capi-infrastructure-metal3] ******
Wednesday 01 October 2025  12:32:43 +0000 (0:00:00.241)       0:03:15.201 ***** 
Wednesday 01 October 2025  12:32:43 +0000 (0:00:00.241)       0:03:15.200 ***** 
changed: [127.0.0.1]

TASK [kpt : Get package content information for infra/capi/cluster-capi-infrastructure-metal3] ***
Wednesday 01 October 2025  12:32:44 +0000 (0:00:01.175)       0:03:16.377 ***** 
Wednesday 01 October 2025  12:32:44 +0000 (0:00:01.175)       0:03:16.376 ***** 
ok: [127.0.0.1]

TASK [kpt : Print package content information for infra/capi/cluster-capi-infrastructure-metal3] ***
Wednesday 01 October 2025  12:32:44 +0000 (0:00:00.486)       0:03:16.863 ***** 
Wednesday 01 October 2025  12:32:44 +0000 (0:00:00.486)       0:03:16.862 ***** 
ok: [127.0.0.1] => {
    "kpt_pkg_tree.stdout_lines": [
        "Package \"cluster-capi-infrastructure-metal3\"",
        "├── [Kptfile]  Kptfile cluster-capi-infrastructure-metal3",
        "├── [cluster-api-infrastructure-metal3.yaml]  ClusterRole capm3-manager-role",
        "├── [cluster-api-infrastructure-metal3.yaml]  ClusterRoleBinding capm3-manager-rolebinding",
        "├── [cluster-api-infrastructure-metal3.yaml]  MutatingWebhookConfiguration capm3-mutating-webhook-configuration",
        "├── [cluster-api-infrastructure-metal3.yaml]  Namespace capm3-system",
        "├── [cluster-api-infrastructure-metal3.yaml]  ValidatingWebhookConfiguration capm3-validating-webhook-configuration",
        "├── [cluster-api-infrastructure-metal3.yaml]  CustomResourceDefinition ipaddresses.ipam.metal3.io",
        "├── [cluster-api-infrastructure-metal3.yaml]  ClusterRole ipam-manager-role",
        "├── [cluster-api-infrastructure-metal3.yaml]  ClusterRoleBinding ipam-manager-rolebinding",
        "├── [cluster-api-infrastructure-metal3.yaml]  MutatingWebhookConfiguration ipam-mutating-webhook-configuration",
        "├── [cluster-api-infrastructure-metal3.yaml]  ValidatingWebhookConfiguration ipam-validating-webhook-configuration",
        "├── [cluster-api-infrastructure-metal3.yaml]  CustomResourceDefinition ipclaims.ipam.metal3.io",
        "├── [cluster-api-infrastructure-metal3.yaml]  CustomResourceDefinition ippools.ipam.metal3.io",
        "├── [cluster-api-infrastructure-metal3.yaml]  CustomResourceDefinition metal3clusters.infrastructure.cluster.x-k8s.io",
        "├── [cluster-api-infrastructure-metal3.yaml]  CustomResourceDefinition metal3clustertemplates.infrastructure.cluster.x-k8s.io",
        "├── [cluster-api-infrastructure-metal3.yaml]  CustomResourceDefinition metal3dataclaims.infrastructure.cluster.x-k8s.io",
        "├── [cluster-api-infrastructure-metal3.yaml]  CustomResourceDefinition metal3datas.infrastructure.cluster.x-k8s.io",
        "├── [cluster-api-infrastructure-metal3.yaml]  CustomResourceDefinition metal3datatemplates.infrastructure.cluster.x-k8s.io",
        "├── [cluster-api-infrastructure-metal3.yaml]  CustomResourceDefinition metal3machines.infrastructure.cluster.x-k8s.io",
        "├── [cluster-api-infrastructure-metal3.yaml]  CustomResourceDefinition metal3machinetemplates.infrastructure.cluster.x-k8s.io",
        "├── [cluster-api-infrastructure-metal3.yaml]  CustomResourceDefinition metal3remediations.infrastructure.cluster.x-k8s.io",
        "├── [cluster-api-infrastructure-metal3.yaml]  CustomResourceDefinition metal3remediationtemplates.infrastructure.cluster.x-k8s.io",
        "├── [cluster-api-infrastructure-metal3.yaml]  ConfigMap capm3-system/capm3-capm3fasttrack-configmap",
        "├── [cluster-api-infrastructure-metal3.yaml]  Deployment capm3-system/capm3-controller-manager",
        "├── [cluster-api-infrastructure-metal3.yaml]  Role capm3-system/capm3-leader-election-role",
        "├── [cluster-api-infrastructure-metal3.yaml]  RoleBinding capm3-system/capm3-leader-election-rolebinding",
        "├── [cluster-api-infrastructure-metal3.yaml]  ServiceAccount capm3-system/capm3-manager",
        "├── [cluster-api-infrastructure-metal3.yaml]  Issuer capm3-system/capm3-selfsigned-issuer",
        "├── [cluster-api-infrastructure-metal3.yaml]  Certificate capm3-system/capm3-serving-cert",
        "├── [cluster-api-infrastructure-metal3.yaml]  Service capm3-system/capm3-webhook-service",
        "├── [cluster-api-infrastructure-metal3.yaml]  Deployment capm3-system/ipam-controller-manager",
        "├── [cluster-api-infrastructure-metal3.yaml]  Role capm3-system/ipam-leader-election-role",
        "├── [cluster-api-infrastructure-metal3.yaml]  RoleBinding capm3-system/ipam-leader-election-rolebinding",
        "├── [cluster-api-infrastructure-metal3.yaml]  ServiceAccount capm3-system/ipam-manager",
        "├── [cluster-api-infrastructure-metal3.yaml]  Issuer capm3-system/ipam-selfsigned-issuer",
        "├── [cluster-api-infrastructure-metal3.yaml]  Certificate capm3-system/ipam-serving-cert",
        "├── [cluster-api-infrastructure-metal3.yaml]  Service capm3-system/ipam-webhook-service",
        "└── [package-context.yaml]  ConfigMap kptfile.kpt.dev"
    ]
}

TASK [kpt : Render package: infra/capi/cluster-capi-infrastructure-metal3] *****
Wednesday 01 October 2025  12:32:44 +0000 (0:00:00.071)       0:03:16.935 ***** 
Wednesday 01 October 2025  12:32:44 +0000 (0:00:00.071)       0:03:16.934 ***** 
ok: [127.0.0.1]

TASK [kpt : Recursively restore ownership of a directory package] **************
Wednesday 01 October 2025  12:32:45 +0000 (0:00:00.443)       0:03:17.378 ***** 
Wednesday 01 October 2025  12:32:45 +0000 (0:00:00.443)       0:03:17.377 ***** 
ok: [127.0.0.1]

TASK [kpt : Get package differences between local and upstream: infra/capi/cluster-capi-infrastructure-metal3] ***
Wednesday 01 October 2025  12:32:45 +0000 (0:00:00.340)       0:03:17.719 ***** 
Wednesday 01 October 2025  12:32:45 +0000 (0:00:00.340)       0:03:17.718 ***** 
ok: [127.0.0.1]

TASK [kpt : Print package differences: infra/capi/cluster-capi-infrastructure-metal3] ***
Wednesday 01 October 2025  12:32:47 +0000 (0:00:01.669)       0:03:19.389 ***** 
Wednesday 01 October 2025  12:32:47 +0000 (0:00:01.669)       0:03:19.388 ***** 
ok: [127.0.0.1] => {
    "kpt_pkg_diff.stdout_lines": []
}

TASK [kpt : Check package has been initialized] ********************************
Wednesday 01 October 2025  12:32:47 +0000 (0:00:00.067)       0:03:19.456 ***** 
Wednesday 01 October 2025  12:32:47 +0000 (0:00:00.067)       0:03:19.455 ***** 
ok: [127.0.0.1]

TASK [kpt : Init package: infra/capi/cluster-capi-infrastructure-metal3] *******
Wednesday 01 October 2025  12:32:47 +0000 (0:00:00.271)       0:03:19.727 ***** 
Wednesday 01 October 2025  12:32:47 +0000 (0:00:00.271)       0:03:19.726 ***** 
changed: [127.0.0.1]

TASK [kpt : Print package initialization for infra/capi/cluster-capi-infrastructure-metal3] ***
Wednesday 01 October 2025  12:32:48 +0000 (0:00:00.424)       0:03:20.152 ***** 
Wednesday 01 October 2025  12:32:48 +0000 (0:00:00.424)       0:03:20.151 ***** 
ok: [127.0.0.1] => {
    "kpt_live_init": {
        "changed": true,
        "cmd": "/usr/local/bin/kpt live init /tmp/kpt-pkg/infra/capi/cluster-capi-infrastructure-metal3 --context kubernetes-admin@kubernetes",
        "failed": false,
        "rc": 0,
        "stdout": "",
        "stdout_lines": []
    }
}

TASK [kpt : Apply package: infra/capi/cluster-capi-infrastructure-metal3] ******
Wednesday 01 October 2025  12:32:48 +0000 (0:00:00.069)       0:03:20.221 ***** 
Wednesday 01 October 2025  12:32:48 +0000 (0:00:00.069)       0:03:20.220 ***** 
ok: [127.0.0.1]

TASK [kpt : Export job ids array] **********************************************
Wednesday 01 October 2025  12:32:48 +0000 (0:00:00.273)       0:03:20.494 ***** 
Wednesday 01 October 2025  12:32:48 +0000 (0:00:00.273)       0:03:20.493 ***** 
skipping: [127.0.0.1]

TASK [kpt : Print job ids] *****************************************************
Wednesday 01 October 2025  12:32:48 +0000 (0:00:00.042)       0:03:20.537 ***** 
Wednesday 01 October 2025  12:32:48 +0000 (0:00:00.042)       0:03:20.536 ***** 
ok: [127.0.0.1] => {
    "all_kpt_apply": []
}

TASK [bootstrap : Wait for packages to be applied on nonkind_k8s clusters] *****
Wednesday 01 October 2025  12:32:48 +0000 (0:00:00.078)       0:03:20.615 ***** 
Wednesday 01 October 2025  12:32:48 +0000 (0:00:00.078)       0:03:20.615 ***** 
skipping: [127.0.0.1]

TASK [bootstrap : Create list of namespaces on nonkind_k8s clusters] ***********
Wednesday 01 October 2025  12:32:48 +0000 (0:00:00.040)       0:03:20.656 ***** 
Wednesday 01 October 2025  12:32:48 +0000 (0:00:00.040)       0:03:20.655 ***** 
ok: [127.0.0.1]

TASK [bootstrap : Wait for deployments on nonkind_k8s clusters] ****************
Wednesday 01 October 2025  12:32:48 +0000 (0:00:00.063)       0:03:20.720 ***** 
Wednesday 01 October 2025  12:32:48 +0000 (0:00:00.063)       0:03:20.719 ***** 
included: /home/rehanfazal/test-infra/e2e/provision/playbooks/roles/bootstrap/tasks/wait-deployments.yml for 127.0.0.1 => (item=capm3-system)

TASK [bootstrap : Get deployment resources in namespace capm3-system] **********
Wednesday 01 October 2025  12:32:48 +0000 (0:00:00.086)       0:03:20.806 ***** 
Wednesday 01 October 2025  12:32:48 +0000 (0:00:00.086)       0:03:20.805 ***** 
ok: [127.0.0.1]

TASK [bootstrap : Print deployment resources in namespace capm3-system] ********
Wednesday 01 October 2025  12:32:49 +0000 (0:00:01.045)       0:03:21.851 ***** 
Wednesday 01 October 2025  12:32:49 +0000 (0:00:01.045)       0:03:21.850 ***** 
ok: [127.0.0.1] => {
    "deployment_list.resources": []
}

TASK [bootstrap : Wait for deployments in namespace capm3-system] **************
Wednesday 01 October 2025  12:32:49 +0000 (0:00:00.063)       0:03:21.915 ***** 
Wednesday 01 October 2025  12:32:49 +0000 (0:00:00.063)       0:03:21.914 ***** 
skipping: [127.0.0.1]

TASK [bootstrap : Delete docker-registry secret] *******************************
Wednesday 01 October 2025  12:32:49 +0000 (0:00:00.040)       0:03:21.955 ***** 
Wednesday 01 October 2025  12:32:49 +0000 (0:00:00.040)       0:03:21.954 ***** 
ok: [127.0.0.1]

TASK [bootstrap : Create docker-registry secret] *******************************
Wednesday 01 October 2025  12:32:50 +0000 (0:00:00.882)       0:03:22.838 ***** 
Wednesday 01 October 2025  12:32:50 +0000 (0:00:00.882)       0:03:22.837 ***** 
ok: [127.0.0.1]

TASK [bootstrap : Create docker-registry service account] **********************
Wednesday 01 October 2025  12:32:51 +0000 (0:00:00.525)       0:03:23.363 ***** 
Wednesday 01 October 2025  12:32:51 +0000 (0:00:00.525)       0:03:23.362 ***** 
changed: [127.0.0.1]

TASK [install : Init job ids array] ********************************************
Wednesday 01 October 2025  12:32:52 +0000 (0:00:00.883)       0:03:24.246 ***** 
Wednesday 01 October 2025  12:32:52 +0000 (0:00:00.883)       0:03:24.246 ***** 
ok: [127.0.0.1]

TASK [Deploy Nephio packages] **************************************************
Wednesday 01 October 2025  12:32:52 +0000 (0:00:00.055)       0:03:24.302 ***** 
Wednesday 01 October 2025  12:32:52 +0000 (0:00:00.055)       0:03:24.301 ***** 
included: kpt for 127.0.0.1 => (item={'repo_uri': 'https://github.com/nephio-project/catalog.git', 'pkg': 'nephio/core/porch', 'version': 'main', 'async': 480, 'poll': 5, 'inventory_id': 'nephio', 'resourcegroup_name': 'porch', 'resourcegroup_ns': 'porch-system'})
included: kpt for 127.0.0.1 => (item={'repo_uri': 'https://github.com/nephio-project/catalog.git', 'pkg': 'nephio/core/nephio-operator', 'version': 'main', 'async': 480, 'poll': 5})
included: kpt for 127.0.0.1 => (item={'repo_uri': 'https://github.com/nephio-project/catalog.git', 'pkg': 'nephio/core/configsync', 'version': 'main', 'async': 240, 'poll': 5})
included: kpt for 127.0.0.1 => (item={'repo_uri': 'https://github.com/nephio-project/catalog.git', 'pkg': 'nephio/optional/network-config', 'version': 'main', 'async': 480, 'poll': 0})
included: kpt for 127.0.0.1 => (item={'repo_uri': 'https://github.com/nephio-project/catalog.git', 'pkg': 'nephio/optional/fluxcd', 'version': 'main', 'async': 240, 'poll': 5})
included: kpt for 127.0.0.1 => (item={'repo_uri': 'https://github.com/nephio-project/catalog.git', 'pkg': 'nephio/optional/argo-cd-full', 'version': 'main', 'async': 240, 'poll': 5})

TASK [kpt : Define working directory] ******************************************
Wednesday 01 October 2025  12:32:52 +0000 (0:00:00.247)       0:03:24.550 ***** 
Wednesday 01 October 2025  12:32:52 +0000 (0:00:00.247)       0:03:24.549 ***** 
ok: [127.0.0.1]

TASK [kpt : Create base directory if it does not exist: /tmp/kpt-pkg/nephio/core/porch] ***
Wednesday 01 October 2025  12:32:52 +0000 (0:00:00.051)       0:03:24.602 ***** 
Wednesday 01 October 2025  12:32:52 +0000 (0:00:00.051)       0:03:24.601 ***** 
changed: [127.0.0.1]

TASK [kpt : Fetch package: nephio/core/porch] **********************************
Wednesday 01 October 2025  12:32:52 +0000 (0:00:00.290)       0:03:24.893 ***** 
Wednesday 01 October 2025  12:32:52 +0000 (0:00:00.291)       0:03:24.892 ***** 
changed: [127.0.0.1]

TASK [kpt : Get package content information for nephio/core/porch] *************
Wednesday 01 October 2025  12:32:53 +0000 (0:00:00.983)       0:03:25.876 ***** 
Wednesday 01 October 2025  12:32:53 +0000 (0:00:00.983)       0:03:25.875 ***** 
ok: [127.0.0.1]

TASK [kpt : Print package content information for nephio/core/porch] ***********
Wednesday 01 October 2025  12:32:54 +0000 (0:00:00.390)       0:03:26.266 ***** 
Wednesday 01 October 2025  12:32:54 +0000 (0:00:00.390)       0:03:26.265 ***** 
ok: [127.0.0.1] => {
    "kpt_pkg_tree.stdout_lines": [
        "Package \"porch\"",
        "├── [0-packagerevs.yaml]  CustomResourceDefinition packagerevs.config.porch.kpt.dev",
        "├── [0-packagevariants.yaml]  CustomResourceDefinition packagevariants.config.porch.kpt.dev",
        "├── [0-packagevariantsets.yaml]  CustomResourceDefinition packagevariantsets.config.porch.kpt.dev",
        "├── [0-repositories.yaml]  CustomResourceDefinition repositories.config.porch.kpt.dev",
        "├── [1-namespace.yaml]  Namespace porch-fn-system",
        "├── [1-namespace.yaml]  Namespace porch-system",
        "├── [2-function-runner.yaml]  Deployment porch-system/function-runner",
        "├── [2-function-runner.yaml]  Service porch-system/function-runner",
        "├── [2-function-runner.yaml]  ConfigMap porch-system/pod-cache-config",
        "├── [2-function-runner.yaml]  ServiceAccount porch-system/porch-fn-runner",
        "├── [3-porch-server.yaml]  Service porch-system/api",
        "├── [3-porch-server.yaml]  Deployment porch-system/porch-server",
        "├── [3-porch-server.yaml]  ServiceAccount porch-system/porch-server",
        "├── [4-apiservice.yaml]  APIService v1alpha1.porch.kpt.dev",
        "├── [5-rbac.yaml]  ClusterRole aggregated-apiserver-clusterrole",
        "├── [5-rbac.yaml]  Role porch-fn-system/porch-function-executor",
        "├── [5-rbac.yaml]  Role porch-system/aggregated-apiserver-role",
        "├── [6-rbac-bind.yaml]  ClusterRoleBinding sample-apiserver-clusterrolebinding",
        "├── [6-rbac-bind.yaml]  RoleBinding porch-fn-system/porch-function-executor",
        "├── [6-rbac-bind.yaml]  RoleBinding porch-system/sample-apiserver-rolebinding",
        "├── [7-auth-reader.yaml]  RoleBinding kube-system/porch-auth-reader",
        "├── [8-auth-delegator.yaml]  ClusterRoleBinding porch:system:auth-delegator",
        "├── [9-controllers.yaml]  Deployment porch-system/porch-controllers",
        "├── [9-controllers.yaml]  ServiceAccount porch-system/porch-controllers",
        "├── [9-porch-controller-clusterrole.yaml]  ClusterRole porch-controllers",
        "├── [9-porch-controller-packagevariants-clusterrole.yaml]  ClusterRole porch-controllers-packagevariants",
        "├── [9-porch-controller-packagevariants-clusterrolebinding.yaml]  ClusterRoleBinding porch-system:porch-controllers-packagevariants",
        "├── [9-porch-controller-packagevariantsets-clusterrole.yaml]  ClusterRole porch-controllers-packagevariantsets",
        "├── [9-porch-controller-packagevariantsets-clusterrolebinding.yaml]  ClusterRoleBinding porch-system:porch-controllers-packagevariantsets",
        "└── [Kptfile]  Kptfile porch"
    ]
}

TASK [kpt : Render package: nephio/core/porch] *********************************
Wednesday 01 October 2025  12:32:54 +0000 (0:00:00.064)       0:03:26.330 ***** 
Wednesday 01 October 2025  12:32:54 +0000 (0:00:00.064)       0:03:26.329 ***** 
ok: [127.0.0.1]

TASK [kpt : Recursively restore ownership of a directory package] **************
Wednesday 01 October 2025  12:32:54 +0000 (0:00:00.389)       0:03:26.719 ***** 
Wednesday 01 October 2025  12:32:54 +0000 (0:00:00.389)       0:03:26.718 ***** 
ok: [127.0.0.1]

TASK [kpt : Get package differences between local and upstream: nephio/core/porch] ***
Wednesday 01 October 2025  12:32:54 +0000 (0:00:00.291)       0:03:27.011 ***** 
Wednesday 01 October 2025  12:32:54 +0000 (0:00:00.291)       0:03:27.010 ***** 
ok: [127.0.0.1]

TASK [kpt : Print package differences: nephio/core/porch] **********************
Wednesday 01 October 2025  12:32:57 +0000 (0:00:02.817)       0:03:29.828 ***** 
Wednesday 01 October 2025  12:32:57 +0000 (0:00:02.817)       0:03:29.827 ***** 
ok: [127.0.0.1] => {
    "kpt_pkg_diff.stdout_lines": []
}

TASK [kpt : Check package has been initialized] ********************************
Wednesday 01 October 2025  12:32:57 +0000 (0:00:00.061)       0:03:29.889 ***** 
Wednesday 01 October 2025  12:32:57 +0000 (0:00:00.061)       0:03:29.889 ***** 
ok: [127.0.0.1]

TASK [kpt : Init package: nephio/core/porch] ***********************************
Wednesday 01 October 2025  12:32:58 +0000 (0:00:00.311)       0:03:30.201 ***** 
Wednesday 01 October 2025  12:32:58 +0000 (0:00:00.311)       0:03:30.200 ***** 
changed: [127.0.0.1]

TASK [kpt : Print package initialization for nephio/core/porch] ****************
Wednesday 01 October 2025  12:32:58 +0000 (0:00:00.397)       0:03:30.599 ***** 
Wednesday 01 October 2025  12:32:58 +0000 (0:00:00.398)       0:03:30.598 ***** 
ok: [127.0.0.1] => {
    "kpt_live_init": {
        "changed": true,
        "cmd": "/usr/local/bin/kpt live init /tmp/kpt-pkg/nephio/core/porch --inventory-id nephio --name porch --namespace porch-system --context kubernetes-admin@kubernetes",
        "failed": false,
        "rc": 0,
        "stdout": "",
        "stdout_lines": []
    }
}

TASK [kpt : Apply package: nephio/core/porch] **********************************
Wednesday 01 October 2025  12:32:58 +0000 (0:00:00.063)       0:03:30.662 ***** 
Wednesday 01 October 2025  12:32:58 +0000 (0:00:00.063)       0:03:30.662 ***** 
ASYNC POLL on 127.0.0.1: jid=j374755710542.106552 started=1 finished=0
ASYNC POLL on 127.0.0.1: jid=j374755710542.106552 started=1 finished=0
ASYNC POLL on 127.0.0.1: jid=j374755710542.106552 started=1 finished=0
ASYNC POLL on 127.0.0.1: jid=j374755710542.106552 started=1 finished=0
ASYNC POLL on 127.0.0.1: jid=j374755710542.106552 started=1 finished=0
ASYNC POLL on 127.0.0.1: jid=j374755710542.106552 started=1 finished=0
ASYNC POLL on 127.0.0.1: jid=j374755710542.106552 started=1 finished=0
ASYNC POLL on 127.0.0.1: jid=j374755710542.106552 started=1 finished=0
ASYNC POLL on 127.0.0.1: jid=j374755710542.106552 started=1 finished=0
ASYNC POLL on 127.0.0.1: jid=j374755710542.106552 started=1 finished=0
ASYNC POLL on 127.0.0.1: jid=j374755710542.106552 started=1 finished=0
ASYNC OK on 127.0.0.1: jid=j374755710542.106552
ok: [127.0.0.1]

TASK [kpt : Export job ids array] **********************************************
Wednesday 01 October 2025  12:34:01 +0000 (0:01:03.426)       0:04:34.089 ***** 
Wednesday 01 October 2025  12:34:01 +0000 (0:01:03.426)       0:04:34.088 ***** 
skipping: [127.0.0.1]

TASK [kpt : Print job ids] *****************************************************
Wednesday 01 October 2025  12:34:01 +0000 (0:00:00.038)       0:04:34.128 ***** 
Wednesday 01 October 2025  12:34:01 +0000 (0:00:00.038)       0:04:34.127 ***** 
ok: [127.0.0.1] => {
    "all_kpt_apply": []
}

TASK [kpt : Define working directory] ******************************************
Wednesday 01 October 2025  12:34:02 +0000 (0:00:00.065)       0:04:34.193 ***** 
Wednesday 01 October 2025  12:34:02 +0000 (0:00:00.065)       0:04:34.193 ***** 
ok: [127.0.0.1]

TASK [kpt : Create base directory if it does not exist: /tmp/kpt-pkg/nephio/core/nephio-operator] ***
Wednesday 01 October 2025  12:34:02 +0000 (0:00:00.054)       0:04:34.248 ***** 
Wednesday 01 October 2025  12:34:02 +0000 (0:00:00.054)       0:04:34.247 ***** 
ok: [127.0.0.1]

TASK [kpt : Fetch package: nephio/core/nephio-operator] ************************
Wednesday 01 October 2025  12:34:02 +0000 (0:00:00.254)       0:04:34.502 ***** 
Wednesday 01 October 2025  12:34:02 +0000 (0:00:00.254)       0:04:34.501 ***** 
changed: [127.0.0.1]

TASK [kpt : Get package content information for nephio/core/nephio-operator] ***
Wednesday 01 October 2025  12:34:03 +0000 (0:00:01.116)       0:04:35.618 ***** 
Wednesday 01 October 2025  12:34:03 +0000 (0:00:01.116)       0:04:35.617 ***** 
ok: [127.0.0.1]

TASK [kpt : Print package content information for nephio/core/nephio-operator] ***
Wednesday 01 October 2025  12:34:03 +0000 (0:00:00.386)       0:04:36.004 ***** 
Wednesday 01 October 2025  12:34:03 +0000 (0:00:00.386)       0:04:36.004 ***** 
ok: [127.0.0.1] => {
    "kpt_pkg_tree.stdout_lines": [
        "Package \"nephio-operator\"",
        "├── [Kptfile]  Kptfile nephio-operator",
        "├── [namespace.yaml]  Namespace nephio-system",
        "├── Package \"app\"",
        "│   ├── [Kptfile]  Kptfile app",
        "│   └── controller",
        "│       ├── [clusterrole-approval.yaml]  ClusterRole nephio-controller-approval-role",
        "│       ├── [clusterrole-bootstrap.yaml]  ClusterRole nephio-controller-bootstrap-role",
        "│       ├── [clusterrole-controller.yaml]  ClusterRole nephio-controller-controller-role",
        "│       ├── [clusterrole-network.yaml]  ClusterRole nephio-controller-network-role",
        "│       ├── [clusterrole-porch.yaml]  ClusterRole nephio-controller-porch-role",
        "│       ├── [clusterrole-repository.yaml]  ClusterRole nephio-controller-repository-role",
        "│       ├── [clusterrole-token.yaml]  ClusterRole nephio-controller-token-role",
        "│       ├── [clusterrolebinding-approval.yaml]  ClusterRoleBinding nephio-controller-approval-role-binding",
        "│       ├── [clusterrolebinding-bootstrap.yaml]  ClusterRoleBinding nephio-controller-bootstrap-role-binding",
        "│       ├── [clusterrolebinding-controller.yaml]  ClusterRoleBinding nephio-controller-controller-role-binding",
        "│       ├── [clusterrolebinding-network.yaml]  ClusterRoleBinding nephio-controller-network-role-binding",
        "│       ├── [clusterrolebinding-porch.yaml]  ClusterRoleBinding nephio-controller-porch-role-binding",
        "│       ├── [clusterrolebinding-repository.yaml]  ClusterRoleBinding nephio-controller-repository-role-binding",
        "│       ├── [clusterrolebinding-token.yaml]  ClusterRoleBinding nephio-controller-token-role-binding",
        "│       ├── [deployment-controller.yaml]  Deployment nephio-system/nephio-controller",
        "│       ├── [deployment-token-controller.yaml]  Deployment nephio-system/token-controller",
        "│       ├── [role-leader-election.yaml]  Role nephio-system/nephio-controller-leader-election-role",
        "│       ├── [rolebinding-leader-election.yaml]  RoleBinding nephio-system/nephio-controller-leader-election-role-binding",
        "│       └── [serviceaccount-controller.yaml]  ServiceAccount nephio-system/nephio-controller",
        "└── Package \"crd\"",
        "    ├── [Kptfile]  Kptfile crd",
        "    └── bases",
        "        ├── [config.nephio.org_networks.yaml]  CustomResourceDefinition networks.config.nephio.org",
        "        ├── [infra.nephio.org_clustercontexts.yaml]  CustomResourceDefinition clustercontexts.infra.nephio.org",
        "        ├── [infra.nephio.org_networkconfigs.yaml]  CustomResourceDefinition networkconfigs.infra.nephio.org",
        "        ├── [infra.nephio.org_networks.yaml]  CustomResourceDefinition networks.infra.nephio.org",
        "        ├── [infra.nephio.org_repositories.yaml]  CustomResourceDefinition repositories.infra.nephio.org",
        "        ├── [infra.nephio.org_tokens.yaml]  CustomResourceDefinition tokens.infra.nephio.org",
        "        ├── [infra.nephio.org_workloadclusters.yaml]  CustomResourceDefinition workloadclusters.infra.nephio.org",
        "        ├── [req.nephio.org_capacities.yaml]  CustomResourceDefinition capacities.req.nephio.org",
        "        ├── [req.nephio.org_datanetworknames.yaml]  CustomResourceDefinition datanetworknames.req.nephio.org",
        "        ├── [req.nephio.org_datanetworks.yaml]  CustomResourceDefinition datanetworks.req.nephio.org",
        "        ├── [req.nephio.org_interfaces.yaml]  CustomResourceDefinition interfaces.req.nephio.org",
        "        ├── [workload.nephio.org_amfdeployments.yaml]  CustomResourceDefinition amfdeployments.workload.nephio.org",
        "        ├── [workload.nephio.org_smfdeployments.yaml]  CustomResourceDefinition smfdeployments.workload.nephio.org",
        "        └── [workload.nephio.org_upfdeployments.yaml]  CustomResourceDefinition upfdeployments.workload.nephio.org"
    ]
}

TASK [kpt : Render package: nephio/core/nephio-operator] ***********************
Wednesday 01 October 2025  12:34:03 +0000 (0:00:00.066)       0:04:36.071 ***** 
Wednesday 01 October 2025  12:34:03 +0000 (0:00:00.066)       0:04:36.070 ***** 
ok: [127.0.0.1]

TASK [kpt : Recursively restore ownership of a directory package] **************
Wednesday 01 October 2025  12:34:04 +0000 (0:00:00.402)       0:04:36.474 ***** 
Wednesday 01 October 2025  12:34:04 +0000 (0:00:00.402)       0:04:36.473 ***** 
ok: [127.0.0.1]

TASK [kpt : Get package differences between local and upstream: nephio/core/nephio-operator] ***
Wednesday 01 October 2025  12:34:04 +0000 (0:00:00.370)       0:04:36.844 ***** 
Wednesday 01 October 2025  12:34:04 +0000 (0:00:00.370)       0:04:36.843 ***** 
ok: [127.0.0.1]

TASK [kpt : Print package differences: nephio/core/nephio-operator] ************
Wednesday 01 October 2025  12:34:06 +0000 (0:00:01.712)       0:04:38.556 ***** 
Wednesday 01 October 2025  12:34:06 +0000 (0:00:01.712)       0:04:38.555 ***** 
ok: [127.0.0.1] => {
    "kpt_pkg_diff.stdout_lines": [
        "Common subdirectories: /tmp/kpt-3622667386/local-main/app and /tmp/kpt-3622667386/target-main/app",
        "Common subdirectories: /tmp/kpt-3622667386/local-main/crd and /tmp/kpt-3622667386/target-main/crd"
    ]
}

TASK [kpt : Check package has been initialized] ********************************
Wednesday 01 October 2025  12:34:06 +0000 (0:00:00.064)       0:04:38.620 ***** 
Wednesday 01 October 2025  12:34:06 +0000 (0:00:00.064)       0:04:38.620 ***** 
ok: [127.0.0.1]

TASK [kpt : Init package: nephio/core/nephio-operator] *************************
Wednesday 01 October 2025  12:34:06 +0000 (0:00:00.308)       0:04:38.929 ***** 
Wednesday 01 October 2025  12:34:06 +0000 (0:00:00.308)       0:04:38.928 ***** 
changed: [127.0.0.1]

TASK [kpt : Print package initialization for nephio/core/nephio-operator] ******
Wednesday 01 October 2025  12:34:07 +0000 (0:00:00.469)       0:04:39.398 ***** 
Wednesday 01 October 2025  12:34:07 +0000 (0:00:00.469)       0:04:39.397 ***** 
ok: [127.0.0.1] => {
    "kpt_live_init": {
        "changed": true,
        "cmd": "/usr/local/bin/kpt live init /tmp/kpt-pkg/nephio/core/nephio-operator --context kubernetes-admin@kubernetes",
        "failed": false,
        "rc": 0,
        "stdout": "",
        "stdout_lines": []
    }
}

TASK [kpt : Apply package: nephio/core/nephio-operator] ************************
Wednesday 01 October 2025  12:34:07 +0000 (0:00:00.067)       0:04:39.465 ***** 
Wednesday 01 October 2025  12:34:07 +0000 (0:00:00.067)       0:04:39.465 ***** 
ASYNC POLL on 127.0.0.1: jid=j658769073170.114805 started=1 finished=0
ASYNC POLL on 127.0.0.1: jid=j658769073170.114805 started=1 finished=0
ASYNC POLL on 127.0.0.1: jid=j658769073170.114805 started=1 finished=0
ASYNC OK on 127.0.0.1: jid=j658769073170.114805
ok: [127.0.0.1]

TASK [kpt : Export job ids array] **********************************************
Wednesday 01 October 2025  12:34:28 +0000 (0:00:21.353)       0:05:00.819 ***** 
Wednesday 01 October 2025  12:34:28 +0000 (0:00:21.353)       0:05:00.818 ***** 
skipping: [127.0.0.1]

TASK [kpt : Print job ids] *****************************************************
Wednesday 01 October 2025  12:34:28 +0000 (0:00:00.046)       0:05:00.865 ***** 
Wednesday 01 October 2025  12:34:28 +0000 (0:00:00.046)       0:05:00.864 ***** 
ok: [127.0.0.1] => {
    "all_kpt_apply": []
}

TASK [kpt : Define working directory] ******************************************
Wednesday 01 October 2025  12:34:28 +0000 (0:00:00.084)       0:05:00.949 ***** 
Wednesday 01 October 2025  12:34:28 +0000 (0:00:00.084)       0:05:00.949 ***** 
ok: [127.0.0.1]

TASK [kpt : Create base directory if it does not exist: /tmp/kpt-pkg/nephio/core/configsync] ***
Wednesday 01 October 2025  12:34:28 +0000 (0:00:00.073)       0:05:01.023 ***** 
Wednesday 01 October 2025  12:34:28 +0000 (0:00:00.073)       0:05:01.022 ***** 
ok: [127.0.0.1]

TASK [kpt : Fetch package: nephio/core/configsync] *****************************
Wednesday 01 October 2025  12:34:29 +0000 (0:00:00.298)       0:05:01.322 ***** 
Wednesday 01 October 2025  12:34:29 +0000 (0:00:00.298)       0:05:01.321 ***** 
changed: [127.0.0.1]

TASK [kpt : Get package content information for nephio/core/configsync] ********
Wednesday 01 October 2025  12:34:30 +0000 (0:00:01.001)       0:05:02.323 ***** 
Wednesday 01 October 2025  12:34:30 +0000 (0:00:01.001)       0:05:02.322 ***** 
ok: [127.0.0.1]

TASK [kpt : Print package content information for nephio/core/configsync] ******
Wednesday 01 October 2025  12:34:30 +0000 (0:00:00.386)       0:05:02.709 ***** 
Wednesday 01 October 2025  12:34:30 +0000 (0:00:00.386)       0:05:02.708 ***** 
ok: [127.0.0.1] => {
    "kpt_pkg_tree.stdout_lines": [
        "Package \"configsync\"",
        "├── [Kptfile]  Kptfile configsync",
        "├── [config-management-operator.yaml]  Namespace config-management-monitoring",
        "├── [config-management-operator.yaml]  ClusterRole config-management-operator",
        "├── [config-management-operator.yaml]  ClusterRoleBinding config-management-operator",
        "├── [config-management-operator.yaml]  Namespace config-management-system",
        "├── [config-management-operator.yaml]  CustomResourceDefinition configmanagements.configmanagement.gke.io",
        "├── [config-management-operator.yaml]  Deployment config-management-system/config-management-operator",
        "├── [config-management-operator.yaml]  ServiceAccount config-management-system/config-management-operator",
        "├── [configsync.yaml]  ConfigManagement config-management",
        "├── [package-context.yaml]  ConfigMap kptfile.kpt.dev",
        "└── [rootsync-crd.yaml]  CustomResourceDefinition rootsyncs.configsync.gke.io"
    ]
}

TASK [kpt : Render package: nephio/core/configsync] ****************************
Wednesday 01 October 2025  12:34:30 +0000 (0:00:00.069)       0:05:02.779 ***** 
Wednesday 01 October 2025  12:34:30 +0000 (0:00:00.069)       0:05:02.778 ***** 
ok: [127.0.0.1]

TASK [kpt : Recursively restore ownership of a directory package] **************
Wednesday 01 October 2025  12:34:31 +0000 (0:00:00.457)       0:05:03.237 ***** 
Wednesday 01 October 2025  12:34:31 +0000 (0:00:00.457)       0:05:03.236 ***** 
ok: [127.0.0.1]

TASK [kpt : Get package differences between local and upstream: nephio/core/configsync] ***
Wednesday 01 October 2025  12:34:31 +0000 (0:00:00.339)       0:05:03.576 ***** 
Wednesday 01 October 2025  12:34:31 +0000 (0:00:00.339)       0:05:03.575 ***** 
ok: [127.0.0.1]

TASK [kpt : Print package differences: nephio/core/configsync] *****************
Wednesday 01 October 2025  12:34:33 +0000 (0:00:01.607)       0:05:05.184 ***** 
Wednesday 01 October 2025  12:34:33 +0000 (0:00:01.607)       0:05:05.183 ***** 
ok: [127.0.0.1] => {
    "kpt_pkg_diff.stdout_lines": []
}

TASK [kpt : Check package has been initialized] ********************************
Wednesday 01 October 2025  12:34:33 +0000 (0:00:00.065)       0:05:05.249 ***** 
Wednesday 01 October 2025  12:34:33 +0000 (0:00:00.065)       0:05:05.248 ***** 
ok: [127.0.0.1]

TASK [kpt : Init package: nephio/core/configsync] ******************************
Wednesday 01 October 2025  12:34:33 +0000 (0:00:00.307)       0:05:05.557 ***** 
Wednesday 01 October 2025  12:34:33 +0000 (0:00:00.307)       0:05:05.556 ***** 
changed: [127.0.0.1]

TASK [kpt : Print package initialization for nephio/core/configsync] ***********
Wednesday 01 October 2025  12:34:33 +0000 (0:00:00.417)       0:05:05.974 ***** 
Wednesday 01 October 2025  12:34:33 +0000 (0:00:00.417)       0:05:05.973 ***** 
ok: [127.0.0.1] => {
    "kpt_live_init": {
        "changed": true,
        "cmd": "/usr/local/bin/kpt live init /tmp/kpt-pkg/nephio/core/configsync --context kubernetes-admin@kubernetes",
        "failed": false,
        "rc": 0,
        "stdout": "",
        "stdout_lines": []
    }
}

TASK [kpt : Apply package: nephio/core/configsync] *****************************
Wednesday 01 October 2025  12:34:33 +0000 (0:00:00.064)       0:05:06.039 ***** 
Wednesday 01 October 2025  12:34:33 +0000 (0:00:00.064)       0:05:06.038 ***** 
ASYNC OK on 127.0.0.1: jid=j298225067177.117638
ok: [127.0.0.1]

TASK [kpt : Export job ids array] **********************************************
Wednesday 01 October 2025  12:34:39 +0000 (0:00:05.782)       0:05:11.822 ***** 
Wednesday 01 October 2025  12:34:39 +0000 (0:00:05.782)       0:05:11.821 ***** 
skipping: [127.0.0.1]

TASK [kpt : Print job ids] *****************************************************
Wednesday 01 October 2025  12:34:39 +0000 (0:00:00.034)       0:05:11.856 ***** 
Wednesday 01 October 2025  12:34:39 +0000 (0:00:00.034)       0:05:11.856 ***** 
ok: [127.0.0.1] => {
    "all_kpt_apply": []
}

TASK [kpt : Define working directory] ******************************************
Wednesday 01 October 2025  12:34:39 +0000 (0:00:00.066)       0:05:11.923 ***** 
Wednesday 01 October 2025  12:34:39 +0000 (0:00:00.066)       0:05:11.922 ***** 
ok: [127.0.0.1]

TASK [kpt : Create base directory if it does not exist: /tmp/kpt-pkg/nephio/optional/network-config] ***
Wednesday 01 October 2025  12:34:39 +0000 (0:00:00.083)       0:05:12.006 ***** 
Wednesday 01 October 2025  12:34:39 +0000 (0:00:00.083)       0:05:12.005 ***** 
ok: [127.0.0.1]

TASK [kpt : Fetch package: nephio/optional/network-config] *********************
Wednesday 01 October 2025  12:34:40 +0000 (0:00:00.299)       0:05:12.305 ***** 
Wednesday 01 October 2025  12:34:40 +0000 (0:00:00.299)       0:05:12.304 ***** 
changed: [127.0.0.1]

TASK [kpt : Get package content information for nephio/optional/network-config] ***
Wednesday 01 October 2025  12:34:41 +0000 (0:00:01.062)       0:05:13.368 ***** 
Wednesday 01 October 2025  12:34:41 +0000 (0:00:01.062)       0:05:13.367 ***** 
ok: [127.0.0.1]

TASK [kpt : Print package content information for nephio/optional/network-config] ***
Wednesday 01 October 2025  12:34:41 +0000 (0:00:00.392)       0:05:13.761 ***** 
Wednesday 01 October 2025  12:34:41 +0000 (0:00:00.392)       0:05:13.760 ***** 
ok: [127.0.0.1] => {
    "kpt_pkg_tree.stdout_lines": [
        "Package \"network-config\"",
        "├── [Kptfile]  Kptfile network-config",
        "├── [namespace.yaml]  Namespace network-config",
        "├── Package \"app\"",
        "│   ├── [Kptfile]  Kptfile app",
        "│   └── controller",
        "│       ├── [clusterrole-controller.yaml]  ClusterRole network-config-controller-controller-role",
        "│       ├── [clusterrole-network.yaml]  ClusterRole network-config-controller-network-role",
        "│       ├── [clusterrole-target.yaml]  ClusterRole network-config-controller-target-role",
        "│       ├── [clusterrolebinding-controller.yaml]  ClusterRoleBinding network-config-controller-controller-role-binding",
        "│       ├── [clusterrolebinding-network.yaml]  ClusterRoleBinding network-config-controller-network-role-binding",
        "│       ├── [clusterrolebinding-target.yaml]  ClusterRoleBinding network-config-controller-target-role-binding",
        "│       ├── [deployment-controller.yaml]  Deployment network-config/network-config-controller",
        "│       ├── [role-leader-election.yaml]  Role network-config/network-config-controller-leader-election-role",
        "│       ├── [rolebinding-leader-election.yaml]  RoleBinding network-config/network-config-controller-leader-election-role-binding",
        "│       └── [serviceaccount-controller.yaml]  ServiceAccount network-config/network-config-controller",
        "└── Package \"crd\"",
        "    └── [Kptfile]  Kptfile crd"
    ]
}

TASK [kpt : Render package: nephio/optional/network-config] ********************
Wednesday 01 October 2025  12:34:41 +0000 (0:00:00.067)       0:05:13.828 ***** 
Wednesday 01 October 2025  12:34:41 +0000 (0:00:00.067)       0:05:13.828 ***** 
ok: [127.0.0.1]

TASK [kpt : Recursively restore ownership of a directory package] **************
Wednesday 01 October 2025  12:34:42 +0000 (0:00:00.411)       0:05:14.240 ***** 
Wednesday 01 October 2025  12:34:42 +0000 (0:00:00.411)       0:05:14.239 ***** 
ok: [127.0.0.1]

TASK [kpt : Get package differences between local and upstream: nephio/optional/network-config] ***
Wednesday 01 October 2025  12:34:42 +0000 (0:00:00.287)       0:05:14.527 ***** 
Wednesday 01 October 2025  12:34:42 +0000 (0:00:00.287)       0:05:14.526 ***** 
ok: [127.0.0.1]

TASK [kpt : Print package differences: nephio/optional/network-config] *********
Wednesday 01 October 2025  12:34:44 +0000 (0:00:01.762)       0:05:16.289 ***** 
Wednesday 01 October 2025  12:34:44 +0000 (0:00:01.762)       0:05:16.288 ***** 
ok: [127.0.0.1] => {
    "kpt_pkg_diff.stdout_lines": [
        "Common subdirectories: /tmp/kpt-1583676006/local-main/app and /tmp/kpt-1583676006/target-main/app",
        "Common subdirectories: /tmp/kpt-1583676006/local-main/crd and /tmp/kpt-1583676006/target-main/crd"
    ]
}

TASK [kpt : Check package has been initialized] ********************************
Wednesday 01 October 2025  12:34:44 +0000 (0:00:00.063)       0:05:16.353 ***** 
Wednesday 01 October 2025  12:34:44 +0000 (0:00:00.063)       0:05:16.352 ***** 
ok: [127.0.0.1]

TASK [kpt : Init package: nephio/optional/network-config] **********************
Wednesday 01 October 2025  12:34:44 +0000 (0:00:00.338)       0:05:16.692 ***** 
Wednesday 01 October 2025  12:34:44 +0000 (0:00:00.338)       0:05:16.691 ***** 
changed: [127.0.0.1]

TASK [kpt : Print package initialization for nephio/optional/network-config] ***
Wednesday 01 October 2025  12:34:44 +0000 (0:00:00.384)       0:05:17.076 ***** 
Wednesday 01 October 2025  12:34:44 +0000 (0:00:00.384)       0:05:17.076 ***** 
ok: [127.0.0.1] => {
    "kpt_live_init": {
        "changed": true,
        "cmd": "/usr/local/bin/kpt live init /tmp/kpt-pkg/nephio/optional/network-config --context kubernetes-admin@kubernetes",
        "failed": false,
        "rc": 0,
        "stdout": "",
        "stdout_lines": []
    }
}

TASK [kpt : Apply package: nephio/optional/network-config] *********************
Wednesday 01 October 2025  12:34:45 +0000 (0:00:00.083)       0:05:17.159 ***** 
Wednesday 01 October 2025  12:34:45 +0000 (0:00:00.083)       0:05:17.159 ***** 
ok: [127.0.0.1]

TASK [kpt : Export job ids array] **********************************************
Wednesday 01 October 2025  12:34:45 +0000 (0:00:00.335)       0:05:17.495 ***** 
Wednesday 01 October 2025  12:34:45 +0000 (0:00:00.335)       0:05:17.494 ***** 
skipping: [127.0.0.1]

TASK [kpt : Print job ids] *****************************************************
Wednesday 01 October 2025  12:34:45 +0000 (0:00:00.029)       0:05:17.524 ***** 
Wednesday 01 October 2025  12:34:45 +0000 (0:00:00.029)       0:05:17.524 ***** 
ok: [127.0.0.1] => {
    "all_kpt_apply": []
}

TASK [kpt : Define working directory] ******************************************
Wednesday 01 October 2025  12:34:45 +0000 (0:00:00.083)       0:05:17.608 ***** 
Wednesday 01 October 2025  12:34:45 +0000 (0:00:00.083)       0:05:17.607 ***** 
ok: [127.0.0.1]

TASK [kpt : Create base directory if it does not exist: /tmp/kpt-pkg/nephio/optional/fluxcd] ***
Wednesday 01 October 2025  12:34:45 +0000 (0:00:00.069)       0:05:17.678 ***** 
Wednesday 01 October 2025  12:34:45 +0000 (0:00:00.069)       0:05:17.677 ***** 
ok: [127.0.0.1]

TASK [kpt : Fetch package: nephio/optional/fluxcd] *****************************
Wednesday 01 October 2025  12:34:45 +0000 (0:00:00.314)       0:05:17.992 ***** 
Wednesday 01 October 2025  12:34:45 +0000 (0:00:00.314)       0:05:17.991 ***** 
changed: [127.0.0.1]

TASK [kpt : Get package content information for nephio/optional/fluxcd] ********
Wednesday 01 October 2025  12:34:47 +0000 (0:00:01.282)       0:05:19.275 ***** 
Wednesday 01 October 2025  12:34:47 +0000 (0:00:01.282)       0:05:19.274 ***** 
ok: [127.0.0.1]

TASK [kpt : Print package content information for nephio/optional/fluxcd] ******
Wednesday 01 October 2025  12:34:47 +0000 (0:00:00.470)       0:05:19.746 ***** 
Wednesday 01 October 2025  12:34:47 +0000 (0:00:00.470)       0:05:19.745 ***** 
ok: [127.0.0.1] => {
    "kpt_pkg_tree.stdout_lines": [
        "Package \"fluxcd\"",
        "├── [Kptfile]  Kptfile fluxcd",
        "├── [flux-ns.yaml]  Namespace flux-system",
        "├── [helm-controller.yaml]  CustomResourceDefinition helmreleases.helm.toolkit.fluxcd.io",
        "├── [helm-controller.yaml]  Deployment flux-system/helm-controller",
        "├── [helm-controller.yaml]  ServiceAccount flux-system/helm-controller",
        "├── [kustomize-controller.yaml]  CustomResourceDefinition kustomizations.kustomize.toolkit.fluxcd.io",
        "├── [kustomize-controller.yaml]  Deployment flux-system/kustomize-controller",
        "├── [kustomize-controller.yaml]  ServiceAccount flux-system/kustomize-controller",
        "├── [notification-controller.yaml]  CustomResourceDefinition alerts.notification.toolkit.fluxcd.io",
        "├── [notification-controller.yaml]  CustomResourceDefinition providers.notification.toolkit.fluxcd.io",
        "├── [notification-controller.yaml]  CustomResourceDefinition receivers.notification.toolkit.fluxcd.io",
        "├── [notification-controller.yaml]  Deployment flux-system/notification-controller",
        "├── [notification-controller.yaml]  Service flux-system/notification-controller",
        "├── [notification-controller.yaml]  ServiceAccount flux-system/notification-controller",
        "├── [notification-controller.yaml]  Service flux-system/webhook-receiver",
        "├── [package-context.yaml]  ConfigMap kptfile.kpt.dev",
        "├── [policies.yaml]  NetworkPolicy flux-system/allow-egress",
        "├── [policies.yaml]  NetworkPolicy flux-system/allow-scraping",
        "├── [policies.yaml]  NetworkPolicy flux-system/allow-webhooks",
        "├── [rbac.yaml]  ClusterRoleBinding cluster-reconciler",
        "├── [rbac.yaml]  ClusterRole crd-controller",
        "├── [rbac.yaml]  ClusterRoleBinding crd-controller",
        "├── [rbac.yaml]  ResourceQuota critical-pods",
        "├── [rbac.yaml]  ClusterRole flux-edit",
        "├── [rbac.yaml]  ClusterRole flux-view",
        "├── [source-controller.yaml]  CustomResourceDefinition buckets.source.toolkit.fluxcd.io",
        "├── [source-controller.yaml]  CustomResourceDefinition gitrepositories.source.toolkit.fluxcd.io",
        "├── [source-controller.yaml]  CustomResourceDefinition helmcharts.source.toolkit.fluxcd.io",
        "├── [source-controller.yaml]  CustomResourceDefinition helmrepositories.source.toolkit.fluxcd.io",
        "├── [source-controller.yaml]  CustomResourceDefinition ocirepositories.source.toolkit.fluxcd.io",
        "├── [source-controller.yaml]  Deployment flux-system/source-controller",
        "├── [source-controller.yaml]  Service flux-system/source-controller",
        "└── [source-controller.yaml]  ServiceAccount flux-system/source-controller"
    ]
}

TASK [kpt : Render package: nephio/optional/fluxcd] ****************************
Wednesday 01 October 2025  12:34:47 +0000 (0:00:00.071)       0:05:19.817 ***** 
Wednesday 01 October 2025  12:34:47 +0000 (0:00:00.071)       0:05:19.816 ***** 
ok: [127.0.0.1]

TASK [kpt : Recursively restore ownership of a directory package] **************
Wednesday 01 October 2025  12:34:48 +0000 (0:00:00.516)       0:05:20.333 ***** 
Wednesday 01 October 2025  12:34:48 +0000 (0:00:00.516)       0:05:20.333 ***** 
ok: [127.0.0.1]

TASK [kpt : Get package differences between local and upstream: nephio/optional/fluxcd] ***
Wednesday 01 October 2025  12:34:48 +0000 (0:00:00.283)       0:05:20.617 ***** 
Wednesday 01 October 2025  12:34:48 +0000 (0:00:00.284)       0:05:20.617 ***** 
ok: [127.0.0.1]

TASK [kpt : Print package differences: nephio/optional/fluxcd] *****************
Wednesday 01 October 2025  12:34:50 +0000 (0:00:01.905)       0:05:22.523 ***** 
Wednesday 01 October 2025  12:34:50 +0000 (0:00:01.905)       0:05:22.522 ***** 
ok: [127.0.0.1] => {
    "kpt_pkg_diff.stdout_lines": []
}

TASK [kpt : Check package has been initialized] ********************************
Wednesday 01 October 2025  12:34:50 +0000 (0:00:00.068)       0:05:22.592 ***** 
Wednesday 01 October 2025  12:34:50 +0000 (0:00:00.068)       0:05:22.591 ***** 
ok: [127.0.0.1]

TASK [kpt : Init package: nephio/optional/fluxcd] ******************************
Wednesday 01 October 2025  12:34:50 +0000 (0:00:00.312)       0:05:22.904 ***** 
Wednesday 01 October 2025  12:34:50 +0000 (0:00:00.312)       0:05:22.903 ***** 
changed: [127.0.0.1]

TASK [kpt : Print package initialization for nephio/optional/fluxcd] ***********
Wednesday 01 October 2025  12:34:51 +0000 (0:00:00.596)       0:05:23.501 ***** 
Wednesday 01 October 2025  12:34:51 +0000 (0:00:00.596)       0:05:23.500 ***** 
ok: [127.0.0.1] => {
    "kpt_live_init": {
        "changed": true,
        "cmd": "/usr/local/bin/kpt live init /tmp/kpt-pkg/nephio/optional/fluxcd --context kubernetes-admin@kubernetes",
        "failed": false,
        "rc": 0,
        "stdout": "",
        "stdout_lines": []
    }
}

TASK [kpt : Apply package: nephio/optional/fluxcd] *****************************
Wednesday 01 October 2025  12:34:51 +0000 (0:00:00.074)       0:05:23.575 ***** 
Wednesday 01 October 2025  12:34:51 +0000 (0:00:00.074)       0:05:23.574 ***** 
ASYNC POLL on 127.0.0.1: jid=j338447877879.120902 started=1 finished=0
ASYNC POLL on 127.0.0.1: jid=j338447877879.120902 started=1 finished=0
ASYNC POLL on 127.0.0.1: jid=j338447877879.120902 started=1 finished=0
ASYNC OK on 127.0.0.1: jid=j338447877879.120902
ok: [127.0.0.1]

TASK [kpt : Export job ids array] **********************************************
Wednesday 01 October 2025  12:35:13 +0000 (0:00:21.587)       0:05:45.163 ***** 
Wednesday 01 October 2025  12:35:13 +0000 (0:00:21.587)       0:05:45.162 ***** 
skipping: [127.0.0.1]

TASK [kpt : Print job ids] *****************************************************
Wednesday 01 October 2025  12:35:13 +0000 (0:00:00.046)       0:05:45.209 ***** 
Wednesday 01 October 2025  12:35:13 +0000 (0:00:00.046)       0:05:45.208 ***** 
ok: [127.0.0.1] => {
    "all_kpt_apply": []
}

TASK [kpt : Define working directory] ******************************************
Wednesday 01 October 2025  12:35:13 +0000 (0:00:00.136)       0:05:45.346 ***** 
Wednesday 01 October 2025  12:35:13 +0000 (0:00:00.136)       0:05:45.345 ***** 
ok: [127.0.0.1]

TASK [kpt : Create base directory if it does not exist: /tmp/kpt-pkg/nephio/optional/argo-cd-full] ***
Wednesday 01 October 2025  12:35:13 +0000 (0:00:00.052)       0:05:45.398 ***** 
Wednesday 01 October 2025  12:35:13 +0000 (0:00:00.052)       0:05:45.398 ***** 
ok: [127.0.0.1]

TASK [kpt : Fetch package: nephio/optional/argo-cd-full] ***********************
Wednesday 01 October 2025  12:35:13 +0000 (0:00:00.454)       0:05:45.853 ***** 
Wednesday 01 October 2025  12:35:13 +0000 (0:00:00.454)       0:05:45.852 ***** 
changed: [127.0.0.1]

TASK [kpt : Get package content information for nephio/optional/argo-cd-full] ***
Wednesday 01 October 2025  12:35:15 +0000 (0:00:01.472)       0:05:47.326 ***** 
Wednesday 01 October 2025  12:35:15 +0000 (0:00:01.472)       0:05:47.325 ***** 
ok: [127.0.0.1]

TASK [kpt : Print package content information for nephio/optional/argo-cd-full] ***
Wednesday 01 October 2025  12:35:15 +0000 (0:00:00.536)       0:05:47.863 ***** 
Wednesday 01 October 2025  12:35:15 +0000 (0:00:00.536)       0:05:47.862 ***** 
ok: [127.0.0.1] => {
    "kpt_pkg_tree.stdout_lines": [
        "Package \"argo-cd-full\"",
        "├── [Kptfile]  Kptfile argo-cd-full",
        "├── [argo-application-crd.yaml]  CustomResourceDefinition applications.argoproj.io",
        "├── [argo-applicationset-crd.yaml]  CustomResourceDefinition applicationsets.argoproj.io",
        "├── [argo-appproject-crd.yaml]  CustomResourceDefinition appprojects.argoproj.io",
        "├── [argo-clusterrole.yaml]  ClusterRole argocd-application-controller",
        "├── [argo-clusterrole.yaml]  ClusterRole argocd-applicationset-controller",
        "├── [argo-clusterrole.yaml]  ClusterRole argocd-server",
        "├── [argo-clusterrolebinding.yaml]  ClusterRoleBinding argocd-application-controller",
        "├── [argo-clusterrolebinding.yaml]  ClusterRoleBinding argocd-applicationset-controller",
        "├── [argo-clusterrolebinding.yaml]  ClusterRoleBinding argocd-server",
        "├── [argo-cm.yaml]  ConfigMap argocd/argocd-cm",
        "├── [argo-cm.yaml]  ConfigMap argocd/argocd-cmd-params-cm",
        "├── [argo-cm.yaml]  ConfigMap argocd/argocd-gpg-keys-cm",
        "├── [argo-cm.yaml]  ConfigMap argocd/argocd-notifications-cm",
        "├── [argo-cm.yaml]  ConfigMap argocd/argocd-rbac-cm",
        "├── [argo-cm.yaml]  ConfigMap argocd/argocd-ssh-known-hosts-cm",
        "├── [argo-cm.yaml]  ConfigMap argocd/argocd-tls-certs-cm",
        "├── [argo-deployment.yaml]  Deployment argocd/argocd-applicationset-controller",
        "├── [argo-deployment.yaml]  Deployment argocd/argocd-dex-server",
        "├── [argo-deployment.yaml]  Deployment argocd/argocd-notifications-controller",
        "├── [argo-deployment.yaml]  Deployment argocd/argocd-redis",
        "├── [argo-deployment.yaml]  Deployment argocd/argocd-repo-server",
        "├── [argo-deployment.yaml]  Deployment argocd/argocd-server",
        "├── [argo-networkpolicy.yaml]  NetworkPolicy argocd/argocd-application-controller-network-policy",
        "├── [argo-networkpolicy.yaml]  NetworkPolicy argocd/argocd-applicationset-controller-network-policy",
        "├── [argo-networkpolicy.yaml]  NetworkPolicy argocd/argocd-dex-server-network-policy",
        "├── [argo-networkpolicy.yaml]  NetworkPolicy argocd/argocd-notifications-controller-network-policy",
        "├── [argo-networkpolicy.yaml]  NetworkPolicy argocd/argocd-redis-network-policy",
        "├── [argo-networkpolicy.yaml]  NetworkPolicy argocd/argocd-repo-server-network-policy",
        "├── [argo-networkpolicy.yaml]  NetworkPolicy argocd/argocd-server-network-policy",
        "├── [argo-ns.yaml]  Namespace argocd",
        "├── [argo-role.yaml]  Role argocd/argocd-application-controller",
        "├── [argo-role.yaml]  Role argocd/argocd-applicationset-controller",
        "├── [argo-role.yaml]  Role argocd/argocd-dex-server",
        "├── [argo-role.yaml]  Role argocd/argocd-notifications-controller",
        "├── [argo-role.yaml]  Role argocd/argocd-redis",
        "├── [argo-role.yaml]  Role argocd/argocd-server",
        "├── [argo-rolebinding.yaml]  RoleBinding argocd/argocd-application-controller",
        "├── [argo-rolebinding.yaml]  RoleBinding argocd/argocd-applicationset-controller",
        "├── [argo-rolebinding.yaml]  RoleBinding argocd/argocd-dex-server",
        "├── [argo-rolebinding.yaml]  RoleBinding argocd/argocd-notifications-controller",
        "├── [argo-rolebinding.yaml]  RoleBinding argocd/argocd-redis",
        "├── [argo-rolebinding.yaml]  RoleBinding argocd/argocd-server",
        "├── [argo-sa.yaml]  ServiceAccount argocd/argocd-application-controller",
        "├── [argo-sa.yaml]  ServiceAccount argocd/argocd-applicationset-controller",
        "├── [argo-sa.yaml]  ServiceAccount argocd/argocd-dex-server",
        "├── [argo-sa.yaml]  ServiceAccount argocd/argocd-notifications-controller",
        "├── [argo-sa.yaml]  ServiceAccount argocd/argocd-redis",
        "├── [argo-sa.yaml]  ServiceAccount argocd/argocd-repo-server",
        "├── [argo-sa.yaml]  ServiceAccount argocd/argocd-server",
        "├── [argo-secret.yaml]  Secret argocd/argocd-notifications-secret",
        "├── [argo-secret.yaml]  Secret argocd/argocd-secret",
        "├── [argo-service.yaml]  Service argocd/argocd-applicationset-controller",
        "├── [argo-service.yaml]  Service argocd/argocd-dex-server",
        "├── [argo-service.yaml]  Service argocd/argocd-metrics",
        "├── [argo-service.yaml]  Service argocd/argocd-notifications-controller-metrics",
        "├── [argo-service.yaml]  Service argocd/argocd-redis",
        "├── [argo-service.yaml]  Service argocd/argocd-repo-server",
        "├── [argo-service.yaml]  Service argocd/argocd-server",
        "├── [argo-service.yaml]  Service argocd/argocd-server-metrics",
        "├── [argo-statefulset.yaml]  StatefulSet argocd/argocd-application-controller",
        "└── [package-context.yaml]  ConfigMap kptfile.kpt.dev"
    ]
}

TASK [kpt : Render package: nephio/optional/argo-cd-full] **********************
Wednesday 01 October 2025  12:35:15 +0000 (0:00:00.066)       0:05:47.929 ***** 
Wednesday 01 October 2025  12:35:15 +0000 (0:00:00.066)       0:05:47.929 ***** 
ok: [127.0.0.1]

TASK [kpt : Recursively restore ownership of a directory package] **************
Wednesday 01 October 2025  12:35:16 +0000 (0:00:00.710)       0:05:48.640 ***** 
Wednesday 01 October 2025  12:35:16 +0000 (0:00:00.710)       0:05:48.639 ***** 
ok: [127.0.0.1]

TASK [kpt : Get package differences between local and upstream: nephio/optional/argo-cd-full] ***
Wednesday 01 October 2025  12:35:16 +0000 (0:00:00.303)       0:05:48.943 ***** 
Wednesday 01 October 2025  12:35:16 +0000 (0:00:00.303)       0:05:48.942 ***** 
ok: [127.0.0.1]

TASK [kpt : Print package differences: nephio/optional/argo-cd-full] ***********
Wednesday 01 October 2025  12:35:19 +0000 (0:00:02.340)       0:05:51.283 ***** 
Wednesday 01 October 2025  12:35:19 +0000 (0:00:02.340)       0:05:51.282 ***** 
ok: [127.0.0.1] => {
    "kpt_pkg_diff.stdout_lines": []
}

TASK [kpt : Check package has been initialized] ********************************
Wednesday 01 October 2025  12:35:19 +0000 (0:00:00.068)       0:05:51.352 ***** 
Wednesday 01 October 2025  12:35:19 +0000 (0:00:00.068)       0:05:51.351 ***** 
ok: [127.0.0.1]

TASK [kpt : Init package: nephio/optional/argo-cd-full] ************************
Wednesday 01 October 2025  12:35:19 +0000 (0:00:00.289)       0:05:51.641 ***** 
Wednesday 01 October 2025  12:35:19 +0000 (0:00:00.289)       0:05:51.641 ***** 
changed: [127.0.0.1]

TASK [kpt : Print package initialization for nephio/optional/argo-cd-full] *****
Wednesday 01 October 2025  12:35:20 +0000 (0:00:00.922)       0:05:52.564 ***** 
Wednesday 01 October 2025  12:35:20 +0000 (0:00:00.922)       0:05:52.563 ***** 
ok: [127.0.0.1] => {
    "kpt_live_init": {
        "changed": true,
        "cmd": "/usr/local/bin/kpt live init /tmp/kpt-pkg/nephio/optional/argo-cd-full --context kubernetes-admin@kubernetes",
        "failed": false,
        "rc": 0,
        "stdout": "",
        "stdout_lines": []
    }
}

TASK [kpt : Apply package: nephio/optional/argo-cd-full] ***********************
Wednesday 01 October 2025  12:35:20 +0000 (0:00:00.070)       0:05:52.635 ***** 
Wednesday 01 October 2025  12:35:20 +0000 (0:00:00.070)       0:05:52.634 ***** 
ASYNC POLL on 127.0.0.1: jid=j367585320776.124811 started=1 finished=0
ASYNC POLL on 127.0.0.1: jid=j367585320776.124811 started=1 finished=0
ASYNC POLL on 127.0.0.1: jid=j367585320776.124811 started=1 finished=0
ASYNC POLL on 127.0.0.1: jid=j367585320776.124811 started=1 finished=0
ASYNC POLL on 127.0.0.1: jid=j367585320776.124811 started=1 finished=0
ASYNC POLL on 127.0.0.1: jid=j367585320776.124811 started=1 finished=0
ASYNC POLL on 127.0.0.1: jid=j367585320776.124811 started=1 finished=0
ASYNC POLL on 127.0.0.1: jid=j367585320776.124811 started=1 finished=0
ASYNC POLL on 127.0.0.1: jid=j367585320776.124811 started=1 finished=0
ASYNC OK on 127.0.0.1: jid=j367585320776.124811
ok: [127.0.0.1]

TASK [kpt : Export job ids array] **********************************************
Wednesday 01 October 2025  12:36:13 +0000 (0:00:52.871)       0:06:45.507 ***** 
Wednesday 01 October 2025  12:36:13 +0000 (0:00:52.871)       0:06:45.506 ***** 
skipping: [127.0.0.1]

TASK [kpt : Print job ids] *****************************************************
Wednesday 01 October 2025  12:36:13 +0000 (0:00:00.042)       0:06:45.549 ***** 
Wednesday 01 October 2025  12:36:13 +0000 (0:00:00.042)       0:06:45.549 ***** 
ok: [127.0.0.1] => {
    "all_kpt_apply": []
}

TASK [install : Wait for packages to be applied] *******************************
Wednesday 01 October 2025  12:36:13 +0000 (0:00:00.078)       0:06:45.628 ***** 
Wednesday 01 October 2025  12:36:13 +0000 (0:00:00.078)       0:06:45.627 ***** 
skipping: [127.0.0.1]

TASK [install : Wait for deployments] ******************************************
Wednesday 01 October 2025  12:36:13 +0000 (0:00:00.030)       0:06:45.658 ***** 
Wednesday 01 October 2025  12:36:13 +0000 (0:00:00.030)       0:06:45.657 ***** 
included: /home/rehanfazal/test-infra/e2e/provision/playbooks/roles/install/tasks/wait_deployments.yml for 127.0.0.1 => (item=porch-fn-system)
included: /home/rehanfazal/test-infra/e2e/provision/playbooks/roles/install/tasks/wait_deployments.yml for 127.0.0.1 => (item=porch-system)
included: /home/rehanfazal/test-infra/e2e/provision/playbooks/roles/install/tasks/wait_deployments.yml for 127.0.0.1 => (item=nephio-system)
included: /home/rehanfazal/test-infra/e2e/provision/playbooks/roles/install/tasks/wait_deployments.yml for 127.0.0.1 => (item=config-management-monitoring)
included: /home/rehanfazal/test-infra/e2e/provision/playbooks/roles/install/tasks/wait_deployments.yml for 127.0.0.1 => (item=config-management-system)
included: /home/rehanfazal/test-infra/e2e/provision/playbooks/roles/install/tasks/wait_deployments.yml for 127.0.0.1 => (item=resource-group-system)
included: /home/rehanfazal/test-infra/e2e/provision/playbooks/roles/install/tasks/wait_deployments.yml for 127.0.0.1 => (item=flux-system)
included: /home/rehanfazal/test-infra/e2e/provision/playbooks/roles/install/tasks/wait_deployments.yml for 127.0.0.1 => (item=argocd)

TASK [install : Get deployment resources in namespace porch-fn-system] *********
Wednesday 01 October 2025  12:36:13 +0000 (0:00:00.172)       0:06:45.830 ***** 
Wednesday 01 October 2025  12:36:13 +0000 (0:00:00.172)       0:06:45.830 ***** 
ok: [127.0.0.1]

TASK [install : Print deployment resources in namespace porch-fn-system] *******
Wednesday 01 October 2025  12:36:14 +0000 (0:00:00.995)       0:06:46.826 ***** 
Wednesday 01 October 2025  12:36:14 +0000 (0:00:00.995)       0:06:46.825 ***** 
ok: [127.0.0.1] => {
    "deployment_list.resources": []
}

TASK [install : Wait for deployments in namespace porch-fn-system] *************
Wednesday 01 October 2025  12:36:14 +0000 (0:00:00.067)       0:06:46.893 ***** 
Wednesday 01 October 2025  12:36:14 +0000 (0:00:00.067)       0:06:46.893 ***** 
skipping: [127.0.0.1]

TASK [install : Get deployment resources in namespace porch-system] ************
Wednesday 01 October 2025  12:36:14 +0000 (0:00:00.042)       0:06:46.936 ***** 
Wednesday 01 October 2025  12:36:14 +0000 (0:00:00.042)       0:06:46.935 ***** 
ok: [127.0.0.1]

TASK [install : Print deployment resources in namespace porch-system] **********
Wednesday 01 October 2025  12:36:15 +0000 (0:00:01.072)       0:06:48.008 ***** 
Wednesday 01 October 2025  12:36:15 +0000 (0:00:01.072)       0:06:48.007 ***** 
ok: [127.0.0.1] => {
    "deployment_list.resources": [
        {
            "apiVersion": "apps/v1",
            "kind": "Deployment",
            "metadata": {
                "annotations": {
                    "config.k8s.io/owning-inventory": "nephio",
                    "deployment.kubernetes.io/revision": "1",
                    "internal.kpt.dev/upstream-identifier": "apps|Deployment|porch-system|function-runner",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{\"config.k8s.io/owning-inventory\":\"nephio\",\"internal.kpt.dev/upstream-identifier\":\"apps|Deployment|porch-system|function-runner\"},\"name\":\"function-runner\",\"namespace\":\"porch-system\"},\"spec\":{\"replicas\":2,\"selector\":{\"matchLabels\":{\"app\":\"function-runner\"}},\"template\":{\"metadata\":{\"labels\":{\"app\":\"function-runner\"}},\"spec\":{\"containers\":[{\"command\":[\"/server\",\"--config=/config.yaml\",\"--functions=/functions\",\"--pod-namespace=porch-fn-system\",\"--max-request-body-size=6291456\"],\"env\":[{\"name\":\"WRAPPER_SERVER_IMAGE\",\"value\":\"docker.io/nephio/porch-wrapper-server:latest\"}],\"image\":\"docker.io/nephio/porch-function-runner:latest\",\"imagePullPolicy\":\"IfNotPresent\",\"name\":\"function-runner\",\"ports\":[{\"containerPort\":9445}],\"readinessProbe\":{\"exec\":{\"command\":[\"/grpc-health-probe\",\"-addr\",\"localhost:9445\"]}},\"resources\":{\"requests\":{\"cpu\":\"125m\",\"memory\":\"64Mi\"}},\"volumeMounts\":[{\"mountPath\":\"/pod-cache-config\",\"name\":\"pod-cache-config-volume\"}]}],\"serviceAccountName\":\"porch-fn-runner\",\"volumes\":[{\"configMap\":{\"name\":\"pod-cache-config\"},\"name\":\"pod-cache-config-volume\"}]}}}}\n"
                },
                "creationTimestamp": "2025-10-01T12:33:00Z",
                "generation": 1,
                "managedFields": [
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:config.k8s.io/owning-inventory": {},
                                    "f:internal.kpt.dev/upstream-identifier": {},
                                    "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                }
                            },
                            "f:spec": {
                                "f:progressDeadlineSeconds": {},
                                "f:replicas": {},
                                "f:revisionHistoryLimit": {},
                                "f:selector": {},
                                "f:strategy": {
                                    "f:rollingUpdate": {
                                        ".": {},
                                        "f:maxSurge": {},
                                        "f:maxUnavailable": {}
                                    },
                                    "f:type": {}
                                },
                                "f:template": {
                                    "f:metadata": {
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:containers": {
                                            "k:{\"name\":\"function-runner\"}": {
                                                ".": {},
                                                "f:command": {},
                                                "f:env": {
                                                    ".": {},
                                                    "k:{\"name\":\"WRAPPER_SERVER_IMAGE\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:value": {}
                                                    }
                                                },
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:name": {},
                                                "f:ports": {
                                                    ".": {},
                                                    "k:{\"containerPort\":9445,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:protocol": {}
                                                    }
                                                },
                                                "f:readinessProbe": {
                                                    ".": {},
                                                    "f:exec": {
                                                        ".": {},
                                                        "f:command": {}
                                                    },
                                                    "f:failureThreshold": {},
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:resources": {
                                                    ".": {},
                                                    "f:requests": {
                                                        ".": {},
                                                        "f:cpu": {},
                                                        "f:memory": {}
                                                    }
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {},
                                                "f:volumeMounts": {
                                                    ".": {},
                                                    "k:{\"mountPath\":\"/pod-cache-config\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    }
                                                }
                                            }
                                        },
                                        "f:dnsPolicy": {},
                                        "f:restartPolicy": {},
                                        "f:schedulerName": {},
                                        "f:securityContext": {},
                                        "f:serviceAccount": {},
                                        "f:serviceAccountName": {},
                                        "f:terminationGracePeriodSeconds": {},
                                        "f:volumes": {
                                            ".": {},
                                            "k:{\"name\":\"pod-cache-config-volume\"}": {
                                                ".": {},
                                                "f:configMap": {
                                                    ".": {},
                                                    "f:defaultMode": {},
                                                    "f:name": {}
                                                },
                                                "f:name": {}
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "manager": "kubectl",
                        "operation": "Update",
                        "time": "2025-10-01T12:33:00Z"
                    },
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    "f:deployment.kubernetes.io/revision": {}
                                }
                            },
                            "f:status": {
                                "f:availableReplicas": {},
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"Available\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Progressing\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:observedGeneration": {},
                                "f:readyReplicas": {},
                                "f:replicas": {},
                                "f:updatedReplicas": {}
                            }
                        },
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "subresource": "status",
                        "time": "2025-10-01T12:33:57Z"
                    }
                ],
                "name": "function-runner",
                "namespace": "porch-system",
                "resourceVersion": "4232",
                "uid": "9633a957-43d0-46f8-be74-df0fae31e6e5"
            },
            "spec": {
                "progressDeadlineSeconds": 600,
                "replicas": 2,
                "revisionHistoryLimit": 10,
                "selector": {
                    "matchLabels": {
                        "app": "function-runner"
                    }
                },
                "strategy": {
                    "rollingUpdate": {
                        "maxSurge": "25%",
                        "maxUnavailable": "25%"
                    },
                    "type": "RollingUpdate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "app": "function-runner"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "command": [
                                    "/server",
                                    "--config=/config.yaml",
                                    "--functions=/functions",
                                    "--pod-namespace=porch-fn-system",
                                    "--max-request-body-size=6291456"
                                ],
                                "env": [
                                    {
                                        "name": "WRAPPER_SERVER_IMAGE",
                                        "value": "docker.io/nephio/porch-wrapper-server:latest"
                                    }
                                ],
                                "image": "docker.io/nephio/porch-function-runner:latest",
                                "imagePullPolicy": "IfNotPresent",
                                "name": "function-runner",
                                "ports": [
                                    {
                                        "containerPort": 9445,
                                        "protocol": "TCP"
                                    }
                                ],
                                "readinessProbe": {
                                    "exec": {
                                        "command": [
                                            "/grpc-health-probe",
                                            "-addr",
                                            "localhost:9445"
                                        ]
                                    },
                                    "failureThreshold": 3,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 1
                                },
                                "resources": {
                                    "requests": {
                                        "cpu": "125m",
                                        "memory": "64Mi"
                                    }
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/pod-cache-config",
                                        "name": "pod-cache-config-volume"
                                    }
                                ]
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "restartPolicy": "Always",
                        "schedulerName": "default-scheduler",
                        "securityContext": {},
                        "serviceAccount": "porch-fn-runner",
                        "serviceAccountName": "porch-fn-runner",
                        "terminationGracePeriodSeconds": 30,
                        "volumes": [
                            {
                                "configMap": {
                                    "defaultMode": 420,
                                    "name": "pod-cache-config"
                                },
                                "name": "pod-cache-config-volume"
                            }
                        ]
                    }
                }
            },
            "status": {
                "availableReplicas": 2,
                "conditions": [
                    {
                        "lastTransitionTime": "2025-10-01T12:33:57Z",
                        "lastUpdateTime": "2025-10-01T12:33:57Z",
                        "message": "Deployment has minimum availability.",
                        "reason": "MinimumReplicasAvailable",
                        "status": "True",
                        "type": "Available"
                    },
                    {
                        "lastTransitionTime": "2025-10-01T12:33:00Z",
                        "lastUpdateTime": "2025-10-01T12:33:57Z",
                        "message": "ReplicaSet \"function-runner-657b6c9b6d\" has successfully progressed.",
                        "reason": "NewReplicaSetAvailable",
                        "status": "True",
                        "type": "Progressing"
                    }
                ],
                "observedGeneration": 1,
                "readyReplicas": 2,
                "replicas": 2,
                "updatedReplicas": 2
            }
        },
        {
            "apiVersion": "apps/v1",
            "kind": "Deployment",
            "metadata": {
                "annotations": {
                    "config.k8s.io/owning-inventory": "nephio",
                    "deployment.kubernetes.io/revision": "1",
                    "internal.kpt.dev/upstream-identifier": "apps|Deployment|porch-system|porch-controllers",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{\"config.k8s.io/owning-inventory\":\"nephio\",\"internal.kpt.dev/upstream-identifier\":\"apps|Deployment|porch-system|porch-controllers\"},\"labels\":{\"k8s-app\":\"porch-controllers\"},\"name\":\"porch-controllers\",\"namespace\":\"porch-system\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"k8s-app\":\"porch-controllers\"}},\"template\":{\"metadata\":{\"labels\":{\"k8s-app\":\"porch-controllers\"}},\"spec\":{\"containers\":[{\"env\":[{\"name\":\"ENABLE_PACKAGEVARIANTS\",\"value\":\"true\"},{\"name\":\"ENABLE_PACKAGEVARIANTSETS\",\"value\":\"true\"}],\"image\":\"docker.io/nephio/porch-controllers:latest\",\"imagePullPolicy\":\"IfNotPresent\",\"livenessProbe\":{\"failureThreshold\":3,\"httpGet\":{\"path\":\"/healthz\",\"port\":8081,\"scheme\":\"HTTP\"},\"initialDelaySeconds\":30,\"periodSeconds\":30,\"successThreshold\":1,\"timeoutSeconds\":5},\"name\":\"porch-controllers\",\"readinessProbe\":{\"failureThreshold\":3,\"httpGet\":{\"path\":\"/readyz\",\"port\":8081,\"scheme\":\"HTTP\"},\"initialDelaySeconds\":5,\"periodSeconds\":5,\"successThreshold\":1,\"timeoutSeconds\":3}}],\"serviceAccountName\":\"porch-controllers\"}}}}\n"
                },
                "creationTimestamp": "2025-10-01T12:33:00Z",
                "generation": 1,
                "labels": {
                    "k8s-app": "porch-controllers"
                },
                "managedFields": [
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:config.k8s.io/owning-inventory": {},
                                    "f:internal.kpt.dev/upstream-identifier": {},
                                    "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:k8s-app": {}
                                }
                            },
                            "f:spec": {
                                "f:progressDeadlineSeconds": {},
                                "f:replicas": {},
                                "f:revisionHistoryLimit": {},
                                "f:selector": {},
                                "f:strategy": {
                                    "f:rollingUpdate": {
                                        ".": {},
                                        "f:maxSurge": {},
                                        "f:maxUnavailable": {}
                                    },
                                    "f:type": {}
                                },
                                "f:template": {
                                    "f:metadata": {
                                        "f:labels": {
                                            ".": {},
                                            "f:k8s-app": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:containers": {
                                            "k:{\"name\":\"porch-controllers\"}": {
                                                ".": {},
                                                "f:env": {
                                                    ".": {},
                                                    "k:{\"name\":\"ENABLE_PACKAGEVARIANTS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:value": {}
                                                    },
                                                    "k:{\"name\":\"ENABLE_PACKAGEVARIANTSETS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:value": {}
                                                    }
                                                },
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:livenessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:initialDelaySeconds": {},
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:name": {},
                                                "f:readinessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:initialDelaySeconds": {},
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:resources": {},
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {}
                                            }
                                        },
                                        "f:dnsPolicy": {},
                                        "f:restartPolicy": {},
                                        "f:schedulerName": {},
                                        "f:securityContext": {},
                                        "f:serviceAccount": {},
                                        "f:serviceAccountName": {},
                                        "f:terminationGracePeriodSeconds": {}
                                    }
                                }
                            }
                        },
                        "manager": "kubectl",
                        "operation": "Update",
                        "time": "2025-10-01T12:33:00Z"
                    },
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    "f:deployment.kubernetes.io/revision": {}
                                }
                            },
                            "f:status": {
                                "f:availableReplicas": {},
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"Available\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Progressing\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:observedGeneration": {},
                                "f:readyReplicas": {},
                                "f:replicas": {},
                                "f:updatedReplicas": {}
                            }
                        },
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "subresource": "status",
                        "time": "2025-10-01T12:33:17Z"
                    }
                ],
                "name": "porch-controllers",
                "namespace": "porch-system",
                "resourceVersion": "3897",
                "uid": "9bb343bb-a55a-43c9-864f-9862fae77f21"
            },
            "spec": {
                "progressDeadlineSeconds": 600,
                "replicas": 1,
                "revisionHistoryLimit": 10,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "porch-controllers"
                    }
                },
                "strategy": {
                    "rollingUpdate": {
                        "maxSurge": "25%",
                        "maxUnavailable": "25%"
                    },
                    "type": "RollingUpdate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "k8s-app": "porch-controllers"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "env": [
                                    {
                                        "name": "ENABLE_PACKAGEVARIANTS",
                                        "value": "true"
                                    },
                                    {
                                        "name": "ENABLE_PACKAGEVARIANTSETS",
                                        "value": "true"
                                    }
                                ],
                                "image": "docker.io/nephio/porch-controllers:latest",
                                "imagePullPolicy": "IfNotPresent",
                                "livenessProbe": {
                                    "failureThreshold": 3,
                                    "httpGet": {
                                        "path": "/healthz",
                                        "port": 8081,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 30,
                                    "periodSeconds": 30,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 5
                                },
                                "name": "porch-controllers",
                                "readinessProbe": {
                                    "failureThreshold": 3,
                                    "httpGet": {
                                        "path": "/readyz",
                                        "port": 8081,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 5,
                                    "periodSeconds": 5,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 3
                                },
                                "resources": {},
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File"
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "restartPolicy": "Always",
                        "schedulerName": "default-scheduler",
                        "securityContext": {},
                        "serviceAccount": "porch-controllers",
                        "serviceAccountName": "porch-controllers",
                        "terminationGracePeriodSeconds": 30
                    }
                }
            },
            "status": {
                "availableReplicas": 1,
                "conditions": [
                    {
                        "lastTransitionTime": "2025-10-01T12:33:17Z",
                        "lastUpdateTime": "2025-10-01T12:33:17Z",
                        "message": "Deployment has minimum availability.",
                        "reason": "MinimumReplicasAvailable",
                        "status": "True",
                        "type": "Available"
                    },
                    {
                        "lastTransitionTime": "2025-10-01T12:33:00Z",
                        "lastUpdateTime": "2025-10-01T12:33:17Z",
                        "message": "ReplicaSet \"porch-controllers-777565b5dc\" has successfully progressed.",
                        "reason": "NewReplicaSetAvailable",
                        "status": "True",
                        "type": "Progressing"
                    }
                ],
                "observedGeneration": 1,
                "readyReplicas": 1,
                "replicas": 1,
                "updatedReplicas": 1
            }
        },
        {
            "apiVersion": "apps/v1",
            "kind": "Deployment",
            "metadata": {
                "annotations": {
                    "config.k8s.io/owning-inventory": "nephio",
                    "deployment.kubernetes.io/revision": "1",
                    "internal.kpt.dev/upstream-identifier": "apps|Deployment|porch-system|porch-server",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{\"config.k8s.io/owning-inventory\":\"nephio\",\"internal.kpt.dev/upstream-identifier\":\"apps|Deployment|porch-system|porch-server\"},\"name\":\"porch-server\",\"namespace\":\"porch-system\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"porch-server\"}},\"template\":{\"metadata\":{\"labels\":{\"app\":\"porch-server\"}},\"spec\":{\"containers\":[{\"args\":[\"--function-runner=function-runner:9445\",\"--cache-directory=/cache\",\"--cert-dir=/tmp/certs\",\"--secure-port=4443\",\"--repo-sync-frequency=3m\",\"--disable-validating-admissions-policy=true\",\"--max-request-body-size=6291456\"],\"env\":[{\"name\":\"OTEL_SERVICE_NAME\",\"value\":\"porch-server\"},{\"name\":\"CERT_STORAGE_DIR\",\"value\":\"/etc/webhook/certs\"},{\"name\":\"GOOGLE_API_GO_EXPERIMENTAL_DISABLE_NEW_AUTH_LIB\",\"value\":\"true\"}],\"image\":\"docker.io/nephio/porch-server:latest\",\"imagePullPolicy\":\"IfNotPresent\",\"livenessProbe\":{\"failureThreshold\":3,\"httpGet\":{\"path\":\"/healthz\",\"port\":4443,\"scheme\":\"HTTPS\"},\"initialDelaySeconds\":30,\"periodSeconds\":30,\"successThreshold\":1,\"timeoutSeconds\":5},\"name\":\"porch-server\",\"readinessProbe\":{\"failureThreshold\":3,\"httpGet\":{\"path\":\"/readyz\",\"port\":4443,\"scheme\":\"HTTPS\"},\"initialDelaySeconds\":5,\"periodSeconds\":5,\"successThreshold\":1,\"timeoutSeconds\":3},\"resources\":{\"limits\":{\"memory\":\"512Mi\"},\"requests\":{\"cpu\":\"250m\",\"memory\":\"256Mi\"}},\"securityContext\":{\"runAsGroup\":65532,\"runAsNonRoot\":true,\"runAsUser\":65532},\"volumeMounts\":[{\"mountPath\":\"/cache\",\"name\":\"cache-volume\"},{\"mountPath\":\"/etc/webhook/certs\",\"name\":\"webhook-certs\"},{\"mountPath\":\"/tmp/certs\",\"name\":\"api-server-certs\"}]}],\"serviceAccountName\":\"porch-server\",\"volumes\":[{\"emptyDir\":{},\"name\":\"cache-volume\"},{\"emptyDir\":{},\"name\":\"webhook-certs\"},{\"emptyDir\":{},\"name\":\"api-server-certs\"}]}}}}\n"
                },
                "creationTimestamp": "2025-10-01T12:33:00Z",
                "generation": 1,
                "managedFields": [
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:config.k8s.io/owning-inventory": {},
                                    "f:internal.kpt.dev/upstream-identifier": {},
                                    "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                }
                            },
                            "f:spec": {
                                "f:progressDeadlineSeconds": {},
                                "f:replicas": {},
                                "f:revisionHistoryLimit": {},
                                "f:selector": {},
                                "f:strategy": {
                                    "f:rollingUpdate": {
                                        ".": {},
                                        "f:maxSurge": {},
                                        "f:maxUnavailable": {}
                                    },
                                    "f:type": {}
                                },
                                "f:template": {
                                    "f:metadata": {
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:containers": {
                                            "k:{\"name\":\"porch-server\"}": {
                                                ".": {},
                                                "f:args": {},
                                                "f:env": {
                                                    ".": {},
                                                    "k:{\"name\":\"CERT_STORAGE_DIR\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:value": {}
                                                    },
                                                    "k:{\"name\":\"GOOGLE_API_GO_EXPERIMENTAL_DISABLE_NEW_AUTH_LIB\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:value": {}
                                                    },
                                                    "k:{\"name\":\"OTEL_SERVICE_NAME\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:value": {}
                                                    }
                                                },
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:livenessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:initialDelaySeconds": {},
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:name": {},
                                                "f:readinessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:initialDelaySeconds": {},
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:resources": {
                                                    ".": {},
                                                    "f:limits": {
                                                        ".": {},
                                                        "f:memory": {}
                                                    },
                                                    "f:requests": {
                                                        ".": {},
                                                        "f:cpu": {},
                                                        "f:memory": {}
                                                    }
                                                },
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:runAsGroup": {},
                                                    "f:runAsNonRoot": {},
                                                    "f:runAsUser": {}
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {},
                                                "f:volumeMounts": {
                                                    ".": {},
                                                    "k:{\"mountPath\":\"/cache\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    },
                                                    "k:{\"mountPath\":\"/etc/webhook/certs\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    },
                                                    "k:{\"mountPath\":\"/tmp/certs\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    }
                                                }
                                            }
                                        },
                                        "f:dnsPolicy": {},
                                        "f:restartPolicy": {},
                                        "f:schedulerName": {},
                                        "f:securityContext": {},
                                        "f:serviceAccount": {},
                                        "f:serviceAccountName": {},
                                        "f:terminationGracePeriodSeconds": {},
                                        "f:volumes": {
                                            ".": {},
                                            "k:{\"name\":\"api-server-certs\"}": {
                                                ".": {},
                                                "f:emptyDir": {},
                                                "f:name": {}
                                            },
                                            "k:{\"name\":\"cache-volume\"}": {
                                                ".": {},
                                                "f:emptyDir": {},
                                                "f:name": {}
                                            },
                                            "k:{\"name\":\"webhook-certs\"}": {
                                                ".": {},
                                                "f:emptyDir": {},
                                                "f:name": {}
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "manager": "kubectl",
                        "operation": "Update",
                        "time": "2025-10-01T12:33:00Z"
                    },
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    "f:deployment.kubernetes.io/revision": {}
                                }
                            },
                            "f:status": {
                                "f:availableReplicas": {},
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"Available\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Progressing\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:observedGeneration": {},
                                "f:readyReplicas": {},
                                "f:replicas": {},
                                "f:updatedReplicas": {}
                            }
                        },
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "subresource": "status",
                        "time": "2025-10-01T12:33:15Z"
                    }
                ],
                "name": "porch-server",
                "namespace": "porch-system",
                "resourceVersion": "3826",
                "uid": "b08b9888-7c91-472d-a13b-313d0d21e843"
            },
            "spec": {
                "progressDeadlineSeconds": 600,
                "replicas": 1,
                "revisionHistoryLimit": 10,
                "selector": {
                    "matchLabels": {
                        "app": "porch-server"
                    }
                },
                "strategy": {
                    "rollingUpdate": {
                        "maxSurge": "25%",
                        "maxUnavailable": "25%"
                    },
                    "type": "RollingUpdate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "app": "porch-server"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "args": [
                                    "--function-runner=function-runner:9445",
                                    "--cache-directory=/cache",
                                    "--cert-dir=/tmp/certs",
                                    "--secure-port=4443",
                                    "--repo-sync-frequency=3m",
                                    "--disable-validating-admissions-policy=true",
                                    "--max-request-body-size=6291456"
                                ],
                                "env": [
                                    {
                                        "name": "OTEL_SERVICE_NAME",
                                        "value": "porch-server"
                                    },
                                    {
                                        "name": "CERT_STORAGE_DIR",
                                        "value": "/etc/webhook/certs"
                                    },
                                    {
                                        "name": "GOOGLE_API_GO_EXPERIMENTAL_DISABLE_NEW_AUTH_LIB",
                                        "value": "true"
                                    }
                                ],
                                "image": "docker.io/nephio/porch-server:latest",
                                "imagePullPolicy": "IfNotPresent",
                                "livenessProbe": {
                                    "failureThreshold": 3,
                                    "httpGet": {
                                        "path": "/healthz",
                                        "port": 4443,
                                        "scheme": "HTTPS"
                                    },
                                    "initialDelaySeconds": 30,
                                    "periodSeconds": 30,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 5
                                },
                                "name": "porch-server",
                                "readinessProbe": {
                                    "failureThreshold": 3,
                                    "httpGet": {
                                        "path": "/readyz",
                                        "port": 4443,
                                        "scheme": "HTTPS"
                                    },
                                    "initialDelaySeconds": 5,
                                    "periodSeconds": 5,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 3
                                },
                                "resources": {
                                    "limits": {
                                        "memory": "512Mi"
                                    },
                                    "requests": {
                                        "cpu": "250m",
                                        "memory": "256Mi"
                                    }
                                },
                                "securityContext": {
                                    "runAsGroup": 65532,
                                    "runAsNonRoot": true,
                                    "runAsUser": 65532
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/cache",
                                        "name": "cache-volume"
                                    },
                                    {
                                        "mountPath": "/etc/webhook/certs",
                                        "name": "webhook-certs"
                                    },
                                    {
                                        "mountPath": "/tmp/certs",
                                        "name": "api-server-certs"
                                    }
                                ]
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "restartPolicy": "Always",
                        "schedulerName": "default-scheduler",
                        "securityContext": {},
                        "serviceAccount": "porch-server",
                        "serviceAccountName": "porch-server",
                        "terminationGracePeriodSeconds": 30,
                        "volumes": [
                            {
                                "emptyDir": {},
                                "name": "cache-volume"
                            },
                            {
                                "emptyDir": {},
                                "name": "webhook-certs"
                            },
                            {
                                "emptyDir": {},
                                "name": "api-server-certs"
                            }
                        ]
                    }
                }
            },
            "status": {
                "availableReplicas": 1,
                "conditions": [
                    {
                        "lastTransitionTime": "2025-10-01T12:33:15Z",
                        "lastUpdateTime": "2025-10-01T12:33:15Z",
                        "message": "Deployment has minimum availability.",
                        "reason": "MinimumReplicasAvailable",
                        "status": "True",
                        "type": "Available"
                    },
                    {
                        "lastTransitionTime": "2025-10-01T12:33:00Z",
                        "lastUpdateTime": "2025-10-01T12:33:15Z",
                        "message": "ReplicaSet \"porch-server-79cf46f659\" has successfully progressed.",
                        "reason": "NewReplicaSetAvailable",
                        "status": "True",
                        "type": "Progressing"
                    }
                ],
                "observedGeneration": 1,
                "readyReplicas": 1,
                "replicas": 1,
                "updatedReplicas": 1
            }
        }
    ]
}

TASK [install : Wait for deployments in namespace porch-system] ****************
Wednesday 01 October 2025  12:36:15 +0000 (0:00:00.119)       0:06:48.128 ***** 
Wednesday 01 October 2025  12:36:15 +0000 (0:00:00.119)       0:06:48.127 ***** 
ok: [127.0.0.1] => (item={'metadata': {'name': 'function-runner', 'namespace': 'porch-system', 'uid': '9633a957-43d0-46f8-be74-df0fae31e6e5', 'resourceVersion': '4232', 'generation': 1, 'creationTimestamp': '2025-10-01T12:33:00Z', 'annotations': {'config.k8s.io/owning-inventory': 'nephio', 'deployment.kubernetes.io/revision': '1', 'internal.kpt.dev/upstream-identifier': 'apps|Deployment|porch-system|function-runner', 'kubectl.kubernetes.io/last-applied-configuration': '{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"config.k8s.io/owning-inventory":"nephio","internal.kpt.dev/upstream-identifier":"apps|Deployment|porch-system|function-runner"},"name":"function-runner","namespace":"porch-system"},"spec":{"replicas":2,"selector":{"matchLabels":{"app":"function-runner"}},"template":{"metadata":{"labels":{"app":"function-runner"}},"spec":{"containers":[{"command":["/server","--config=/config.yaml","--functions=/functions","--pod-namespace=porch-fn-system","--max-request-body-size=6291456"],"env":[{"name":"WRAPPER_SERVER_IMAGE","value":"docker.io/nephio/porch-wrapper-server:latest"}],"image":"docker.io/nephio/porch-function-runner:latest","imagePullPolicy":"IfNotPresent","name":"function-runner","ports":[{"containerPort":9445}],"readinessProbe":{"exec":{"command":["/grpc-health-probe","-addr","localhost:9445"]}},"resources":{"requests":{"cpu":"125m","memory":"64Mi"}},"volumeMounts":[{"mountPath":"/pod-cache-config","name":"pod-cache-config-volume"}]}],"serviceAccountName":"porch-fn-runner","volumes":[{"configMap":{"name":"pod-cache-config"},"name":"pod-cache-config-volume"}]}}}}\n'}, 'managedFields': [{'manager': 'kubectl', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:33:00Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'.': {}, 'f:config.k8s.io/owning-inventory': {}, 'f:internal.kpt.dev/upstream-identifier': {}, 'f:kubectl.kubernetes.io/last-applied-configuration': {}}}, 'f:spec': {'f:progressDeadlineSeconds': {}, 'f:replicas': {}, 'f:revisionHistoryLimit': {}, 'f:selector': {}, 'f:strategy': {'f:rollingUpdate': {'.': {}, 'f:maxSurge': {}, 'f:maxUnavailable': {}}, 'f:type': {}}, 'f:template': {'f:metadata': {'f:labels': {'.': {}, 'f:app': {}}}, 'f:spec': {'f:containers': {'k:{"name":"function-runner"}': {'.': {}, 'f:command': {}, 'f:env': {'.': {}, 'k:{"name":"WRAPPER_SERVER_IMAGE"}': {'.': {}, 'f:name': {}, 'f:value': {}}}, 'f:image': {}, 'f:imagePullPolicy': {}, 'f:name': {}, 'f:ports': {'.': {}, 'k:{"containerPort":9445,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:protocol': {}}}, 'f:readinessProbe': {'.': {}, 'f:exec': {'.': {}, 'f:command': {}}, 'f:failureThreshold': {}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:timeoutSeconds': {}}, 'f:resources': {'.': {}, 'f:requests': {'.': {}, 'f:cpu': {}, 'f:memory': {}}}, 'f:terminationMessagePath': {}, 'f:terminationMessagePolicy': {}, 'f:volumeMounts': {'.': {}, 'k:{"mountPath":"/pod-cache-config"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}}}}, 'f:dnsPolicy': {}, 'f:restartPolicy': {}, 'f:schedulerName': {}, 'f:securityContext': {}, 'f:serviceAccount': {}, 'f:serviceAccountName': {}, 'f:terminationGracePeriodSeconds': {}, 'f:volumes': {'.': {}, 'k:{"name":"pod-cache-config-volume"}': {'.': {}, 'f:configMap': {'.': {}, 'f:defaultMode': {}, 'f:name': {}}, 'f:name': {}}}}}}}}, {'manager': 'kube-controller-manager', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:33:57Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'f:deployment.kubernetes.io/revision': {}}}, 'f:status': {'f:availableReplicas': {}, 'f:conditions': {'.': {}, 'k:{"type":"Available"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}, 'k:{"type":"Progressing"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}}, 'f:observedGeneration': {}, 'f:readyReplicas': {}, 'f:replicas': {}, 'f:updatedReplicas': {}}}, 'subresource': 'status'}]}, 'spec': {'replicas': 2, 'selector': {'matchLabels': {'app': 'function-runner'}}, 'template': {'metadata': {'labels': {'app': 'function-runner'}}, 'spec': {'volumes': [{'name': 'pod-cache-config-volume', 'configMap': {'name': 'pod-cache-config', 'defaultMode': 420}}], 'containers': [{'name': 'function-runner', 'image': 'docker.io/nephio/porch-function-runner:latest', 'command': ['/server', '--config=/config.yaml', '--functions=/functions', '--pod-namespace=porch-fn-system', '--max-request-body-size=6291456'], 'ports': [{'containerPort': 9445, 'protocol': 'TCP'}], 'env': [{'name': 'WRAPPER_SERVER_IMAGE', 'value': 'docker.io/nephio/porch-wrapper-server:latest'}], 'resources': {'requests': {'cpu': '125m', 'memory': '64Mi'}}, 'volumeMounts': [{'name': 'pod-cache-config-volume', 'mountPath': '/pod-cache-config'}], 'readinessProbe': {'exec': {'command': ['/grpc-health-probe', '-addr', 'localhost:9445']}, 'timeoutSeconds': 1, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 3}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'IfNotPresent'}], 'restartPolicy': 'Always', 'terminationGracePeriodSeconds': 30, 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'porch-fn-runner', 'serviceAccount': 'porch-fn-runner', 'securityContext': {}, 'schedulerName': 'default-scheduler'}}, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxUnavailable': '25%', 'maxSurge': '25%'}}, 'revisionHistoryLimit': 10, 'progressDeadlineSeconds': 600}, 'status': {'observedGeneration': 1, 'replicas': 2, 'updatedReplicas': 2, 'readyReplicas': 2, 'availableReplicas': 2, 'conditions': [{'type': 'Available', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:33:57Z', 'lastTransitionTime': '2025-10-01T12:33:57Z', 'reason': 'MinimumReplicasAvailable', 'message': 'Deployment has minimum availability.'}, {'type': 'Progressing', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:33:57Z', 'lastTransitionTime': '2025-10-01T12:33:00Z', 'reason': 'NewReplicaSetAvailable', 'message': 'ReplicaSet "function-runner-657b6c9b6d" has successfully progressed.'}]}, 'apiVersion': 'apps/v1', 'kind': 'Deployment'})
ok: [127.0.0.1] => (item={'metadata': {'name': 'porch-controllers', 'namespace': 'porch-system', 'uid': '9bb343bb-a55a-43c9-864f-9862fae77f21', 'resourceVersion': '3897', 'generation': 1, 'creationTimestamp': '2025-10-01T12:33:00Z', 'labels': {'k8s-app': 'porch-controllers'}, 'annotations': {'config.k8s.io/owning-inventory': 'nephio', 'deployment.kubernetes.io/revision': '1', 'internal.kpt.dev/upstream-identifier': 'apps|Deployment|porch-system|porch-controllers', 'kubectl.kubernetes.io/last-applied-configuration': '{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"config.k8s.io/owning-inventory":"nephio","internal.kpt.dev/upstream-identifier":"apps|Deployment|porch-system|porch-controllers"},"labels":{"k8s-app":"porch-controllers"},"name":"porch-controllers","namespace":"porch-system"},"spec":{"replicas":1,"selector":{"matchLabels":{"k8s-app":"porch-controllers"}},"template":{"metadata":{"labels":{"k8s-app":"porch-controllers"}},"spec":{"containers":[{"env":[{"name":"ENABLE_PACKAGEVARIANTS","value":"true"},{"name":"ENABLE_PACKAGEVARIANTSETS","value":"true"}],"image":"docker.io/nephio/porch-controllers:latest","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/healthz","port":8081,"scheme":"HTTP"},"initialDelaySeconds":30,"periodSeconds":30,"successThreshold":1,"timeoutSeconds":5},"name":"porch-controllers","readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/readyz","port":8081,"scheme":"HTTP"},"initialDelaySeconds":5,"periodSeconds":5,"successThreshold":1,"timeoutSeconds":3}}],"serviceAccountName":"porch-controllers"}}}}\n'}, 'managedFields': [{'manager': 'kubectl', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:33:00Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'.': {}, 'f:config.k8s.io/owning-inventory': {}, 'f:internal.kpt.dev/upstream-identifier': {}, 'f:kubectl.kubernetes.io/last-applied-configuration': {}}, 'f:labels': {'.': {}, 'f:k8s-app': {}}}, 'f:spec': {'f:progressDeadlineSeconds': {}, 'f:replicas': {}, 'f:revisionHistoryLimit': {}, 'f:selector': {}, 'f:strategy': {'f:rollingUpdate': {'.': {}, 'f:maxSurge': {}, 'f:maxUnavailable': {}}, 'f:type': {}}, 'f:template': {'f:metadata': {'f:labels': {'.': {}, 'f:k8s-app': {}}}, 'f:spec': {'f:containers': {'k:{"name":"porch-controllers"}': {'.': {}, 'f:env': {'.': {}, 'k:{"name":"ENABLE_PACKAGEVARIANTS"}': {'.': {}, 'f:name': {}, 'f:value': {}}, 'k:{"name":"ENABLE_PACKAGEVARIANTSETS"}': {'.': {}, 'f:name': {}, 'f:value': {}}}, 'f:image': {}, 'f:imagePullPolicy': {}, 'f:livenessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:httpGet': {'.': {}, 'f:path': {}, 'f:port': {}, 'f:scheme': {}}, 'f:initialDelaySeconds': {}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:timeoutSeconds': {}}, 'f:name': {}, 'f:readinessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:httpGet': {'.': {}, 'f:path': {}, 'f:port': {}, 'f:scheme': {}}, 'f:initialDelaySeconds': {}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:timeoutSeconds': {}}, 'f:resources': {}, 'f:terminationMessagePath': {}, 'f:terminationMessagePolicy': {}}}, 'f:dnsPolicy': {}, 'f:restartPolicy': {}, 'f:schedulerName': {}, 'f:securityContext': {}, 'f:serviceAccount': {}, 'f:serviceAccountName': {}, 'f:terminationGracePeriodSeconds': {}}}}}}, {'manager': 'kube-controller-manager', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:33:17Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'f:deployment.kubernetes.io/revision': {}}}, 'f:status': {'f:availableReplicas': {}, 'f:conditions': {'.': {}, 'k:{"type":"Available"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}, 'k:{"type":"Progressing"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}}, 'f:observedGeneration': {}, 'f:readyReplicas': {}, 'f:replicas': {}, 'f:updatedReplicas': {}}}, 'subresource': 'status'}]}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'k8s-app': 'porch-controllers'}}, 'template': {'metadata': {'labels': {'k8s-app': 'porch-controllers'}}, 'spec': {'containers': [{'name': 'porch-controllers', 'image': 'docker.io/nephio/porch-controllers:latest', 'env': [{'name': 'ENABLE_PACKAGEVARIANTS', 'value': 'true'}, {'name': 'ENABLE_PACKAGEVARIANTSETS', 'value': 'true'}], 'resources': {}, 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 8081, 'scheme': 'HTTP'}, 'initialDelaySeconds': 30, 'timeoutSeconds': 5, 'periodSeconds': 30, 'successThreshold': 1, 'failureThreshold': 3}, 'readinessProbe': {'httpGet': {'path': '/readyz', 'port': 8081, 'scheme': 'HTTP'}, 'initialDelaySeconds': 5, 'timeoutSeconds': 3, 'periodSeconds': 5, 'successThreshold': 1, 'failureThreshold': 3}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'IfNotPresent'}], 'restartPolicy': 'Always', 'terminationGracePeriodSeconds': 30, 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'porch-controllers', 'serviceAccount': 'porch-controllers', 'securityContext': {}, 'schedulerName': 'default-scheduler'}}, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxUnavailable': '25%', 'maxSurge': '25%'}}, 'revisionHistoryLimit': 10, 'progressDeadlineSeconds': 600}, 'status': {'observedGeneration': 1, 'replicas': 1, 'updatedReplicas': 1, 'readyReplicas': 1, 'availableReplicas': 1, 'conditions': [{'type': 'Available', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:33:17Z', 'lastTransitionTime': '2025-10-01T12:33:17Z', 'reason': 'MinimumReplicasAvailable', 'message': 'Deployment has minimum availability.'}, {'type': 'Progressing', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:33:17Z', 'lastTransitionTime': '2025-10-01T12:33:00Z', 'reason': 'NewReplicaSetAvailable', 'message': 'ReplicaSet "porch-controllers-777565b5dc" has successfully progressed.'}]}, 'apiVersion': 'apps/v1', 'kind': 'Deployment'})
ok: [127.0.0.1] => (item={'metadata': {'name': 'porch-server', 'namespace': 'porch-system', 'uid': 'b08b9888-7c91-472d-a13b-313d0d21e843', 'resourceVersion': '3826', 'generation': 1, 'creationTimestamp': '2025-10-01T12:33:00Z', 'annotations': {'config.k8s.io/owning-inventory': 'nephio', 'deployment.kubernetes.io/revision': '1', 'internal.kpt.dev/upstream-identifier': 'apps|Deployment|porch-system|porch-server', 'kubectl.kubernetes.io/last-applied-configuration': '{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"config.k8s.io/owning-inventory":"nephio","internal.kpt.dev/upstream-identifier":"apps|Deployment|porch-system|porch-server"},"name":"porch-server","namespace":"porch-system"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"porch-server"}},"template":{"metadata":{"labels":{"app":"porch-server"}},"spec":{"containers":[{"args":["--function-runner=function-runner:9445","--cache-directory=/cache","--cert-dir=/tmp/certs","--secure-port=4443","--repo-sync-frequency=3m","--disable-validating-admissions-policy=true","--max-request-body-size=6291456"],"env":[{"name":"OTEL_SERVICE_NAME","value":"porch-server"},{"name":"CERT_STORAGE_DIR","value":"/etc/webhook/certs"},{"name":"GOOGLE_API_GO_EXPERIMENTAL_DISABLE_NEW_AUTH_LIB","value":"true"}],"image":"docker.io/nephio/porch-server:latest","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/healthz","port":4443,"scheme":"HTTPS"},"initialDelaySeconds":30,"periodSeconds":30,"successThreshold":1,"timeoutSeconds":5},"name":"porch-server","readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/readyz","port":4443,"scheme":"HTTPS"},"initialDelaySeconds":5,"periodSeconds":5,"successThreshold":1,"timeoutSeconds":3},"resources":{"limits":{"memory":"512Mi"},"requests":{"cpu":"250m","memory":"256Mi"}},"securityContext":{"runAsGroup":65532,"runAsNonRoot":true,"runAsUser":65532},"volumeMounts":[{"mountPath":"/cache","name":"cache-volume"},{"mountPath":"/etc/webhook/certs","name":"webhook-certs"},{"mountPath":"/tmp/certs","name":"api-server-certs"}]}],"serviceAccountName":"porch-server","volumes":[{"emptyDir":{},"name":"cache-volume"},{"emptyDir":{},"name":"webhook-certs"},{"emptyDir":{},"name":"api-server-certs"}]}}}}\n'}, 'managedFields': [{'manager': 'kubectl', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:33:00Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'.': {}, 'f:config.k8s.io/owning-inventory': {}, 'f:internal.kpt.dev/upstream-identifier': {}, 'f:kubectl.kubernetes.io/last-applied-configuration': {}}}, 'f:spec': {'f:progressDeadlineSeconds': {}, 'f:replicas': {}, 'f:revisionHistoryLimit': {}, 'f:selector': {}, 'f:strategy': {'f:rollingUpdate': {'.': {}, 'f:maxSurge': {}, 'f:maxUnavailable': {}}, 'f:type': {}}, 'f:template': {'f:metadata': {'f:labels': {'.': {}, 'f:app': {}}}, 'f:spec': {'f:containers': {'k:{"name":"porch-server"}': {'.': {}, 'f:args': {}, 'f:env': {'.': {}, 'k:{"name":"CERT_STORAGE_DIR"}': {'.': {}, 'f:name': {}, 'f:value': {}}, 'k:{"name":"GOOGLE_API_GO_EXPERIMENTAL_DISABLE_NEW_AUTH_LIB"}': {'.': {}, 'f:name': {}, 'f:value': {}}, 'k:{"name":"OTEL_SERVICE_NAME"}': {'.': {}, 'f:name': {}, 'f:value': {}}}, 'f:image': {}, 'f:imagePullPolicy': {}, 'f:livenessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:httpGet': {'.': {}, 'f:path': {}, 'f:port': {}, 'f:scheme': {}}, 'f:initialDelaySeconds': {}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:timeoutSeconds': {}}, 'f:name': {}, 'f:readinessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:httpGet': {'.': {}, 'f:path': {}, 'f:port': {}, 'f:scheme': {}}, 'f:initialDelaySeconds': {}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:timeoutSeconds': {}}, 'f:resources': {'.': {}, 'f:limits': {'.': {}, 'f:memory': {}}, 'f:requests': {'.': {}, 'f:cpu': {}, 'f:memory': {}}}, 'f:securityContext': {'.': {}, 'f:runAsGroup': {}, 'f:runAsNonRoot': {}, 'f:runAsUser': {}}, 'f:terminationMessagePath': {}, 'f:terminationMessagePolicy': {}, 'f:volumeMounts': {'.': {}, 'k:{"mountPath":"/cache"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}, 'k:{"mountPath":"/etc/webhook/certs"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}, 'k:{"mountPath":"/tmp/certs"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}}}}, 'f:dnsPolicy': {}, 'f:restartPolicy': {}, 'f:schedulerName': {}, 'f:securityContext': {}, 'f:serviceAccount': {}, 'f:serviceAccountName': {}, 'f:terminationGracePeriodSeconds': {}, 'f:volumes': {'.': {}, 'k:{"name":"api-server-certs"}': {'.': {}, 'f:emptyDir': {}, 'f:name': {}}, 'k:{"name":"cache-volume"}': {'.': {}, 'f:emptyDir': {}, 'f:name': {}}, 'k:{"name":"webhook-certs"}': {'.': {}, 'f:emptyDir': {}, 'f:name': {}}}}}}}}, {'manager': 'kube-controller-manager', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:33:15Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'f:deployment.kubernetes.io/revision': {}}}, 'f:status': {'f:availableReplicas': {}, 'f:conditions': {'.': {}, 'k:{"type":"Available"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}, 'k:{"type":"Progressing"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}}, 'f:observedGeneration': {}, 'f:readyReplicas': {}, 'f:replicas': {}, 'f:updatedReplicas': {}}}, 'subresource': 'status'}]}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'porch-server'}}, 'template': {'metadata': {'labels': {'app': 'porch-server'}}, 'spec': {'volumes': [{'name': 'cache-volume', 'emptyDir': {}}, {'name': 'webhook-certs', 'emptyDir': {}}, {'name': 'api-server-certs', 'emptyDir': {}}], 'containers': [{'name': 'porch-server', 'image': 'docker.io/nephio/porch-server:latest', 'args': ['--function-runner=function-runner:9445', '--cache-directory=/cache', '--cert-dir=/tmp/certs', '--secure-port=4443', '--repo-sync-frequency=3m', '--disable-validating-admissions-policy=true', '--max-request-body-size=6291456'], 'env': [{'name': 'OTEL_SERVICE_NAME', 'value': 'porch-server'}, {'name': 'CERT_STORAGE_DIR', 'value': '/etc/webhook/certs'}, {'name': 'GOOGLE_API_GO_EXPERIMENTAL_DISABLE_NEW_AUTH_LIB', 'value': 'true'}], 'resources': {'limits': {'memory': '512Mi'}, 'requests': {'cpu': '250m', 'memory': '256Mi'}}, 'volumeMounts': [{'name': 'cache-volume', 'mountPath': '/cache'}, {'name': 'webhook-certs', 'mountPath': '/etc/webhook/certs'}, {'name': 'api-server-certs', 'mountPath': '/tmp/certs'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 4443, 'scheme': 'HTTPS'}, 'initialDelaySeconds': 30, 'timeoutSeconds': 5, 'periodSeconds': 30, 'successThreshold': 1, 'failureThreshold': 3}, 'readinessProbe': {'httpGet': {'path': '/readyz', 'port': 4443, 'scheme': 'HTTPS'}, 'initialDelaySeconds': 5, 'timeoutSeconds': 3, 'periodSeconds': 5, 'successThreshold': 1, 'failureThreshold': 3}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'runAsUser': 65532, 'runAsGroup': 65532, 'runAsNonRoot': True}}], 'restartPolicy': 'Always', 'terminationGracePeriodSeconds': 30, 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'porch-server', 'serviceAccount': 'porch-server', 'securityContext': {}, 'schedulerName': 'default-scheduler'}}, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxUnavailable': '25%', 'maxSurge': '25%'}}, 'revisionHistoryLimit': 10, 'progressDeadlineSeconds': 600}, 'status': {'observedGeneration': 1, 'replicas': 1, 'updatedReplicas': 1, 'readyReplicas': 1, 'availableReplicas': 1, 'conditions': [{'type': 'Available', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:33:15Z', 'lastTransitionTime': '2025-10-01T12:33:15Z', 'reason': 'MinimumReplicasAvailable', 'message': 'Deployment has minimum availability.'}, {'type': 'Progressing', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:33:15Z', 'lastTransitionTime': '2025-10-01T12:33:00Z', 'reason': 'NewReplicaSetAvailable', 'message': 'ReplicaSet "porch-server-79cf46f659" has successfully progressed.'}]}, 'apiVersion': 'apps/v1', 'kind': 'Deployment'})

TASK [install : Get deployment resources in namespace nephio-system] ***********
Wednesday 01 October 2025  12:36:18 +0000 (0:00:02.983)       0:06:51.111 ***** 
Wednesday 01 October 2025  12:36:18 +0000 (0:00:02.983)       0:06:51.110 ***** 
ok: [127.0.0.1]

TASK [install : Print deployment resources in namespace nephio-system] *********
Wednesday 01 October 2025  12:36:20 +0000 (0:00:01.156)       0:06:52.268 ***** 
Wednesday 01 October 2025  12:36:20 +0000 (0:00:01.156)       0:06:52.267 ***** 
ok: [127.0.0.1] => {
    "deployment_list.resources": [
        {
            "apiVersion": "apps/v1",
            "kind": "Deployment",
            "metadata": {
                "annotations": {
                    "config.k8s.io/owning-inventory": "e61fb535e7d27939029d56b9de709d1d534817a2-1759322047123458822",
                    "deployment.kubernetes.io/revision": "1",
                    "internal.kpt.dev/upstream-identifier": "apps|Deployment|nephio-system|nephio-controller",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{\"config.k8s.io/owning-inventory\":\"e61fb535e7d27939029d56b9de709d1d534817a2-1759322047123458822\",\"internal.kpt.dev/upstream-identifier\":\"apps|Deployment|nephio-system|nephio-controller\"},\"name\":\"nephio-controller\",\"namespace\":\"nephio-system\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"fn.kptgen.dev/controller\":\"nephio-controller\"}},\"strategy\":{},\"template\":{\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"tbd\",\"app.kubernetes.io/instance\":\"tbd\",\"app.kubernetes.io/managed-by\":\"kpt\",\"app.kubernetes.io/name\":\"nephio\",\"app.kubernetes.io/part-of\":\"nephio\",\"app.kubernetes.io/version\":\"tbd\",\"fn.kptgen.dev/controller\":\"nephio-controller\"},\"name\":\"nephio-controller\",\"namespace\":\"nephio-system\"},\"spec\":{\"containers\":[{\"args\":[\"--secure-listen-address=0.0.0.0:8443\",\"--upstream=http://127.0.0.1:8080/\",\"--logtostderr=true\",\"--v=10\"],\"image\":\"gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0\",\"name\":\"kube-rbac-proxy\",\"ports\":[{\"containerPort\":8443,\"name\":\"https\"}],\"resources\":{}},{\"args\":[\"--health-probe-bind-address=:8081\",\"--metrics-bind-address=127.0.0.1:8080\",\"--leader-elect\"],\"command\":[\"/manager\"],\"env\":[{\"name\":\"POD_NAMESPACE\",\"valueFrom\":{\"fieldRef\":{\"apiVersion\":\"v1\",\"fieldPath\":\"metadata.namespace\"}}},{\"name\":\"POD_IP\",\"valueFrom\":{\"fieldRef\":{\"apiVersion\":\"v1\",\"fieldPath\":\"status.podIP\"}}},{\"name\":\"POD_NAME\",\"valueFrom\":{\"fieldRef\":{\"apiVersion\":\"v1\",\"fieldPath\":\"metadata.name\"}}},{\"name\":\"NODE_NAME\",\"valueFrom\":{\"fieldRef\":{\"apiVersion\":\"v1\",\"fieldPath\":\"spec.nodeName\"}}},{\"name\":\"NODE_IP\",\"valueFrom\":{\"fieldRef\":{\"apiVersion\":\"v1\",\"fieldPath\":\"status.hostIP\"}}},{\"name\":\"GIT_URL\",\"value\":\"http://172.18.0.200:3000\"},{\"name\":\"GIT_NAMESPACE\",\"value\":\"gitea\"},{\"name\":\"ENABLE_APPROVAL\",\"value\":\"true\"},{\"name\":\"ENABLE_REPOSITORIES\",\"value\":\"true\"},{\"name\":\"ENABLE_BOOTSTRAPSECRETS\",\"value\":\"true\"},{\"name\":\"ENABLE_BOOTSTRAPPACKAGES\",\"value\":\"true\"},{\"name\":\"ENABLE_GENERICSPECIALIZER\",\"value\":\"true\"},{\"name\":\"ENABLE_NETWORKS\",\"value\":\"true\"},{\"name\":\"CLIENT_PROXY_ADDRESS\",\"value\":\"resource-backend-controller-grpc-svc.backend-system.svc.cluster.local:9999\"}],\"image\":\"docker.io/nephio/nephio-operator:latest\",\"livenessProbe\":{\"httpGet\":{\"path\":\"/healthz\",\"port\":8081},\"initialDelaySeconds\":15,\"periodSeconds\":20},\"name\":\"controller\",\"readinessProbe\":{\"httpGet\":{\"path\":\"/readyz\",\"port\":8081},\"initialDelaySeconds\":5,\"periodSeconds\":10},\"resources\":{\"limits\":{\"cpu\":\"500m\",\"memory\":\"128Mi\"},\"requests\":{\"cpu\":\"10m\",\"memory\":\"64Mi\"}},\"securityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]}}}],\"serviceAccountName\":\"nephio-controller\"}}},\"status\":{}}\n"
                },
                "creationTimestamp": "2025-10-01T12:34:09Z",
                "generation": 1,
                "managedFields": [
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:config.k8s.io/owning-inventory": {},
                                    "f:internal.kpt.dev/upstream-identifier": {},
                                    "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                }
                            },
                            "f:spec": {
                                "f:progressDeadlineSeconds": {},
                                "f:replicas": {},
                                "f:revisionHistoryLimit": {},
                                "f:selector": {},
                                "f:strategy": {
                                    "f:rollingUpdate": {
                                        ".": {},
                                        "f:maxSurge": {},
                                        "f:maxUnavailable": {}
                                    },
                                    "f:type": {}
                                },
                                "f:template": {
                                    "f:metadata": {
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:app.kubernetes.io/version": {},
                                            "f:fn.kptgen.dev/controller": {}
                                        },
                                        "f:name": {},
                                        "f:namespace": {}
                                    },
                                    "f:spec": {
                                        "f:containers": {
                                            "k:{\"name\":\"controller\"}": {
                                                ".": {},
                                                "f:args": {},
                                                "f:command": {},
                                                "f:env": {
                                                    ".": {},
                                                    "k:{\"name\":\"CLIENT_PROXY_ADDRESS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:value": {}
                                                    },
                                                    "k:{\"name\":\"ENABLE_APPROVAL\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:value": {}
                                                    },
                                                    "k:{\"name\":\"ENABLE_BOOTSTRAPPACKAGES\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:value": {}
                                                    },
                                                    "k:{\"name\":\"ENABLE_BOOTSTRAPSECRETS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:value": {}
                                                    },
                                                    "k:{\"name\":\"ENABLE_GENERICSPECIALIZER\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:value": {}
                                                    },
                                                    "k:{\"name\":\"ENABLE_NETWORKS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:value": {}
                                                    },
                                                    "k:{\"name\":\"ENABLE_REPOSITORIES\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:value": {}
                                                    },
                                                    "k:{\"name\":\"GIT_NAMESPACE\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:value": {}
                                                    },
                                                    "k:{\"name\":\"GIT_URL\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:value": {}
                                                    },
                                                    "k:{\"name\":\"NODE_IP\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"NODE_NAME\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"POD_IP\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"POD_NAME\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"POD_NAMESPACE\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    }
                                                },
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:livenessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:initialDelaySeconds": {},
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:name": {},
                                                "f:readinessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:initialDelaySeconds": {},
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:resources": {
                                                    ".": {},
                                                    "f:limits": {
                                                        ".": {},
                                                        "f:cpu": {},
                                                        "f:memory": {}
                                                    },
                                                    "f:requests": {
                                                        ".": {},
                                                        "f:cpu": {},
                                                        "f:memory": {}
                                                    }
                                                },
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:allowPrivilegeEscalation": {},
                                                    "f:capabilities": {
                                                        ".": {},
                                                        "f:drop": {}
                                                    }
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {}
                                            },
                                            "k:{\"name\":\"kube-rbac-proxy\"}": {
                                                ".": {},
                                                "f:args": {},
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:name": {},
                                                "f:ports": {
                                                    ".": {},
                                                    "k:{\"containerPort\":8443,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    }
                                                },
                                                "f:resources": {},
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {}
                                            }
                                        },
                                        "f:dnsPolicy": {},
                                        "f:restartPolicy": {},
                                        "f:schedulerName": {},
                                        "f:securityContext": {},
                                        "f:serviceAccount": {},
                                        "f:serviceAccountName": {},
                                        "f:terminationGracePeriodSeconds": {}
                                    }
                                }
                            }
                        },
                        "manager": "kubectl",
                        "operation": "Update",
                        "time": "2025-10-01T12:34:09Z"
                    },
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    "f:deployment.kubernetes.io/revision": {}
                                }
                            },
                            "f:status": {
                                "f:availableReplicas": {},
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"Available\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Progressing\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:observedGeneration": {},
                                "f:readyReplicas": {},
                                "f:replicas": {},
                                "f:updatedReplicas": {}
                            }
                        },
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "subresource": "status",
                        "time": "2025-10-01T12:34:24Z"
                    }
                ],
                "name": "nephio-controller",
                "namespace": "nephio-system",
                "resourceVersion": "4463",
                "uid": "7574be2b-0039-4c2f-95b5-ad393397d071"
            },
            "spec": {
                "progressDeadlineSeconds": 600,
                "replicas": 1,
                "revisionHistoryLimit": 10,
                "selector": {
                    "matchLabels": {
                        "fn.kptgen.dev/controller": "nephio-controller"
                    }
                },
                "strategy": {
                    "rollingUpdate": {
                        "maxSurge": "25%",
                        "maxUnavailable": "25%"
                    },
                    "type": "RollingUpdate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "tbd",
                            "app.kubernetes.io/instance": "tbd",
                            "app.kubernetes.io/managed-by": "kpt",
                            "app.kubernetes.io/name": "nephio",
                            "app.kubernetes.io/part-of": "nephio",
                            "app.kubernetes.io/version": "tbd",
                            "fn.kptgen.dev/controller": "nephio-controller"
                        },
                        "name": "nephio-controller",
                        "namespace": "nephio-system"
                    },
                    "spec": {
                        "containers": [
                            {
                                "args": [
                                    "--secure-listen-address=0.0.0.0:8443",
                                    "--upstream=http://127.0.0.1:8080/",
                                    "--logtostderr=true",
                                    "--v=10"
                                ],
                                "image": "gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0",
                                "imagePullPolicy": "IfNotPresent",
                                "name": "kube-rbac-proxy",
                                "ports": [
                                    {
                                        "containerPort": 8443,
                                        "name": "https",
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {},
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File"
                            },
                            {
                                "args": [
                                    "--health-probe-bind-address=:8081",
                                    "--metrics-bind-address=127.0.0.1:8080",
                                    "--leader-elect"
                                ],
                                "command": [
                                    "/manager"
                                ],
                                "env": [
                                    {
                                        "name": "POD_NAMESPACE",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POD_IP",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "status.podIP"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POD_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.name"
                                            }
                                        }
                                    },
                                    {
                                        "name": "NODE_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "spec.nodeName"
                                            }
                                        }
                                    },
                                    {
                                        "name": "NODE_IP",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "status.hostIP"
                                            }
                                        }
                                    },
                                    {
                                        "name": "GIT_URL",
                                        "value": "http://172.18.0.200:3000"
                                    },
                                    {
                                        "name": "GIT_NAMESPACE",
                                        "value": "gitea"
                                    },
                                    {
                                        "name": "ENABLE_APPROVAL",
                                        "value": "true"
                                    },
                                    {
                                        "name": "ENABLE_REPOSITORIES",
                                        "value": "true"
                                    },
                                    {
                                        "name": "ENABLE_BOOTSTRAPSECRETS",
                                        "value": "true"
                                    },
                                    {
                                        "name": "ENABLE_BOOTSTRAPPACKAGES",
                                        "value": "true"
                                    },
                                    {
                                        "name": "ENABLE_GENERICSPECIALIZER",
                                        "value": "true"
                                    },
                                    {
                                        "name": "ENABLE_NETWORKS",
                                        "value": "true"
                                    },
                                    {
                                        "name": "CLIENT_PROXY_ADDRESS",
                                        "value": "resource-backend-controller-grpc-svc.backend-system.svc.cluster.local:9999"
                                    }
                                ],
                                "image": "docker.io/nephio/nephio-operator:latest",
                                "imagePullPolicy": "Always",
                                "livenessProbe": {
                                    "failureThreshold": 3,
                                    "httpGet": {
                                        "path": "/healthz",
                                        "port": 8081,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 15,
                                    "periodSeconds": 20,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 1
                                },
                                "name": "controller",
                                "readinessProbe": {
                                    "failureThreshold": 3,
                                    "httpGet": {
                                        "path": "/readyz",
                                        "port": 8081,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 1
                                },
                                "resources": {
                                    "limits": {
                                        "cpu": "500m",
                                        "memory": "128Mi"
                                    },
                                    "requests": {
                                        "cpu": "10m",
                                        "memory": "64Mi"
                                    }
                                },
                                "securityContext": {
                                    "allowPrivilegeEscalation": false,
                                    "capabilities": {
                                        "drop": [
                                            "ALL"
                                        ]
                                    }
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File"
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "restartPolicy": "Always",
                        "schedulerName": "default-scheduler",
                        "securityContext": {},
                        "serviceAccount": "nephio-controller",
                        "serviceAccountName": "nephio-controller",
                        "terminationGracePeriodSeconds": 30
                    }
                }
            },
            "status": {
                "availableReplicas": 1,
                "conditions": [
                    {
                        "lastTransitionTime": "2025-10-01T12:34:24Z",
                        "lastUpdateTime": "2025-10-01T12:34:24Z",
                        "message": "Deployment has minimum availability.",
                        "reason": "MinimumReplicasAvailable",
                        "status": "True",
                        "type": "Available"
                    },
                    {
                        "lastTransitionTime": "2025-10-01T12:34:10Z",
                        "lastUpdateTime": "2025-10-01T12:34:24Z",
                        "message": "ReplicaSet \"nephio-controller-6db4698fff\" has successfully progressed.",
                        "reason": "NewReplicaSetAvailable",
                        "status": "True",
                        "type": "Progressing"
                    }
                ],
                "observedGeneration": 1,
                "readyReplicas": 1,
                "replicas": 1,
                "updatedReplicas": 1
            }
        },
        {
            "apiVersion": "apps/v1",
            "kind": "Deployment",
            "metadata": {
                "annotations": {
                    "config.k8s.io/owning-inventory": "e61fb535e7d27939029d56b9de709d1d534817a2-1759322047123458822",
                    "deployment.kubernetes.io/revision": "1",
                    "internal.kpt.dev/upstream-identifier": "apps|Deployment|nephio-system|token-controller",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{\"config.k8s.io/owning-inventory\":\"e61fb535e7d27939029d56b9de709d1d534817a2-1759322047123458822\",\"internal.kpt.dev/upstream-identifier\":\"apps|Deployment|nephio-system|token-controller\"},\"name\":\"token-controller\",\"namespace\":\"nephio-system\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"fn.kptgen.dev/controller\":\"token-controller\"}},\"strategy\":{},\"template\":{\"metadata\":{\"labels\":{\"app.kubernetes.io/component\":\"tbd\",\"app.kubernetes.io/instance\":\"tbd\",\"app.kubernetes.io/managed-by\":\"kpt\",\"app.kubernetes.io/name\":\"nephio\",\"app.kubernetes.io/part-of\":\"nephio\",\"app.kubernetes.io/version\":\"tbd\",\"fn.kptgen.dev/controller\":\"token-controller\"},\"name\":\"token-controller\",\"namespace\":\"nephio-system\"},\"spec\":{\"containers\":[{\"args\":[\"--secure-listen-address=0.0.0.0:8443\",\"--upstream=http://127.0.0.1:8080/\",\"--logtostderr=true\",\"--v=10\"],\"image\":\"gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0\",\"name\":\"kube-rbac-proxy\",\"ports\":[{\"containerPort\":8443,\"name\":\"https\"}],\"resources\":{}},{\"args\":[\"--health-probe-bind-address=:8081\",\"--metrics-bind-address=127.0.0.1:8080\",\"--leader-elect\"],\"command\":[\"/manager\"],\"env\":[{\"name\":\"POD_NAMESPACE\",\"valueFrom\":{\"fieldRef\":{\"apiVersion\":\"v1\",\"fieldPath\":\"metadata.namespace\"}}},{\"name\":\"POD_IP\",\"valueFrom\":{\"fieldRef\":{\"apiVersion\":\"v1\",\"fieldPath\":\"status.podIP\"}}},{\"name\":\"POD_NAME\",\"valueFrom\":{\"fieldRef\":{\"apiVersion\":\"v1\",\"fieldPath\":\"metadata.name\"}}},{\"name\":\"NODE_NAME\",\"valueFrom\":{\"fieldRef\":{\"apiVersion\":\"v1\",\"fieldPath\":\"spec.nodeName\"}}},{\"name\":\"NODE_IP\",\"valueFrom\":{\"fieldRef\":{\"apiVersion\":\"v1\",\"fieldPath\":\"status.hostIP\"}}},{\"name\":\"GIT_URL\",\"value\":\"http://172.18.0.200:3000\"},{\"name\":\"GIT_NAMESPACE\",\"value\":\"gitea\"},{\"name\":\"ENABLE_TOKENS\",\"value\":\"true\"}],\"image\":\"docker.io/nephio/nephio-operator:latest\",\"livenessProbe\":{\"httpGet\":{\"path\":\"/healthz\",\"port\":8081},\"initialDelaySeconds\":15,\"periodSeconds\":20},\"name\":\"controller\",\"readinessProbe\":{\"httpGet\":{\"path\":\"/readyz\",\"port\":8081},\"initialDelaySeconds\":5,\"periodSeconds\":10},\"resources\":{\"limits\":{\"cpu\":\"500m\",\"memory\":\"128Mi\"},\"requests\":{\"cpu\":\"10m\",\"memory\":\"64Mi\"}},\"securityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]}}}],\"serviceAccountName\":\"nephio-controller\"}}},\"status\":{}}\n"
                },
                "creationTimestamp": "2025-10-01T12:34:10Z",
                "generation": 1,
                "managedFields": [
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:config.k8s.io/owning-inventory": {},
                                    "f:internal.kpt.dev/upstream-identifier": {},
                                    "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                }
                            },
                            "f:spec": {
                                "f:progressDeadlineSeconds": {},
                                "f:replicas": {},
                                "f:revisionHistoryLimit": {},
                                "f:selector": {},
                                "f:strategy": {
                                    "f:rollingUpdate": {
                                        ".": {},
                                        "f:maxSurge": {},
                                        "f:maxUnavailable": {}
                                    },
                                    "f:type": {}
                                },
                                "f:template": {
                                    "f:metadata": {
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/part-of": {},
                                            "f:app.kubernetes.io/version": {},
                                            "f:fn.kptgen.dev/controller": {}
                                        },
                                        "f:name": {},
                                        "f:namespace": {}
                                    },
                                    "f:spec": {
                                        "f:containers": {
                                            "k:{\"name\":\"controller\"}": {
                                                ".": {},
                                                "f:args": {},
                                                "f:command": {},
                                                "f:env": {
                                                    ".": {},
                                                    "k:{\"name\":\"ENABLE_TOKENS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:value": {}
                                                    },
                                                    "k:{\"name\":\"GIT_NAMESPACE\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:value": {}
                                                    },
                                                    "k:{\"name\":\"GIT_URL\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:value": {}
                                                    },
                                                    "k:{\"name\":\"NODE_IP\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"NODE_NAME\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"POD_IP\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"POD_NAME\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"POD_NAMESPACE\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    }
                                                },
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:livenessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:initialDelaySeconds": {},
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:name": {},
                                                "f:readinessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:initialDelaySeconds": {},
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:resources": {
                                                    ".": {},
                                                    "f:limits": {
                                                        ".": {},
                                                        "f:cpu": {},
                                                        "f:memory": {}
                                                    },
                                                    "f:requests": {
                                                        ".": {},
                                                        "f:cpu": {},
                                                        "f:memory": {}
                                                    }
                                                },
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:allowPrivilegeEscalation": {},
                                                    "f:capabilities": {
                                                        ".": {},
                                                        "f:drop": {}
                                                    }
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {}
                                            },
                                            "k:{\"name\":\"kube-rbac-proxy\"}": {
                                                ".": {},
                                                "f:args": {},
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:name": {},
                                                "f:ports": {
                                                    ".": {},
                                                    "k:{\"containerPort\":8443,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    }
                                                },
                                                "f:resources": {},
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {}
                                            }
                                        },
                                        "f:dnsPolicy": {},
                                        "f:restartPolicy": {},
                                        "f:schedulerName": {},
                                        "f:securityContext": {},
                                        "f:serviceAccount": {},
                                        "f:serviceAccountName": {},
                                        "f:terminationGracePeriodSeconds": {}
                                    }
                                }
                            }
                        },
                        "manager": "kubectl",
                        "operation": "Update",
                        "time": "2025-10-01T12:34:10Z"
                    },
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    "f:deployment.kubernetes.io/revision": {}
                                }
                            },
                            "f:status": {
                                "f:availableReplicas": {},
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"Available\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Progressing\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:observedGeneration": {},
                                "f:readyReplicas": {},
                                "f:replicas": {},
                                "f:updatedReplicas": {}
                            }
                        },
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "subresource": "status",
                        "time": "2025-10-01T12:34:25Z"
                    }
                ],
                "name": "token-controller",
                "namespace": "nephio-system",
                "resourceVersion": "4472",
                "uid": "84aa45bb-51ea-447e-8fee-55c6e724d24e"
            },
            "spec": {
                "progressDeadlineSeconds": 600,
                "replicas": 1,
                "revisionHistoryLimit": 10,
                "selector": {
                    "matchLabels": {
                        "fn.kptgen.dev/controller": "token-controller"
                    }
                },
                "strategy": {
                    "rollingUpdate": {
                        "maxSurge": "25%",
                        "maxUnavailable": "25%"
                    },
                    "type": "RollingUpdate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/component": "tbd",
                            "app.kubernetes.io/instance": "tbd",
                            "app.kubernetes.io/managed-by": "kpt",
                            "app.kubernetes.io/name": "nephio",
                            "app.kubernetes.io/part-of": "nephio",
                            "app.kubernetes.io/version": "tbd",
                            "fn.kptgen.dev/controller": "token-controller"
                        },
                        "name": "token-controller",
                        "namespace": "nephio-system"
                    },
                    "spec": {
                        "containers": [
                            {
                                "args": [
                                    "--secure-listen-address=0.0.0.0:8443",
                                    "--upstream=http://127.0.0.1:8080/",
                                    "--logtostderr=true",
                                    "--v=10"
                                ],
                                "image": "gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0",
                                "imagePullPolicy": "IfNotPresent",
                                "name": "kube-rbac-proxy",
                                "ports": [
                                    {
                                        "containerPort": 8443,
                                        "name": "https",
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {},
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File"
                            },
                            {
                                "args": [
                                    "--health-probe-bind-address=:8081",
                                    "--metrics-bind-address=127.0.0.1:8080",
                                    "--leader-elect"
                                ],
                                "command": [
                                    "/manager"
                                ],
                                "env": [
                                    {
                                        "name": "POD_NAMESPACE",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POD_IP",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "status.podIP"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POD_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.name"
                                            }
                                        }
                                    },
                                    {
                                        "name": "NODE_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "spec.nodeName"
                                            }
                                        }
                                    },
                                    {
                                        "name": "NODE_IP",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "status.hostIP"
                                            }
                                        }
                                    },
                                    {
                                        "name": "GIT_URL",
                                        "value": "http://172.18.0.200:3000"
                                    },
                                    {
                                        "name": "GIT_NAMESPACE",
                                        "value": "gitea"
                                    },
                                    {
                                        "name": "ENABLE_TOKENS",
                                        "value": "true"
                                    }
                                ],
                                "image": "docker.io/nephio/nephio-operator:latest",
                                "imagePullPolicy": "Always",
                                "livenessProbe": {
                                    "failureThreshold": 3,
                                    "httpGet": {
                                        "path": "/healthz",
                                        "port": 8081,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 15,
                                    "periodSeconds": 20,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 1
                                },
                                "name": "controller",
                                "readinessProbe": {
                                    "failureThreshold": 3,
                                    "httpGet": {
                                        "path": "/readyz",
                                        "port": 8081,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 1
                                },
                                "resources": {
                                    "limits": {
                                        "cpu": "500m",
                                        "memory": "128Mi"
                                    },
                                    "requests": {
                                        "cpu": "10m",
                                        "memory": "64Mi"
                                    }
                                },
                                "securityContext": {
                                    "allowPrivilegeEscalation": false,
                                    "capabilities": {
                                        "drop": [
                                            "ALL"
                                        ]
                                    }
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File"
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "restartPolicy": "Always",
                        "schedulerName": "default-scheduler",
                        "securityContext": {},
                        "serviceAccount": "nephio-controller",
                        "serviceAccountName": "nephio-controller",
                        "terminationGracePeriodSeconds": 30
                    }
                }
            },
            "status": {
                "availableReplicas": 1,
                "conditions": [
                    {
                        "lastTransitionTime": "2025-10-01T12:34:25Z",
                        "lastUpdateTime": "2025-10-01T12:34:25Z",
                        "message": "Deployment has minimum availability.",
                        "reason": "MinimumReplicasAvailable",
                        "status": "True",
                        "type": "Available"
                    },
                    {
                        "lastTransitionTime": "2025-10-01T12:34:10Z",
                        "lastUpdateTime": "2025-10-01T12:34:25Z",
                        "message": "ReplicaSet \"token-controller-7bfc64dc8f\" has successfully progressed.",
                        "reason": "NewReplicaSetAvailable",
                        "status": "True",
                        "type": "Progressing"
                    }
                ],
                "observedGeneration": 1,
                "readyReplicas": 1,
                "replicas": 1,
                "updatedReplicas": 1
            }
        }
    ]
}

TASK [install : Wait for deployments in namespace nephio-system] ***************
Wednesday 01 October 2025  12:36:20 +0000 (0:00:00.118)       0:06:52.386 ***** 
Wednesday 01 October 2025  12:36:20 +0000 (0:00:00.118)       0:06:52.386 ***** 
ok: [127.0.0.1] => (item={'metadata': {'name': 'nephio-controller', 'namespace': 'nephio-system', 'uid': '7574be2b-0039-4c2f-95b5-ad393397d071', 'resourceVersion': '4463', 'generation': 1, 'creationTimestamp': '2025-10-01T12:34:09Z', 'annotations': {'config.k8s.io/owning-inventory': 'e61fb535e7d27939029d56b9de709d1d534817a2-1759322047123458822', 'deployment.kubernetes.io/revision': '1', 'internal.kpt.dev/upstream-identifier': 'apps|Deployment|nephio-system|nephio-controller', 'kubectl.kubernetes.io/last-applied-configuration': '{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"config.k8s.io/owning-inventory":"e61fb535e7d27939029d56b9de709d1d534817a2-1759322047123458822","internal.kpt.dev/upstream-identifier":"apps|Deployment|nephio-system|nephio-controller"},"name":"nephio-controller","namespace":"nephio-system"},"spec":{"replicas":1,"selector":{"matchLabels":{"fn.kptgen.dev/controller":"nephio-controller"}},"strategy":{},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"tbd","app.kubernetes.io/instance":"tbd","app.kubernetes.io/managed-by":"kpt","app.kubernetes.io/name":"nephio","app.kubernetes.io/part-of":"nephio","app.kubernetes.io/version":"tbd","fn.kptgen.dev/controller":"nephio-controller"},"name":"nephio-controller","namespace":"nephio-system"},"spec":{"containers":[{"args":["--secure-listen-address=0.0.0.0:8443","--upstream=http://127.0.0.1:8080/","--logtostderr=true","--v=10"],"image":"gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0","name":"kube-rbac-proxy","ports":[{"containerPort":8443,"name":"https"}],"resources":{}},{"args":["--health-probe-bind-address=:8081","--metrics-bind-address=127.0.0.1:8080","--leader-elect"],"command":["/manager"],"env":[{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}},{"name":"POD_IP","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"status.podIP"}}},{"name":"POD_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.name"}}},{"name":"NODE_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"spec.nodeName"}}},{"name":"NODE_IP","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"status.hostIP"}}},{"name":"GIT_URL","value":"http://172.18.0.200:3000"},{"name":"GIT_NAMESPACE","value":"gitea"},{"name":"ENABLE_APPROVAL","value":"true"},{"name":"ENABLE_REPOSITORIES","value":"true"},{"name":"ENABLE_BOOTSTRAPSECRETS","value":"true"},{"name":"ENABLE_BOOTSTRAPPACKAGES","value":"true"},{"name":"ENABLE_GENERICSPECIALIZER","value":"true"},{"name":"ENABLE_NETWORKS","value":"true"},{"name":"CLIENT_PROXY_ADDRESS","value":"resource-backend-controller-grpc-svc.backend-system.svc.cluster.local:9999"}],"image":"docker.io/nephio/nephio-operator:latest","livenessProbe":{"httpGet":{"path":"/healthz","port":8081},"initialDelaySeconds":15,"periodSeconds":20},"name":"controller","readinessProbe":{"httpGet":{"path":"/readyz","port":8081},"initialDelaySeconds":5,"periodSeconds":10},"resources":{"limits":{"cpu":"500m","memory":"128Mi"},"requests":{"cpu":"10m","memory":"64Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]}}}],"serviceAccountName":"nephio-controller"}}},"status":{}}\n'}, 'managedFields': [{'manager': 'kubectl', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:34:09Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'.': {}, 'f:config.k8s.io/owning-inventory': {}, 'f:internal.kpt.dev/upstream-identifier': {}, 'f:kubectl.kubernetes.io/last-applied-configuration': {}}}, 'f:spec': {'f:progressDeadlineSeconds': {}, 'f:replicas': {}, 'f:revisionHistoryLimit': {}, 'f:selector': {}, 'f:strategy': {'f:rollingUpdate': {'.': {}, 'f:maxSurge': {}, 'f:maxUnavailable': {}}, 'f:type': {}}, 'f:template': {'f:metadata': {'f:labels': {'.': {}, 'f:app.kubernetes.io/component': {}, 'f:app.kubernetes.io/instance': {}, 'f:app.kubernetes.io/managed-by': {}, 'f:app.kubernetes.io/name': {}, 'f:app.kubernetes.io/part-of': {}, 'f:app.kubernetes.io/version': {}, 'f:fn.kptgen.dev/controller': {}}, 'f:name': {}, 'f:namespace': {}}, 'f:spec': {'f:containers': {'k:{"name":"controller"}': {'.': {}, 'f:args': {}, 'f:command': {}, 'f:env': {'.': {}, 'k:{"name":"CLIENT_PROXY_ADDRESS"}': {'.': {}, 'f:name': {}, 'f:value': {}}, 'k:{"name":"ENABLE_APPROVAL"}': {'.': {}, 'f:name': {}, 'f:value': {}}, 'k:{"name":"ENABLE_BOOTSTRAPPACKAGES"}': {'.': {}, 'f:name': {}, 'f:value': {}}, 'k:{"name":"ENABLE_BOOTSTRAPSECRETS"}': {'.': {}, 'f:name': {}, 'f:value': {}}, 'k:{"name":"ENABLE_GENERICSPECIALIZER"}': {'.': {}, 'f:name': {}, 'f:value': {}}, 'k:{"name":"ENABLE_NETWORKS"}': {'.': {}, 'f:name': {}, 'f:value': {}}, 'k:{"name":"ENABLE_REPOSITORIES"}': {'.': {}, 'f:name': {}, 'f:value': {}}, 'k:{"name":"GIT_NAMESPACE"}': {'.': {}, 'f:name': {}, 'f:value': {}}, 'k:{"name":"GIT_URL"}': {'.': {}, 'f:name': {}, 'f:value': {}}, 'k:{"name":"NODE_IP"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}, 'k:{"name":"NODE_NAME"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}, 'k:{"name":"POD_IP"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}, 'k:{"name":"POD_NAME"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}, 'k:{"name":"POD_NAMESPACE"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}}, 'f:image': {}, 'f:imagePullPolicy': {}, 'f:livenessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:httpGet': {'.': {}, 'f:path': {}, 'f:port': {}, 'f:scheme': {}}, 'f:initialDelaySeconds': {}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:timeoutSeconds': {}}, 'f:name': {}, 'f:readinessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:httpGet': {'.': {}, 'f:path': {}, 'f:port': {}, 'f:scheme': {}}, 'f:initialDelaySeconds': {}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:timeoutSeconds': {}}, 'f:resources': {'.': {}, 'f:limits': {'.': {}, 'f:cpu': {}, 'f:memory': {}}, 'f:requests': {'.': {}, 'f:cpu': {}, 'f:memory': {}}}, 'f:securityContext': {'.': {}, 'f:allowPrivilegeEscalation': {}, 'f:capabilities': {'.': {}, 'f:drop': {}}}, 'f:terminationMessagePath': {}, 'f:terminationMessagePolicy': {}}, 'k:{"name":"kube-rbac-proxy"}': {'.': {}, 'f:args': {}, 'f:image': {}, 'f:imagePullPolicy': {}, 'f:name': {}, 'f:ports': {'.': {}, 'k:{"containerPort":8443,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:name': {}, 'f:protocol': {}}}, 'f:resources': {}, 'f:terminationMessagePath': {}, 'f:terminationMessagePolicy': {}}}, 'f:dnsPolicy': {}, 'f:restartPolicy': {}, 'f:schedulerName': {}, 'f:securityContext': {}, 'f:serviceAccount': {}, 'f:serviceAccountName': {}, 'f:terminationGracePeriodSeconds': {}}}}}}, {'manager': 'kube-controller-manager', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:34:24Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'f:deployment.kubernetes.io/revision': {}}}, 'f:status': {'f:availableReplicas': {}, 'f:conditions': {'.': {}, 'k:{"type":"Available"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}, 'k:{"type":"Progressing"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}}, 'f:observedGeneration': {}, 'f:readyReplicas': {}, 'f:replicas': {}, 'f:updatedReplicas': {}}}, 'subresource': 'status'}]}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'fn.kptgen.dev/controller': 'nephio-controller'}}, 'template': {'metadata': {'name': 'nephio-controller', 'namespace': 'nephio-system', 'labels': {'app.kubernetes.io/component': 'tbd', 'app.kubernetes.io/instance': 'tbd', 'app.kubernetes.io/managed-by': 'kpt', 'app.kubernetes.io/name': 'nephio', 'app.kubernetes.io/part-of': 'nephio', 'app.kubernetes.io/version': 'tbd', 'fn.kptgen.dev/controller': 'nephio-controller'}}, 'spec': {'containers': [{'name': 'kube-rbac-proxy', 'image': 'gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0', 'args': ['--secure-listen-address=0.0.0.0:8443', '--upstream=http://127.0.0.1:8080/', '--logtostderr=true', '--v=10'], 'ports': [{'name': 'https', 'containerPort': 8443, 'protocol': 'TCP'}], 'resources': {}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'IfNotPresent'}, {'name': 'controller', 'image': 'docker.io/nephio/nephio-operator:latest', 'command': ['/manager'], 'args': ['--health-probe-bind-address=:8081', '--metrics-bind-address=127.0.0.1:8080', '--leader-elect'], 'env': [{'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'status.podIP'}}}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'metadata.name'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'spec.nodeName'}}}, {'name': 'NODE_IP', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'status.hostIP'}}}, {'name': 'GIT_URL', 'value': 'http://172.18.0.200:3000'}, {'name': 'GIT_NAMESPACE', 'value': 'gitea'}, {'name': 'ENABLE_APPROVAL', 'value': 'true'}, {'name': 'ENABLE_REPOSITORIES', 'value': 'true'}, {'name': 'ENABLE_BOOTSTRAPSECRETS', 'value': 'true'}, {'name': 'ENABLE_BOOTSTRAPPACKAGES', 'value': 'true'}, {'name': 'ENABLE_GENERICSPECIALIZER', 'value': 'true'}, {'name': 'ENABLE_NETWORKS', 'value': 'true'}, {'name': 'CLIENT_PROXY_ADDRESS', 'value': 'resource-backend-controller-grpc-svc.backend-system.svc.cluster.local:9999'}], 'resources': {'limits': {'cpu': '500m', 'memory': '128Mi'}, 'requests': {'cpu': '10m', 'memory': '64Mi'}}, 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 8081, 'scheme': 'HTTP'}, 'initialDelaySeconds': 15, 'timeoutSeconds': 1, 'periodSeconds': 20, 'successThreshold': 1, 'failureThreshold': 3}, 'readinessProbe': {'httpGet': {'path': '/readyz', 'port': 8081, 'scheme': 'HTTP'}, 'initialDelaySeconds': 5, 'timeoutSeconds': 1, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 3}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'Always', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'allowPrivilegeEscalation': False}}], 'restartPolicy': 'Always', 'terminationGracePeriodSeconds': 30, 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'nephio-controller', 'serviceAccount': 'nephio-controller', 'securityContext': {}, 'schedulerName': 'default-scheduler'}}, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxUnavailable': '25%', 'maxSurge': '25%'}}, 'revisionHistoryLimit': 10, 'progressDeadlineSeconds': 600}, 'status': {'observedGeneration': 1, 'replicas': 1, 'updatedReplicas': 1, 'readyReplicas': 1, 'availableReplicas': 1, 'conditions': [{'type': 'Available', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:34:24Z', 'lastTransitionTime': '2025-10-01T12:34:24Z', 'reason': 'MinimumReplicasAvailable', 'message': 'Deployment has minimum availability.'}, {'type': 'Progressing', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:34:24Z', 'lastTransitionTime': '2025-10-01T12:34:10Z', 'reason': 'NewReplicaSetAvailable', 'message': 'ReplicaSet "nephio-controller-6db4698fff" has successfully progressed.'}]}, 'apiVersion': 'apps/v1', 'kind': 'Deployment'})
ok: [127.0.0.1] => (item={'metadata': {'name': 'token-controller', 'namespace': 'nephio-system', 'uid': '84aa45bb-51ea-447e-8fee-55c6e724d24e', 'resourceVersion': '4472', 'generation': 1, 'creationTimestamp': '2025-10-01T12:34:10Z', 'annotations': {'config.k8s.io/owning-inventory': 'e61fb535e7d27939029d56b9de709d1d534817a2-1759322047123458822', 'deployment.kubernetes.io/revision': '1', 'internal.kpt.dev/upstream-identifier': 'apps|Deployment|nephio-system|token-controller', 'kubectl.kubernetes.io/last-applied-configuration': '{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"config.k8s.io/owning-inventory":"e61fb535e7d27939029d56b9de709d1d534817a2-1759322047123458822","internal.kpt.dev/upstream-identifier":"apps|Deployment|nephio-system|token-controller"},"name":"token-controller","namespace":"nephio-system"},"spec":{"replicas":1,"selector":{"matchLabels":{"fn.kptgen.dev/controller":"token-controller"}},"strategy":{},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"tbd","app.kubernetes.io/instance":"tbd","app.kubernetes.io/managed-by":"kpt","app.kubernetes.io/name":"nephio","app.kubernetes.io/part-of":"nephio","app.kubernetes.io/version":"tbd","fn.kptgen.dev/controller":"token-controller"},"name":"token-controller","namespace":"nephio-system"},"spec":{"containers":[{"args":["--secure-listen-address=0.0.0.0:8443","--upstream=http://127.0.0.1:8080/","--logtostderr=true","--v=10"],"image":"gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0","name":"kube-rbac-proxy","ports":[{"containerPort":8443,"name":"https"}],"resources":{}},{"args":["--health-probe-bind-address=:8081","--metrics-bind-address=127.0.0.1:8080","--leader-elect"],"command":["/manager"],"env":[{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}},{"name":"POD_IP","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"status.podIP"}}},{"name":"POD_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.name"}}},{"name":"NODE_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"spec.nodeName"}}},{"name":"NODE_IP","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"status.hostIP"}}},{"name":"GIT_URL","value":"http://172.18.0.200:3000"},{"name":"GIT_NAMESPACE","value":"gitea"},{"name":"ENABLE_TOKENS","value":"true"}],"image":"docker.io/nephio/nephio-operator:latest","livenessProbe":{"httpGet":{"path":"/healthz","port":8081},"initialDelaySeconds":15,"periodSeconds":20},"name":"controller","readinessProbe":{"httpGet":{"path":"/readyz","port":8081},"initialDelaySeconds":5,"periodSeconds":10},"resources":{"limits":{"cpu":"500m","memory":"128Mi"},"requests":{"cpu":"10m","memory":"64Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]}}}],"serviceAccountName":"nephio-controller"}}},"status":{}}\n'}, 'managedFields': [{'manager': 'kubectl', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:34:10Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'.': {}, 'f:config.k8s.io/owning-inventory': {}, 'f:internal.kpt.dev/upstream-identifier': {}, 'f:kubectl.kubernetes.io/last-applied-configuration': {}}}, 'f:spec': {'f:progressDeadlineSeconds': {}, 'f:replicas': {}, 'f:revisionHistoryLimit': {}, 'f:selector': {}, 'f:strategy': {'f:rollingUpdate': {'.': {}, 'f:maxSurge': {}, 'f:maxUnavailable': {}}, 'f:type': {}}, 'f:template': {'f:metadata': {'f:labels': {'.': {}, 'f:app.kubernetes.io/component': {}, 'f:app.kubernetes.io/instance': {}, 'f:app.kubernetes.io/managed-by': {}, 'f:app.kubernetes.io/name': {}, 'f:app.kubernetes.io/part-of': {}, 'f:app.kubernetes.io/version': {}, 'f:fn.kptgen.dev/controller': {}}, 'f:name': {}, 'f:namespace': {}}, 'f:spec': {'f:containers': {'k:{"name":"controller"}': {'.': {}, 'f:args': {}, 'f:command': {}, 'f:env': {'.': {}, 'k:{"name":"ENABLE_TOKENS"}': {'.': {}, 'f:name': {}, 'f:value': {}}, 'k:{"name":"GIT_NAMESPACE"}': {'.': {}, 'f:name': {}, 'f:value': {}}, 'k:{"name":"GIT_URL"}': {'.': {}, 'f:name': {}, 'f:value': {}}, 'k:{"name":"NODE_IP"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}, 'k:{"name":"NODE_NAME"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}, 'k:{"name":"POD_IP"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}, 'k:{"name":"POD_NAME"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}, 'k:{"name":"POD_NAMESPACE"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}}, 'f:image': {}, 'f:imagePullPolicy': {}, 'f:livenessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:httpGet': {'.': {}, 'f:path': {}, 'f:port': {}, 'f:scheme': {}}, 'f:initialDelaySeconds': {}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:timeoutSeconds': {}}, 'f:name': {}, 'f:readinessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:httpGet': {'.': {}, 'f:path': {}, 'f:port': {}, 'f:scheme': {}}, 'f:initialDelaySeconds': {}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:timeoutSeconds': {}}, 'f:resources': {'.': {}, 'f:limits': {'.': {}, 'f:cpu': {}, 'f:memory': {}}, 'f:requests': {'.': {}, 'f:cpu': {}, 'f:memory': {}}}, 'f:securityContext': {'.': {}, 'f:allowPrivilegeEscalation': {}, 'f:capabilities': {'.': {}, 'f:drop': {}}}, 'f:terminationMessagePath': {}, 'f:terminationMessagePolicy': {}}, 'k:{"name":"kube-rbac-proxy"}': {'.': {}, 'f:args': {}, 'f:image': {}, 'f:imagePullPolicy': {}, 'f:name': {}, 'f:ports': {'.': {}, 'k:{"containerPort":8443,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:name': {}, 'f:protocol': {}}}, 'f:resources': {}, 'f:terminationMessagePath': {}, 'f:terminationMessagePolicy': {}}}, 'f:dnsPolicy': {}, 'f:restartPolicy': {}, 'f:schedulerName': {}, 'f:securityContext': {}, 'f:serviceAccount': {}, 'f:serviceAccountName': {}, 'f:terminationGracePeriodSeconds': {}}}}}}, {'manager': 'kube-controller-manager', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:34:25Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'f:deployment.kubernetes.io/revision': {}}}, 'f:status': {'f:availableReplicas': {}, 'f:conditions': {'.': {}, 'k:{"type":"Available"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}, 'k:{"type":"Progressing"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}}, 'f:observedGeneration': {}, 'f:readyReplicas': {}, 'f:replicas': {}, 'f:updatedReplicas': {}}}, 'subresource': 'status'}]}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'fn.kptgen.dev/controller': 'token-controller'}}, 'template': {'metadata': {'name': 'token-controller', 'namespace': 'nephio-system', 'labels': {'app.kubernetes.io/component': 'tbd', 'app.kubernetes.io/instance': 'tbd', 'app.kubernetes.io/managed-by': 'kpt', 'app.kubernetes.io/name': 'nephio', 'app.kubernetes.io/part-of': 'nephio', 'app.kubernetes.io/version': 'tbd', 'fn.kptgen.dev/controller': 'token-controller'}}, 'spec': {'containers': [{'name': 'kube-rbac-proxy', 'image': 'gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0', 'args': ['--secure-listen-address=0.0.0.0:8443', '--upstream=http://127.0.0.1:8080/', '--logtostderr=true', '--v=10'], 'ports': [{'name': 'https', 'containerPort': 8443, 'protocol': 'TCP'}], 'resources': {}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'IfNotPresent'}, {'name': 'controller', 'image': 'docker.io/nephio/nephio-operator:latest', 'command': ['/manager'], 'args': ['--health-probe-bind-address=:8081', '--metrics-bind-address=127.0.0.1:8080', '--leader-elect'], 'env': [{'name': 'POD_NAMESPACE', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'metadata.namespace'}}}, {'name': 'POD_IP', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'status.podIP'}}}, {'name': 'POD_NAME', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'metadata.name'}}}, {'name': 'NODE_NAME', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'spec.nodeName'}}}, {'name': 'NODE_IP', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'status.hostIP'}}}, {'name': 'GIT_URL', 'value': 'http://172.18.0.200:3000'}, {'name': 'GIT_NAMESPACE', 'value': 'gitea'}, {'name': 'ENABLE_TOKENS', 'value': 'true'}], 'resources': {'limits': {'cpu': '500m', 'memory': '128Mi'}, 'requests': {'cpu': '10m', 'memory': '64Mi'}}, 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 8081, 'scheme': 'HTTP'}, 'initialDelaySeconds': 15, 'timeoutSeconds': 1, 'periodSeconds': 20, 'successThreshold': 1, 'failureThreshold': 3}, 'readinessProbe': {'httpGet': {'path': '/readyz', 'port': 8081, 'scheme': 'HTTP'}, 'initialDelaySeconds': 5, 'timeoutSeconds': 1, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 3}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'Always', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'allowPrivilegeEscalation': False}}], 'restartPolicy': 'Always', 'terminationGracePeriodSeconds': 30, 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'nephio-controller', 'serviceAccount': 'nephio-controller', 'securityContext': {}, 'schedulerName': 'default-scheduler'}}, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxUnavailable': '25%', 'maxSurge': '25%'}}, 'revisionHistoryLimit': 10, 'progressDeadlineSeconds': 600}, 'status': {'observedGeneration': 1, 'replicas': 1, 'updatedReplicas': 1, 'readyReplicas': 1, 'availableReplicas': 1, 'conditions': [{'type': 'Available', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:34:25Z', 'lastTransitionTime': '2025-10-01T12:34:25Z', 'reason': 'MinimumReplicasAvailable', 'message': 'Deployment has minimum availability.'}, {'type': 'Progressing', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:34:25Z', 'lastTransitionTime': '2025-10-01T12:34:10Z', 'reason': 'NewReplicaSetAvailable', 'message': 'ReplicaSet "token-controller-7bfc64dc8f" has successfully progressed.'}]}, 'apiVersion': 'apps/v1', 'kind': 'Deployment'})

TASK [install : Get deployment resources in namespace config-management-monitoring] ***
Wednesday 01 October 2025  12:36:22 +0000 (0:00:02.040)       0:06:54.427 ***** 
Wednesday 01 October 2025  12:36:22 +0000 (0:00:02.040)       0:06:54.426 ***** 
ok: [127.0.0.1]

TASK [install : Print deployment resources in namespace config-management-monitoring] ***
Wednesday 01 October 2025  12:36:23 +0000 (0:00:01.166)       0:06:55.593 ***** 
Wednesday 01 October 2025  12:36:23 +0000 (0:00:01.166)       0:06:55.593 ***** 
ok: [127.0.0.1] => {
    "deployment_list.resources": [
        {
            "apiVersion": "apps/v1",
            "kind": "Deployment",
            "metadata": {
                "annotations": {
                    "deployment.kubernetes.io/revision": "2",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"opentelemetry\",\"component\":\"otel-collector\",\"configmanagement.gke.io/arch\":\"csmr\",\"configmanagement.gke.io/configmanagement\":\"config-management\",\"configmanagement.gke.io/system\":\"true\",\"k8s-app\":\"kubernetes-config-management\"},\"name\":\"otel-collector\",\"namespace\":\"config-management-monitoring\",\"ownerReferences\":[{\"apiVersion\":\"configmanagement.gke.io/v1\",\"blockOwnerDeletion\":true,\"controller\":true,\"kind\":\"ConfigManagement\",\"name\":\"config-management\",\"uid\":\"3ba193e5-a89c-430d-9bdc-3f8d07e7443b\"}]},\"spec\":{\"minReadySeconds\":5,\"progressDeadlineSeconds\":120,\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"opentelemetry\",\"component\":\"otel-collector\"}},\"template\":{\"metadata\":{\"labels\":{\"app\":\"opentelemetry\",\"component\":\"otel-collector\"}},\"spec\":{\"containers\":[{\"args\":[\"--config=/conf/otel-collector-config.yaml\",\"--feature-gates=-pkg.translator.prometheus.NormalizeName\"],\"command\":[\"/otelcontribcol\"],\"image\":\"gcr.io/config-management-release/otelcontribcol:v0.102.0-gke.6\",\"name\":\"otel-collector\",\"ports\":[{\"containerPort\":55678},{\"containerPort\":8888},{\"containerPort\":8675}],\"readinessProbe\":{\"httpGet\":{\"path\":\"/\",\"port\":13133}},\"resources\":{\"limits\":{\"cpu\":1,\"memory\":\"2Gi\"},\"requests\":{\"cpu\":\"200m\",\"memory\":\"400Mi\"}},\"securityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"readOnlyRootFilesystem\":true},\"volumeMounts\":[{\"mountPath\":\"/conf\",\"name\":\"otel-collector-config-vol\"}]}],\"securityContext\":{\"fsGroup\":2000,\"runAsGroup\":1000,\"runAsNonRoot\":true,\"runAsUser\":1000,\"seccompProfile\":{\"type\":\"RuntimeDefault\"}},\"volumes\":[{\"name\":\"otel-collector-config-vol\",\"projected\":{\"sources\":[{\"configMap\":{\"name\":\"otel-collector\"}},{\"configMap\":{\"name\":\"otel-collector-googlecloud\",\"optional\":true}},{\"configMap\":{\"name\":\"otel-collector-custom\",\"optional\":true}}]}}]}}}}\n"
                },
                "creationTimestamp": "2025-10-01T12:34:43Z",
                "generation": 2,
                "labels": {
                    "app": "opentelemetry",
                    "component": "otel-collector",
                    "configmanagement.gke.io/arch": "csmr",
                    "configmanagement.gke.io/configmanagement": "config-management",
                    "configmanagement.gke.io/system": "true",
                    "k8s-app": "kubernetes-config-management"
                },
                "managedFields": [
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:app": {},
                                    "f:component": {},
                                    "f:configmanagement.gke.io/arch": {},
                                    "f:configmanagement.gke.io/configmanagement": {},
                                    "f:configmanagement.gke.io/system": {},
                                    "f:k8s-app": {}
                                },
                                "f:ownerReferences": {
                                    ".": {},
                                    "k:{\"uid\":\"3ba193e5-a89c-430d-9bdc-3f8d07e7443b\"}": {}
                                }
                            },
                            "f:spec": {
                                "f:minReadySeconds": {},
                                "f:progressDeadlineSeconds": {},
                                "f:replicas": {},
                                "f:revisionHistoryLimit": {},
                                "f:selector": {},
                                "f:strategy": {
                                    "f:rollingUpdate": {
                                        ".": {},
                                        "f:maxSurge": {},
                                        "f:maxUnavailable": {}
                                    },
                                    "f:type": {}
                                },
                                "f:template": {
                                    "f:metadata": {
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:component": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:containers": {
                                            "k:{\"name\":\"otel-collector\"}": {
                                                ".": {},
                                                "f:args": {},
                                                "f:command": {},
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:name": {},
                                                "f:ports": {
                                                    ".": {},
                                                    "k:{\"containerPort\":55678,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:protocol": {}
                                                    },
                                                    "k:{\"containerPort\":8675,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:protocol": {}
                                                    },
                                                    "k:{\"containerPort\":8888,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:protocol": {}
                                                    }
                                                },
                                                "f:readinessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:resources": {
                                                    ".": {},
                                                    "f:limits": {
                                                        ".": {},
                                                        "f:cpu": {},
                                                        "f:memory": {}
                                                    },
                                                    "f:requests": {
                                                        ".": {},
                                                        "f:cpu": {},
                                                        "f:memory": {}
                                                    }
                                                },
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:allowPrivilegeEscalation": {},
                                                    "f:capabilities": {
                                                        ".": {},
                                                        "f:drop": {}
                                                    },
                                                    "f:readOnlyRootFilesystem": {}
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {},
                                                "f:volumeMounts": {
                                                    ".": {},
                                                    "k:{\"mountPath\":\"/conf\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    }
                                                }
                                            }
                                        },
                                        "f:dnsPolicy": {},
                                        "f:restartPolicy": {},
                                        "f:schedulerName": {},
                                        "f:securityContext": {
                                            ".": {},
                                            "f:fsGroup": {},
                                            "f:runAsGroup": {},
                                            "f:runAsNonRoot": {},
                                            "f:runAsUser": {},
                                            "f:seccompProfile": {
                                                ".": {},
                                                "f:type": {}
                                            }
                                        },
                                        "f:terminationGracePeriodSeconds": {},
                                        "f:volumes": {
                                            ".": {},
                                            "k:{\"name\":\"otel-collector-config-vol\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:projected": {
                                                    ".": {},
                                                    "f:defaultMode": {},
                                                    "f:sources": {}
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "manager": "kubectl-client-side-apply",
                        "operation": "Update",
                        "time": "2025-10-01T12:34:43Z"
                    },
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:spec": {
                                "f:template": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:iam.gke.io/gcp-service-account": {}
                                        }
                                    }
                                }
                            }
                        },
                        "manager": "reconciler-manager",
                        "operation": "Update",
                        "time": "2025-10-01T12:34:53Z"
                    },
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    "f:deployment.kubernetes.io/revision": {}
                                }
                            },
                            "f:status": {
                                "f:availableReplicas": {},
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"Available\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Progressing\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:observedGeneration": {},
                                "f:readyReplicas": {},
                                "f:replicas": {},
                                "f:updatedReplicas": {}
                            }
                        },
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "subresource": "status",
                        "time": "2025-10-01T12:35:09Z"
                    }
                ],
                "name": "otel-collector",
                "namespace": "config-management-monitoring",
                "ownerReferences": [
                    {
                        "apiVersion": "configmanagement.gke.io/v1",
                        "blockOwnerDeletion": true,
                        "controller": true,
                        "kind": "ConfigManagement",
                        "name": "config-management",
                        "uid": "3ba193e5-a89c-430d-9bdc-3f8d07e7443b"
                    }
                ],
                "resourceVersion": "5093",
                "uid": "4628c947-80d0-434f-b229-f6bf146f2207"
            },
            "spec": {
                "minReadySeconds": 5,
                "progressDeadlineSeconds": 120,
                "replicas": 1,
                "revisionHistoryLimit": 10,
                "selector": {
                    "matchLabels": {
                        "app": "opentelemetry",
                        "component": "otel-collector"
                    }
                },
                "strategy": {
                    "rollingUpdate": {
                        "maxSurge": "25%",
                        "maxUnavailable": "25%"
                    },
                    "type": "RollingUpdate"
                },
                "template": {
                    "metadata": {
                        "annotations": {
                            "iam.gke.io/gcp-service-account": ""
                        },
                        "labels": {
                            "app": "opentelemetry",
                            "component": "otel-collector"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "args": [
                                    "--config=/conf/otel-collector-config.yaml",
                                    "--feature-gates=-pkg.translator.prometheus.NormalizeName"
                                ],
                                "command": [
                                    "/otelcontribcol"
                                ],
                                "image": "gcr.io/config-management-release/otelcontribcol:v0.102.0-gke.6",
                                "imagePullPolicy": "IfNotPresent",
                                "name": "otel-collector",
                                "ports": [
                                    {
                                        "containerPort": 55678,
                                        "protocol": "TCP"
                                    },
                                    {
                                        "containerPort": 8888,
                                        "protocol": "TCP"
                                    },
                                    {
                                        "containerPort": 8675,
                                        "protocol": "TCP"
                                    }
                                ],
                                "readinessProbe": {
                                    "failureThreshold": 3,
                                    "httpGet": {
                                        "path": "/",
                                        "port": 13133,
                                        "scheme": "HTTP"
                                    },
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 1
                                },
                                "resources": {
                                    "limits": {
                                        "cpu": "1",
                                        "memory": "2Gi"
                                    },
                                    "requests": {
                                        "cpu": "200m",
                                        "memory": "400Mi"
                                    }
                                },
                                "securityContext": {
                                    "allowPrivilegeEscalation": false,
                                    "capabilities": {
                                        "drop": [
                                            "ALL"
                                        ]
                                    },
                                    "readOnlyRootFilesystem": true
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/conf",
                                        "name": "otel-collector-config-vol"
                                    }
                                ]
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "restartPolicy": "Always",
                        "schedulerName": "default-scheduler",
                        "securityContext": {
                            "fsGroup": 2000,
                            "runAsGroup": 1000,
                            "runAsNonRoot": true,
                            "runAsUser": 1000,
                            "seccompProfile": {
                                "type": "RuntimeDefault"
                            }
                        },
                        "terminationGracePeriodSeconds": 30,
                        "volumes": [
                            {
                                "name": "otel-collector-config-vol",
                                "projected": {
                                    "defaultMode": 420,
                                    "sources": [
                                        {
                                            "configMap": {
                                                "name": "otel-collector"
                                            }
                                        },
                                        {
                                            "configMap": {
                                                "name": "otel-collector-googlecloud",
                                                "optional": true
                                            }
                                        },
                                        {
                                            "configMap": {
                                                "name": "otel-collector-custom",
                                                "optional": true
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    }
                }
            },
            "status": {
                "availableReplicas": 1,
                "conditions": [
                    {
                        "lastTransitionTime": "2025-10-01T12:34:55Z",
                        "lastUpdateTime": "2025-10-01T12:34:55Z",
                        "message": "Deployment has minimum availability.",
                        "reason": "MinimumReplicasAvailable",
                        "status": "True",
                        "type": "Available"
                    },
                    {
                        "lastTransitionTime": "2025-10-01T12:34:43Z",
                        "lastUpdateTime": "2025-10-01T12:35:09Z",
                        "message": "ReplicaSet \"otel-collector-666d5c596f\" has successfully progressed.",
                        "reason": "NewReplicaSetAvailable",
                        "status": "True",
                        "type": "Progressing"
                    }
                ],
                "observedGeneration": 2,
                "readyReplicas": 1,
                "replicas": 1,
                "updatedReplicas": 1
            }
        }
    ]
}

TASK [install : Wait for deployments in namespace config-management-monitoring] ***
Wednesday 01 October 2025  12:36:23 +0000 (0:00:00.097)       0:06:55.691 ***** 
Wednesday 01 October 2025  12:36:23 +0000 (0:00:00.097)       0:06:55.690 ***** 
ok: [127.0.0.1] => (item={'metadata': {'name': 'otel-collector', 'namespace': 'config-management-monitoring', 'uid': '4628c947-80d0-434f-b229-f6bf146f2207', 'resourceVersion': '5093', 'generation': 2, 'creationTimestamp': '2025-10-01T12:34:43Z', 'labels': {'app': 'opentelemetry', 'component': 'otel-collector', 'configmanagement.gke.io/arch': 'csmr', 'configmanagement.gke.io/configmanagement': 'config-management', 'configmanagement.gke.io/system': 'true', 'k8s-app': 'kubernetes-config-management'}, 'annotations': {'deployment.kubernetes.io/revision': '2', 'kubectl.kubernetes.io/last-applied-configuration': '{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"opentelemetry","component":"otel-collector","configmanagement.gke.io/arch":"csmr","configmanagement.gke.io/configmanagement":"config-management","configmanagement.gke.io/system":"true","k8s-app":"kubernetes-config-management"},"name":"otel-collector","namespace":"config-management-monitoring","ownerReferences":[{"apiVersion":"configmanagement.gke.io/v1","blockOwnerDeletion":true,"controller":true,"kind":"ConfigManagement","name":"config-management","uid":"3ba193e5-a89c-430d-9bdc-3f8d07e7443b"}]},"spec":{"minReadySeconds":5,"progressDeadlineSeconds":120,"replicas":1,"selector":{"matchLabels":{"app":"opentelemetry","component":"otel-collector"}},"template":{"metadata":{"labels":{"app":"opentelemetry","component":"otel-collector"}},"spec":{"containers":[{"args":["--config=/conf/otel-collector-config.yaml","--feature-gates=-pkg.translator.prometheus.NormalizeName"],"command":["/otelcontribcol"],"image":"gcr.io/config-management-release/otelcontribcol:v0.102.0-gke.6","name":"otel-collector","ports":[{"containerPort":55678},{"containerPort":8888},{"containerPort":8675}],"readinessProbe":{"httpGet":{"path":"/","port":13133}},"resources":{"limits":{"cpu":1,"memory":"2Gi"},"requests":{"cpu":"200m","memory":"400Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true},"volumeMounts":[{"mountPath":"/conf","name":"otel-collector-config-vol"}]}],"securityContext":{"fsGroup":2000,"runAsGroup":1000,"runAsNonRoot":true,"runAsUser":1000,"seccompProfile":{"type":"RuntimeDefault"}},"volumes":[{"name":"otel-collector-config-vol","projected":{"sources":[{"configMap":{"name":"otel-collector"}},{"configMap":{"name":"otel-collector-googlecloud","optional":true}},{"configMap":{"name":"otel-collector-custom","optional":true}}]}}]}}}}\n'}, 'ownerReferences': [{'apiVersion': 'configmanagement.gke.io/v1', 'kind': 'ConfigManagement', 'name': 'config-management', 'uid': '3ba193e5-a89c-430d-9bdc-3f8d07e7443b', 'controller': True, 'blockOwnerDeletion': True}], 'managedFields': [{'manager': 'kubectl-client-side-apply', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:34:43Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'.': {}, 'f:kubectl.kubernetes.io/last-applied-configuration': {}}, 'f:labels': {'.': {}, 'f:app': {}, 'f:component': {}, 'f:configmanagement.gke.io/arch': {}, 'f:configmanagement.gke.io/configmanagement': {}, 'f:configmanagement.gke.io/system': {}, 'f:k8s-app': {}}, 'f:ownerReferences': {'.': {}, 'k:{"uid":"3ba193e5-a89c-430d-9bdc-3f8d07e7443b"}': {}}}, 'f:spec': {'f:minReadySeconds': {}, 'f:progressDeadlineSeconds': {}, 'f:replicas': {}, 'f:revisionHistoryLimit': {}, 'f:selector': {}, 'f:strategy': {'f:rollingUpdate': {'.': {}, 'f:maxSurge': {}, 'f:maxUnavailable': {}}, 'f:type': {}}, 'f:template': {'f:metadata': {'f:labels': {'.': {}, 'f:app': {}, 'f:component': {}}}, 'f:spec': {'f:containers': {'k:{"name":"otel-collector"}': {'.': {}, 'f:args': {}, 'f:command': {}, 'f:image': {}, 'f:imagePullPolicy': {}, 'f:name': {}, 'f:ports': {'.': {}, 'k:{"containerPort":8675,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:protocol': {}}, 'k:{"containerPort":8888,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:protocol': {}}, 'k:{"containerPort":55678,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:protocol': {}}}, 'f:readinessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:httpGet': {'.': {}, 'f:path': {}, 'f:port': {}, 'f:scheme': {}}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:timeoutSeconds': {}}, 'f:resources': {'.': {}, 'f:limits': {'.': {}, 'f:cpu': {}, 'f:memory': {}}, 'f:requests': {'.': {}, 'f:cpu': {}, 'f:memory': {}}}, 'f:securityContext': {'.': {}, 'f:allowPrivilegeEscalation': {}, 'f:capabilities': {'.': {}, 'f:drop': {}}, 'f:readOnlyRootFilesystem': {}}, 'f:terminationMessagePath': {}, 'f:terminationMessagePolicy': {}, 'f:volumeMounts': {'.': {}, 'k:{"mountPath":"/conf"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}}}}, 'f:dnsPolicy': {}, 'f:restartPolicy': {}, 'f:schedulerName': {}, 'f:securityContext': {'.': {}, 'f:fsGroup': {}, 'f:runAsGroup': {}, 'f:runAsNonRoot': {}, 'f:runAsUser': {}, 'f:seccompProfile': {'.': {}, 'f:type': {}}}, 'f:terminationGracePeriodSeconds': {}, 'f:volumes': {'.': {}, 'k:{"name":"otel-collector-config-vol"}': {'.': {}, 'f:name': {}, 'f:projected': {'.': {}, 'f:defaultMode': {}, 'f:sources': {}}}}}}}}}, {'manager': 'reconciler-manager', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:34:53Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:spec': {'f:template': {'f:metadata': {'f:annotations': {'.': {}, 'f:iam.gke.io/gcp-service-account': {}}}}}}}, {'manager': 'kube-controller-manager', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:35:09Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'f:deployment.kubernetes.io/revision': {}}}, 'f:status': {'f:availableReplicas': {}, 'f:conditions': {'.': {}, 'k:{"type":"Available"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}, 'k:{"type":"Progressing"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}}, 'f:observedGeneration': {}, 'f:readyReplicas': {}, 'f:replicas': {}, 'f:updatedReplicas': {}}}, 'subresource': 'status'}]}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'opentelemetry', 'component': 'otel-collector'}}, 'template': {'metadata': {'labels': {'app': 'opentelemetry', 'component': 'otel-collector'}, 'annotations': {'iam.gke.io/gcp-service-account': ''}}, 'spec': {'volumes': [{'name': 'otel-collector-config-vol', 'projected': {'sources': [{'configMap': {'name': 'otel-collector'}}, {'configMap': {'name': 'otel-collector-googlecloud', 'optional': True}}, {'configMap': {'name': 'otel-collector-custom', 'optional': True}}], 'defaultMode': 420}}], 'containers': [{'name': 'otel-collector', 'image': 'gcr.io/config-management-release/otelcontribcol:v0.102.0-gke.6', 'command': ['/otelcontribcol'], 'args': ['--config=/conf/otel-collector-config.yaml', '--feature-gates=-pkg.translator.prometheus.NormalizeName'], 'ports': [{'containerPort': 55678, 'protocol': 'TCP'}, {'containerPort': 8888, 'protocol': 'TCP'}, {'containerPort': 8675, 'protocol': 'TCP'}], 'resources': {'limits': {'cpu': '1', 'memory': '2Gi'}, 'requests': {'cpu': '200m', 'memory': '400Mi'}}, 'volumeMounts': [{'name': 'otel-collector-config-vol', 'mountPath': '/conf'}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 13133, 'scheme': 'HTTP'}, 'timeoutSeconds': 1, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 3}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'allowPrivilegeEscalation': False}}], 'restartPolicy': 'Always', 'terminationGracePeriodSeconds': 30, 'dnsPolicy': 'ClusterFirst', 'securityContext': {'runAsUser': 1000, 'runAsGroup': 1000, 'runAsNonRoot': True, 'fsGroup': 2000, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'schedulerName': 'default-scheduler'}}, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxUnavailable': '25%', 'maxSurge': '25%'}}, 'minReadySeconds': 5, 'revisionHistoryLimit': 10, 'progressDeadlineSeconds': 120}, 'status': {'observedGeneration': 2, 'replicas': 1, 'updatedReplicas': 1, 'readyReplicas': 1, 'availableReplicas': 1, 'conditions': [{'type': 'Available', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:34:55Z', 'lastTransitionTime': '2025-10-01T12:34:55Z', 'reason': 'MinimumReplicasAvailable', 'message': 'Deployment has minimum availability.'}, {'type': 'Progressing', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:35:09Z', 'lastTransitionTime': '2025-10-01T12:34:43Z', 'reason': 'NewReplicaSetAvailable', 'message': 'ReplicaSet "otel-collector-666d5c596f" has successfully progressed.'}]}, 'apiVersion': 'apps/v1', 'kind': 'Deployment'})

TASK [install : Get deployment resources in namespace config-management-system] ***
Wednesday 01 October 2025  12:36:24 +0000 (0:00:00.952)       0:06:56.643 ***** 
Wednesday 01 October 2025  12:36:24 +0000 (0:00:00.952)       0:06:56.643 ***** 
ok: [127.0.0.1]

TASK [install : Print deployment resources in namespace config-management-system] ***
Wednesday 01 October 2025  12:36:25 +0000 (0:00:01.202)       0:06:57.846 ***** 
Wednesday 01 October 2025  12:36:25 +0000 (0:00:01.202)       0:06:57.846 ***** 
ok: [127.0.0.1] => {
    "deployment_list.resources": [
        {
            "apiVersion": "apps/v1",
            "kind": "Deployment",
            "metadata": {
                "annotations": {
                    "config.k8s.io/owning-inventory": "5e2d85b42c2219646f0a30d54a5c0ea56f4b16a5-1759322073733052371",
                    "deployment.kubernetes.io/revision": "1",
                    "internal.kpt.dev/upstream-identifier": "apps|Deployment|config-management-system|config-management-operator",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{\"config.k8s.io/owning-inventory\":\"5e2d85b42c2219646f0a30d54a5c0ea56f4b16a5-1759322073733052371\",\"internal.kpt.dev/upstream-identifier\":\"apps|Deployment|config-management-system|config-management-operator\"},\"labels\":{\"k8s-app\":\"config-management-operator\"},\"name\":\"config-management-operator\",\"namespace\":\"config-management-system\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"component\":\"config-management-operator\",\"k8s-app\":\"config-management-operator\"}},\"strategy\":{\"rollingUpdate\":null,\"type\":\"Recreate\"},\"template\":{\"metadata\":{\"labels\":{\"component\":\"config-management-operator\",\"k8s-app\":\"config-management-operator\"}},\"spec\":{\"containers\":[{\"command\":[\"/manager\",\"--private-registry=\"],\"envFrom\":[{\"configMapRef\":{\"name\":\"operator-environment-options\",\"optional\":true}}],\"image\":\"gcr.io/config-management-release/config-management-operator:v1.18.3\",\"name\":\"manager\",\"resources\":{\"requests\":{\"cpu\":\"100m\",\"memory\":\"200Mi\"}},\"securityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"readOnlyRootFilesystem\":true}}],\"securityContext\":{\"runAsGroup\":1000,\"runAsNonRoot\":true,\"runAsUser\":1000,\"seccompProfile\":{\"type\":\"RuntimeDefault\"}},\"serviceAccount\":\"config-management-operator\"}}}}\n"
                },
                "creationTimestamp": "2025-10-01T12:34:35Z",
                "generation": 1,
                "labels": {
                    "k8s-app": "config-management-operator"
                },
                "managedFields": [
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:config.k8s.io/owning-inventory": {},
                                    "f:internal.kpt.dev/upstream-identifier": {},
                                    "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:k8s-app": {}
                                }
                            },
                            "f:spec": {
                                "f:progressDeadlineSeconds": {},
                                "f:replicas": {},
                                "f:revisionHistoryLimit": {},
                                "f:selector": {},
                                "f:strategy": {
                                    "f:type": {}
                                },
                                "f:template": {
                                    "f:metadata": {
                                        "f:labels": {
                                            ".": {},
                                            "f:component": {},
                                            "f:k8s-app": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:containers": {
                                            "k:{\"name\":\"manager\"}": {
                                                ".": {},
                                                "f:command": {},
                                                "f:envFrom": {},
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:name": {},
                                                "f:resources": {
                                                    ".": {},
                                                    "f:requests": {
                                                        ".": {},
                                                        "f:cpu": {},
                                                        "f:memory": {}
                                                    }
                                                },
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:allowPrivilegeEscalation": {},
                                                    "f:capabilities": {
                                                        ".": {},
                                                        "f:drop": {}
                                                    },
                                                    "f:readOnlyRootFilesystem": {}
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {}
                                            }
                                        },
                                        "f:dnsPolicy": {},
                                        "f:restartPolicy": {},
                                        "f:schedulerName": {},
                                        "f:securityContext": {
                                            ".": {},
                                            "f:runAsGroup": {},
                                            "f:runAsNonRoot": {},
                                            "f:runAsUser": {},
                                            "f:seccompProfile": {
                                                ".": {},
                                                "f:type": {}
                                            }
                                        },
                                        "f:serviceAccount": {},
                                        "f:serviceAccountName": {},
                                        "f:terminationGracePeriodSeconds": {}
                                    }
                                }
                            }
                        },
                        "manager": "kubectl",
                        "operation": "Update",
                        "time": "2025-10-01T12:34:35Z"
                    },
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    "f:deployment.kubernetes.io/revision": {}
                                }
                            },
                            "f:status": {
                                "f:availableReplicas": {},
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"Available\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Progressing\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:observedGeneration": {},
                                "f:readyReplicas": {},
                                "f:replicas": {},
                                "f:updatedReplicas": {}
                            }
                        },
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "subresource": "status",
                        "time": "2025-10-01T12:34:38Z"
                    }
                ],
                "name": "config-management-operator",
                "namespace": "config-management-system",
                "resourceVersion": "4569",
                "uid": "952915bb-6217-48b8-bcf1-f2427b236e96"
            },
            "spec": {
                "progressDeadlineSeconds": 600,
                "replicas": 1,
                "revisionHistoryLimit": 10,
                "selector": {
                    "matchLabels": {
                        "component": "config-management-operator",
                        "k8s-app": "config-management-operator"
                    }
                },
                "strategy": {
                    "type": "Recreate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "component": "config-management-operator",
                            "k8s-app": "config-management-operator"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "command": [
                                    "/manager",
                                    "--private-registry="
                                ],
                                "envFrom": [
                                    {
                                        "configMapRef": {
                                            "name": "operator-environment-options",
                                            "optional": true
                                        }
                                    }
                                ],
                                "image": "gcr.io/config-management-release/config-management-operator:v1.18.3",
                                "imagePullPolicy": "IfNotPresent",
                                "name": "manager",
                                "resources": {
                                    "requests": {
                                        "cpu": "100m",
                                        "memory": "200Mi"
                                    }
                                },
                                "securityContext": {
                                    "allowPrivilegeEscalation": false,
                                    "capabilities": {
                                        "drop": [
                                            "ALL"
                                        ]
                                    },
                                    "readOnlyRootFilesystem": true
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File"
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "restartPolicy": "Always",
                        "schedulerName": "default-scheduler",
                        "securityContext": {
                            "runAsGroup": 1000,
                            "runAsNonRoot": true,
                            "runAsUser": 1000,
                            "seccompProfile": {
                                "type": "RuntimeDefault"
                            }
                        },
                        "serviceAccount": "config-management-operator",
                        "serviceAccountName": "config-management-operator",
                        "terminationGracePeriodSeconds": 30
                    }
                }
            },
            "status": {
                "availableReplicas": 1,
                "conditions": [
                    {
                        "lastTransitionTime": "2025-10-01T12:34:38Z",
                        "lastUpdateTime": "2025-10-01T12:34:38Z",
                        "message": "Deployment has minimum availability.",
                        "reason": "MinimumReplicasAvailable",
                        "status": "True",
                        "type": "Available"
                    },
                    {
                        "lastTransitionTime": "2025-10-01T12:34:35Z",
                        "lastUpdateTime": "2025-10-01T12:34:38Z",
                        "message": "ReplicaSet \"config-management-operator-86bb799ccb\" has successfully progressed.",
                        "reason": "NewReplicaSetAvailable",
                        "status": "True",
                        "type": "Progressing"
                    }
                ],
                "observedGeneration": 1,
                "readyReplicas": 1,
                "replicas": 1,
                "updatedReplicas": 1
            }
        },
        {
            "apiVersion": "apps/v1",
            "kind": "Deployment",
            "metadata": {
                "annotations": {
                    "deployment.kubernetes.io/revision": "1",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"reconciler-manager\",\"configmanagement.gke.io/arch\":\"csmr\",\"configmanagement.gke.io/configmanagement\":\"config-management\",\"configmanagement.gke.io/system\":\"true\",\"k8s-app\":\"kubernetes-config-management\"},\"name\":\"reconciler-manager\",\"namespace\":\"config-management-system\",\"ownerReferences\":[{\"apiVersion\":\"configmanagement.gke.io/v1\",\"blockOwnerDeletion\":true,\"controller\":true,\"kind\":\"ConfigManagement\",\"name\":\"config-management\",\"uid\":\"3ba193e5-a89c-430d-9bdc-3f8d07e7443b\"}]},\"spec\":{\"minReadySeconds\":10,\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"reconciler-manager\"}},\"strategy\":{\"type\":\"Recreate\"},\"template\":{\"metadata\":{\"labels\":{\"app\":\"reconciler-manager\",\"configsync.gke.io/deployment-name\":\"reconciler-manager\"}},\"spec\":{\"containers\":[{\"args\":[\"--enable-leader-election\",\"-v=1\"],\"command\":[\"/reconciler-manager\"],\"envFrom\":[{\"configMapRef\":{\"name\":\"reconciler-manager\",\"optional\":true}}],\"image\":\"gcr.io/config-management-release/reconciler-manager:v1.18.3-rc.4\",\"name\":\"reconciler-manager\",\"resources\":{\"requests\":{\"cpu\":\"10m\",\"memory\":\"50Mi\"}},\"securityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"readOnlyRootFilesystem\":true},\"volumeMounts\":[{\"mountPath\":\"/deployment.yaml\",\"name\":\"configs\",\"subPath\":\"deployment.yaml\"}]},{\"args\":[\"--config=/conf/otel-agent-config.yaml\",\"--feature-gates=-pkg.translator.prometheus.NormalizeName\"],\"command\":[\"/otelcontribcol\"],\"env\":[{\"name\":\"KUBE_POD_NAME\",\"valueFrom\":{\"fieldRef\":{\"apiVersion\":\"v1\",\"fieldPath\":\"metadata.name\"}}},{\"name\":\"KUBE_POD_NAMESPACE\",\"valueFrom\":{\"fieldRef\":{\"apiVersion\":\"v1\",\"fieldPath\":\"metadata.namespace\"}}},{\"name\":\"KUBE_POD_UID\",\"valueFrom\":{\"fieldRef\":{\"apiVersion\":\"v1\",\"fieldPath\":\"metadata.uid\"}}},{\"name\":\"KUBE_POD_IP\",\"valueFrom\":{\"fieldRef\":{\"apiVersion\":\"v1\",\"fieldPath\":\"status.podIP\"}}},{\"name\":\"KUBE_NODE_NAME\",\"valueFrom\":{\"fieldRef\":{\"apiVersion\":\"v1\",\"fieldPath\":\"spec.nodeName\"}}},{\"name\":\"KUBE_DEPLOYMENT_NAME\",\"valueFrom\":{\"fieldRef\":{\"apiVersion\":\"v1\",\"fieldPath\":\"metadata.labels['configsync.gke.io/deployment-name']\"}}},{\"name\":\"OTEL_RESOURCE_ATTRIBUTES\",\"value\":\"k8s.pod.name=$(KUBE_POD_NAME),k8s.pod.namespace=$(KUBE_POD_NAMESPACE),k8s.pod.uid=$(KUBE_POD_UID),k8s.pod.ip=$(KUBE_POD_IP),k8s.node.name=$(KUBE_NODE_NAME),k8s.deployment.name=$(KUBE_DEPLOYMENT_NAME)\"}],\"image\":\"gcr.io/config-management-release/otelcontribcol:v0.102.0-gke.6\",\"name\":\"otel-agent\",\"ports\":[{\"containerPort\":55678},{\"containerPort\":8888}],\"readinessProbe\":{\"httpGet\":{\"path\":\"/\",\"port\":13133}},\"resources\":{\"limits\":{\"cpu\":1,\"memory\":\"1Gi\"},\"requests\":{\"cpu\":\"10m\",\"memory\":\"100Mi\"}},\"securityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"readOnlyRootFilesystem\":true},\"volumeMounts\":[{\"mountPath\":\"/conf\",\"name\":\"otel-agent-config-vol\"}]}],\"securityContext\":{\"runAsGroup\":1000,\"runAsNonRoot\":true,\"runAsUser\":1000,\"seccompProfile\":{\"type\":\"RuntimeDefault\"}},\"serviceAccountName\":\"reconciler-manager\",\"terminationGracePeriodSeconds\":10,\"volumes\":[{\"configMap\":{\"name\":\"reconciler-manager-cm\"},\"name\":\"configs\"},{\"configMap\":{\"name\":\"otel-agent\"},\"name\":\"otel-agent-config-vol\"}]}}}}\n"
                },
                "creationTimestamp": "2025-10-01T12:34:43Z",
                "generation": 1,
                "labels": {
                    "app": "reconciler-manager",
                    "configmanagement.gke.io/arch": "csmr",
                    "configmanagement.gke.io/configmanagement": "config-management",
                    "configmanagement.gke.io/system": "true",
                    "k8s-app": "kubernetes-config-management"
                },
                "managedFields": [
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:app": {},
                                    "f:configmanagement.gke.io/arch": {},
                                    "f:configmanagement.gke.io/configmanagement": {},
                                    "f:configmanagement.gke.io/system": {},
                                    "f:k8s-app": {}
                                },
                                "f:ownerReferences": {
                                    ".": {},
                                    "k:{\"uid\":\"3ba193e5-a89c-430d-9bdc-3f8d07e7443b\"}": {}
                                }
                            },
                            "f:spec": {
                                "f:minReadySeconds": {},
                                "f:progressDeadlineSeconds": {},
                                "f:replicas": {},
                                "f:revisionHistoryLimit": {},
                                "f:selector": {},
                                "f:strategy": {
                                    "f:type": {}
                                },
                                "f:template": {
                                    "f:metadata": {
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:configsync.gke.io/deployment-name": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:containers": {
                                            "k:{\"name\":\"otel-agent\"}": {
                                                ".": {},
                                                "f:args": {},
                                                "f:command": {},
                                                "f:env": {
                                                    ".": {},
                                                    "k:{\"name\":\"KUBE_DEPLOYMENT_NAME\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"KUBE_NODE_NAME\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"KUBE_POD_IP\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"KUBE_POD_NAME\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"KUBE_POD_NAMESPACE\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"KUBE_POD_UID\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"OTEL_RESOURCE_ATTRIBUTES\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:value": {}
                                                    }
                                                },
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:name": {},
                                                "f:ports": {
                                                    ".": {},
                                                    "k:{\"containerPort\":55678,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:protocol": {}
                                                    },
                                                    "k:{\"containerPort\":8888,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:protocol": {}
                                                    }
                                                },
                                                "f:readinessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:resources": {
                                                    ".": {},
                                                    "f:limits": {
                                                        ".": {},
                                                        "f:cpu": {},
                                                        "f:memory": {}
                                                    },
                                                    "f:requests": {
                                                        ".": {},
                                                        "f:cpu": {},
                                                        "f:memory": {}
                                                    }
                                                },
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:allowPrivilegeEscalation": {},
                                                    "f:capabilities": {
                                                        ".": {},
                                                        "f:drop": {}
                                                    },
                                                    "f:readOnlyRootFilesystem": {}
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {},
                                                "f:volumeMounts": {
                                                    ".": {},
                                                    "k:{\"mountPath\":\"/conf\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    }
                                                }
                                            },
                                            "k:{\"name\":\"reconciler-manager\"}": {
                                                ".": {},
                                                "f:args": {},
                                                "f:command": {},
                                                "f:envFrom": {},
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:name": {},
                                                "f:resources": {
                                                    ".": {},
                                                    "f:requests": {
                                                        ".": {},
                                                        "f:cpu": {},
                                                        "f:memory": {}
                                                    }
                                                },
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:allowPrivilegeEscalation": {},
                                                    "f:capabilities": {
                                                        ".": {},
                                                        "f:drop": {}
                                                    },
                                                    "f:readOnlyRootFilesystem": {}
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {},
                                                "f:volumeMounts": {
                                                    ".": {},
                                                    "k:{\"mountPath\":\"/deployment.yaml\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {},
                                                        "f:subPath": {}
                                                    }
                                                }
                                            }
                                        },
                                        "f:dnsPolicy": {},
                                        "f:restartPolicy": {},
                                        "f:schedulerName": {},
                                        "f:securityContext": {
                                            ".": {},
                                            "f:runAsGroup": {},
                                            "f:runAsNonRoot": {},
                                            "f:runAsUser": {},
                                            "f:seccompProfile": {
                                                ".": {},
                                                "f:type": {}
                                            }
                                        },
                                        "f:serviceAccount": {},
                                        "f:serviceAccountName": {},
                                        "f:terminationGracePeriodSeconds": {},
                                        "f:volumes": {
                                            ".": {},
                                            "k:{\"name\":\"configs\"}": {
                                                ".": {},
                                                "f:configMap": {
                                                    ".": {},
                                                    "f:defaultMode": {},
                                                    "f:name": {}
                                                },
                                                "f:name": {}
                                            },
                                            "k:{\"name\":\"otel-agent-config-vol\"}": {
                                                ".": {},
                                                "f:configMap": {
                                                    ".": {},
                                                    "f:defaultMode": {},
                                                    "f:name": {}
                                                },
                                                "f:name": {}
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "manager": "kubectl-client-side-apply",
                        "operation": "Update",
                        "time": "2025-10-01T12:34:43Z"
                    },
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    "f:deployment.kubernetes.io/revision": {}
                                }
                            },
                            "f:status": {
                                "f:availableReplicas": {},
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"Available\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Progressing\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:observedGeneration": {},
                                "f:readyReplicas": {},
                                "f:replicas": {},
                                "f:updatedReplicas": {}
                            }
                        },
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "subresource": "status",
                        "time": "2025-10-01T12:35:03Z"
                    }
                ],
                "name": "reconciler-manager",
                "namespace": "config-management-system",
                "ownerReferences": [
                    {
                        "apiVersion": "configmanagement.gke.io/v1",
                        "blockOwnerDeletion": true,
                        "controller": true,
                        "kind": "ConfigManagement",
                        "name": "config-management",
                        "uid": "3ba193e5-a89c-430d-9bdc-3f8d07e7443b"
                    }
                ],
                "resourceVersion": "5003",
                "uid": "8c22d1d6-6650-43e0-8bb4-d6bf21aa5360"
            },
            "spec": {
                "minReadySeconds": 10,
                "progressDeadlineSeconds": 600,
                "replicas": 1,
                "revisionHistoryLimit": 10,
                "selector": {
                    "matchLabels": {
                        "app": "reconciler-manager"
                    }
                },
                "strategy": {
                    "type": "Recreate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "app": "reconciler-manager",
                            "configsync.gke.io/deployment-name": "reconciler-manager"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "args": [
                                    "--enable-leader-election",
                                    "-v=1"
                                ],
                                "command": [
                                    "/reconciler-manager"
                                ],
                                "envFrom": [
                                    {
                                        "configMapRef": {
                                            "name": "reconciler-manager",
                                            "optional": true
                                        }
                                    }
                                ],
                                "image": "gcr.io/config-management-release/reconciler-manager:v1.18.3-rc.4",
                                "imagePullPolicy": "IfNotPresent",
                                "name": "reconciler-manager",
                                "resources": {
                                    "requests": {
                                        "cpu": "10m",
                                        "memory": "50Mi"
                                    }
                                },
                                "securityContext": {
                                    "allowPrivilegeEscalation": false,
                                    "capabilities": {
                                        "drop": [
                                            "ALL"
                                        ]
                                    },
                                    "readOnlyRootFilesystem": true
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/deployment.yaml",
                                        "name": "configs",
                                        "subPath": "deployment.yaml"
                                    }
                                ]
                            },
                            {
                                "args": [
                                    "--config=/conf/otel-agent-config.yaml",
                                    "--feature-gates=-pkg.translator.prometheus.NormalizeName"
                                ],
                                "command": [
                                    "/otelcontribcol"
                                ],
                                "env": [
                                    {
                                        "name": "KUBE_POD_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.name"
                                            }
                                        }
                                    },
                                    {
                                        "name": "KUBE_POD_NAMESPACE",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            }
                                        }
                                    },
                                    {
                                        "name": "KUBE_POD_UID",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.uid"
                                            }
                                        }
                                    },
                                    {
                                        "name": "KUBE_POD_IP",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "status.podIP"
                                            }
                                        }
                                    },
                                    {
                                        "name": "KUBE_NODE_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "spec.nodeName"
                                            }
                                        }
                                    },
                                    {
                                        "name": "KUBE_DEPLOYMENT_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.labels['configsync.gke.io/deployment-name']"
                                            }
                                        }
                                    },
                                    {
                                        "name": "OTEL_RESOURCE_ATTRIBUTES",
                                        "value": "k8s.pod.name=$(KUBE_POD_NAME),k8s.pod.namespace=$(KUBE_POD_NAMESPACE),k8s.pod.uid=$(KUBE_POD_UID),k8s.pod.ip=$(KUBE_POD_IP),k8s.node.name=$(KUBE_NODE_NAME),k8s.deployment.name=$(KUBE_DEPLOYMENT_NAME)"
                                    }
                                ],
                                "image": "gcr.io/config-management-release/otelcontribcol:v0.102.0-gke.6",
                                "imagePullPolicy": "IfNotPresent",
                                "name": "otel-agent",
                                "ports": [
                                    {
                                        "containerPort": 55678,
                                        "protocol": "TCP"
                                    },
                                    {
                                        "containerPort": 8888,
                                        "protocol": "TCP"
                                    }
                                ],
                                "readinessProbe": {
                                    "failureThreshold": 3,
                                    "httpGet": {
                                        "path": "/",
                                        "port": 13133,
                                        "scheme": "HTTP"
                                    },
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 1
                                },
                                "resources": {
                                    "limits": {
                                        "cpu": "1",
                                        "memory": "1Gi"
                                    },
                                    "requests": {
                                        "cpu": "10m",
                                        "memory": "100Mi"
                                    }
                                },
                                "securityContext": {
                                    "allowPrivilegeEscalation": false,
                                    "capabilities": {
                                        "drop": [
                                            "ALL"
                                        ]
                                    },
                                    "readOnlyRootFilesystem": true
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/conf",
                                        "name": "otel-agent-config-vol"
                                    }
                                ]
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "restartPolicy": "Always",
                        "schedulerName": "default-scheduler",
                        "securityContext": {
                            "runAsGroup": 1000,
                            "runAsNonRoot": true,
                            "runAsUser": 1000,
                            "seccompProfile": {
                                "type": "RuntimeDefault"
                            }
                        },
                        "serviceAccount": "reconciler-manager",
                        "serviceAccountName": "reconciler-manager",
                        "terminationGracePeriodSeconds": 10,
                        "volumes": [
                            {
                                "configMap": {
                                    "defaultMode": 420,
                                    "name": "reconciler-manager-cm"
                                },
                                "name": "configs"
                            },
                            {
                                "configMap": {
                                    "defaultMode": 420,
                                    "name": "otel-agent"
                                },
                                "name": "otel-agent-config-vol"
                            }
                        ]
                    }
                }
            },
            "status": {
                "availableReplicas": 1,
                "conditions": [
                    {
                        "lastTransitionTime": "2025-10-01T12:35:03Z",
                        "lastUpdateTime": "2025-10-01T12:35:03Z",
                        "message": "Deployment has minimum availability.",
                        "reason": "MinimumReplicasAvailable",
                        "status": "True",
                        "type": "Available"
                    },
                    {
                        "lastTransitionTime": "2025-10-01T12:34:43Z",
                        "lastUpdateTime": "2025-10-01T12:35:03Z",
                        "message": "ReplicaSet \"reconciler-manager-56b45d9844\" has successfully progressed.",
                        "reason": "NewReplicaSetAvailable",
                        "status": "True",
                        "type": "Progressing"
                    }
                ],
                "observedGeneration": 1,
                "readyReplicas": 1,
                "replicas": 1,
                "updatedReplicas": 1
            }
        }
    ]
}

TASK [install : Wait for deployments in namespace config-management-system] ****
Wednesday 01 October 2025  12:36:25 +0000 (0:00:00.116)       0:06:57.963 ***** 
Wednesday 01 October 2025  12:36:25 +0000 (0:00:00.116)       0:06:57.963 ***** 
ok: [127.0.0.1] => (item={'metadata': {'name': 'config-management-operator', 'namespace': 'config-management-system', 'uid': '952915bb-6217-48b8-bcf1-f2427b236e96', 'resourceVersion': '4569', 'generation': 1, 'creationTimestamp': '2025-10-01T12:34:35Z', 'labels': {'k8s-app': 'config-management-operator'}, 'annotations': {'config.k8s.io/owning-inventory': '5e2d85b42c2219646f0a30d54a5c0ea56f4b16a5-1759322073733052371', 'deployment.kubernetes.io/revision': '1', 'internal.kpt.dev/upstream-identifier': 'apps|Deployment|config-management-system|config-management-operator', 'kubectl.kubernetes.io/last-applied-configuration': '{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"config.k8s.io/owning-inventory":"5e2d85b42c2219646f0a30d54a5c0ea56f4b16a5-1759322073733052371","internal.kpt.dev/upstream-identifier":"apps|Deployment|config-management-system|config-management-operator"},"labels":{"k8s-app":"config-management-operator"},"name":"config-management-operator","namespace":"config-management-system"},"spec":{"replicas":1,"selector":{"matchLabels":{"component":"config-management-operator","k8s-app":"config-management-operator"}},"strategy":{"rollingUpdate":null,"type":"Recreate"},"template":{"metadata":{"labels":{"component":"config-management-operator","k8s-app":"config-management-operator"}},"spec":{"containers":[{"command":["/manager","--private-registry="],"envFrom":[{"configMapRef":{"name":"operator-environment-options","optional":true}}],"image":"gcr.io/config-management-release/config-management-operator:v1.18.3","name":"manager","resources":{"requests":{"cpu":"100m","memory":"200Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true}}],"securityContext":{"runAsGroup":1000,"runAsNonRoot":true,"runAsUser":1000,"seccompProfile":{"type":"RuntimeDefault"}},"serviceAccount":"config-management-operator"}}}}\n'}, 'managedFields': [{'manager': 'kubectl', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:34:35Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'.': {}, 'f:config.k8s.io/owning-inventory': {}, 'f:internal.kpt.dev/upstream-identifier': {}, 'f:kubectl.kubernetes.io/last-applied-configuration': {}}, 'f:labels': {'.': {}, 'f:k8s-app': {}}}, 'f:spec': {'f:progressDeadlineSeconds': {}, 'f:replicas': {}, 'f:revisionHistoryLimit': {}, 'f:selector': {}, 'f:strategy': {'f:type': {}}, 'f:template': {'f:metadata': {'f:labels': {'.': {}, 'f:component': {}, 'f:k8s-app': {}}}, 'f:spec': {'f:containers': {'k:{"name":"manager"}': {'.': {}, 'f:command': {}, 'f:envFrom': {}, 'f:image': {}, 'f:imagePullPolicy': {}, 'f:name': {}, 'f:resources': {'.': {}, 'f:requests': {'.': {}, 'f:cpu': {}, 'f:memory': {}}}, 'f:securityContext': {'.': {}, 'f:allowPrivilegeEscalation': {}, 'f:capabilities': {'.': {}, 'f:drop': {}}, 'f:readOnlyRootFilesystem': {}}, 'f:terminationMessagePath': {}, 'f:terminationMessagePolicy': {}}}, 'f:dnsPolicy': {}, 'f:restartPolicy': {}, 'f:schedulerName': {}, 'f:securityContext': {'.': {}, 'f:runAsGroup': {}, 'f:runAsNonRoot': {}, 'f:runAsUser': {}, 'f:seccompProfile': {'.': {}, 'f:type': {}}}, 'f:serviceAccount': {}, 'f:serviceAccountName': {}, 'f:terminationGracePeriodSeconds': {}}}}}}, {'manager': 'kube-controller-manager', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:34:38Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'f:deployment.kubernetes.io/revision': {}}}, 'f:status': {'f:availableReplicas': {}, 'f:conditions': {'.': {}, 'k:{"type":"Available"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}, 'k:{"type":"Progressing"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}}, 'f:observedGeneration': {}, 'f:readyReplicas': {}, 'f:replicas': {}, 'f:updatedReplicas': {}}}, 'subresource': 'status'}]}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'component': 'config-management-operator', 'k8s-app': 'config-management-operator'}}, 'template': {'metadata': {'labels': {'component': 'config-management-operator', 'k8s-app': 'config-management-operator'}}, 'spec': {'containers': [{'name': 'manager', 'image': 'gcr.io/config-management-release/config-management-operator:v1.18.3', 'command': ['/manager', '--private-registry='], 'envFrom': [{'configMapRef': {'name': 'operator-environment-options', 'optional': True}}], 'resources': {'requests': {'cpu': '100m', 'memory': '200Mi'}}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'allowPrivilegeEscalation': False}}], 'restartPolicy': 'Always', 'terminationGracePeriodSeconds': 30, 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'config-management-operator', 'serviceAccount': 'config-management-operator', 'securityContext': {'runAsUser': 1000, 'runAsGroup': 1000, 'runAsNonRoot': True, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'schedulerName': 'default-scheduler'}}, 'strategy': {'type': 'Recreate'}, 'revisionHistoryLimit': 10, 'progressDeadlineSeconds': 600}, 'status': {'observedGeneration': 1, 'replicas': 1, 'updatedReplicas': 1, 'readyReplicas': 1, 'availableReplicas': 1, 'conditions': [{'type': 'Available', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:34:38Z', 'lastTransitionTime': '2025-10-01T12:34:38Z', 'reason': 'MinimumReplicasAvailable', 'message': 'Deployment has minimum availability.'}, {'type': 'Progressing', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:34:38Z', 'lastTransitionTime': '2025-10-01T12:34:35Z', 'reason': 'NewReplicaSetAvailable', 'message': 'ReplicaSet "config-management-operator-86bb799ccb" has successfully progressed.'}]}, 'apiVersion': 'apps/v1', 'kind': 'Deployment'})
ok: [127.0.0.1] => (item={'metadata': {'name': 'reconciler-manager', 'namespace': 'config-management-system', 'uid': '8c22d1d6-6650-43e0-8bb4-d6bf21aa5360', 'resourceVersion': '5003', 'generation': 1, 'creationTimestamp': '2025-10-01T12:34:43Z', 'labels': {'app': 'reconciler-manager', 'configmanagement.gke.io/arch': 'csmr', 'configmanagement.gke.io/configmanagement': 'config-management', 'configmanagement.gke.io/system': 'true', 'k8s-app': 'kubernetes-config-management'}, 'annotations': {'deployment.kubernetes.io/revision': '1', 'kubectl.kubernetes.io/last-applied-configuration': '{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"reconciler-manager","configmanagement.gke.io/arch":"csmr","configmanagement.gke.io/configmanagement":"config-management","configmanagement.gke.io/system":"true","k8s-app":"kubernetes-config-management"},"name":"reconciler-manager","namespace":"config-management-system","ownerReferences":[{"apiVersion":"configmanagement.gke.io/v1","blockOwnerDeletion":true,"controller":true,"kind":"ConfigManagement","name":"config-management","uid":"3ba193e5-a89c-430d-9bdc-3f8d07e7443b"}]},"spec":{"minReadySeconds":10,"replicas":1,"selector":{"matchLabels":{"app":"reconciler-manager"}},"strategy":{"type":"Recreate"},"template":{"metadata":{"labels":{"app":"reconciler-manager","configsync.gke.io/deployment-name":"reconciler-manager"}},"spec":{"containers":[{"args":["--enable-leader-election","-v=1"],"command":["/reconciler-manager"],"envFrom":[{"configMapRef":{"name":"reconciler-manager","optional":true}}],"image":"gcr.io/config-management-release/reconciler-manager:v1.18.3-rc.4","name":"reconciler-manager","resources":{"requests":{"cpu":"10m","memory":"50Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true},"volumeMounts":[{"mountPath":"/deployment.yaml","name":"configs","subPath":"deployment.yaml"}]},{"args":["--config=/conf/otel-agent-config.yaml","--feature-gates=-pkg.translator.prometheus.NormalizeName"],"command":["/otelcontribcol"],"env":[{"name":"KUBE_POD_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.name"}}},{"name":"KUBE_POD_NAMESPACE","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}},{"name":"KUBE_POD_UID","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.uid"}}},{"name":"KUBE_POD_IP","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"status.podIP"}}},{"name":"KUBE_NODE_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"spec.nodeName"}}},{"name":"KUBE_DEPLOYMENT_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.labels[\'configsync.gke.io/deployment-name\']"}}},{"name":"OTEL_RESOURCE_ATTRIBUTES","value":"k8s.pod.name=$(KUBE_POD_NAME),k8s.pod.namespace=$(KUBE_POD_NAMESPACE),k8s.pod.uid=$(KUBE_POD_UID),k8s.pod.ip=$(KUBE_POD_IP),k8s.node.name=$(KUBE_NODE_NAME),k8s.deployment.name=$(KUBE_DEPLOYMENT_NAME)"}],"image":"gcr.io/config-management-release/otelcontribcol:v0.102.0-gke.6","name":"otel-agent","ports":[{"containerPort":55678},{"containerPort":8888}],"readinessProbe":{"httpGet":{"path":"/","port":13133}},"resources":{"limits":{"cpu":1,"memory":"1Gi"},"requests":{"cpu":"10m","memory":"100Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true},"volumeMounts":[{"mountPath":"/conf","name":"otel-agent-config-vol"}]}],"securityContext":{"runAsGroup":1000,"runAsNonRoot":true,"runAsUser":1000,"seccompProfile":{"type":"RuntimeDefault"}},"serviceAccountName":"reconciler-manager","terminationGracePeriodSeconds":10,"volumes":[{"configMap":{"name":"reconciler-manager-cm"},"name":"configs"},{"configMap":{"name":"otel-agent"},"name":"otel-agent-config-vol"}]}}}}\n'}, 'ownerReferences': [{'apiVersion': 'configmanagement.gke.io/v1', 'kind': 'ConfigManagement', 'name': 'config-management', 'uid': '3ba193e5-a89c-430d-9bdc-3f8d07e7443b', 'controller': True, 'blockOwnerDeletion': True}], 'managedFields': [{'manager': 'kubectl-client-side-apply', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:34:43Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'.': {}, 'f:kubectl.kubernetes.io/last-applied-configuration': {}}, 'f:labels': {'.': {}, 'f:app': {}, 'f:configmanagement.gke.io/arch': {}, 'f:configmanagement.gke.io/configmanagement': {}, 'f:configmanagement.gke.io/system': {}, 'f:k8s-app': {}}, 'f:ownerReferences': {'.': {}, 'k:{"uid":"3ba193e5-a89c-430d-9bdc-3f8d07e7443b"}': {}}}, 'f:spec': {'f:minReadySeconds': {}, 'f:progressDeadlineSeconds': {}, 'f:replicas': {}, 'f:revisionHistoryLimit': {}, 'f:selector': {}, 'f:strategy': {'f:type': {}}, 'f:template': {'f:metadata': {'f:labels': {'.': {}, 'f:app': {}, 'f:configsync.gke.io/deployment-name': {}}}, 'f:spec': {'f:containers': {'k:{"name":"otel-agent"}': {'.': {}, 'f:args': {}, 'f:command': {}, 'f:env': {'.': {}, 'k:{"name":"KUBE_DEPLOYMENT_NAME"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}, 'k:{"name":"KUBE_NODE_NAME"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}, 'k:{"name":"KUBE_POD_IP"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}, 'k:{"name":"KUBE_POD_NAME"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}, 'k:{"name":"KUBE_POD_NAMESPACE"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}, 'k:{"name":"KUBE_POD_UID"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}, 'k:{"name":"OTEL_RESOURCE_ATTRIBUTES"}': {'.': {}, 'f:name': {}, 'f:value': {}}}, 'f:image': {}, 'f:imagePullPolicy': {}, 'f:name': {}, 'f:ports': {'.': {}, 'k:{"containerPort":8888,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:protocol': {}}, 'k:{"containerPort":55678,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:protocol': {}}}, 'f:readinessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:httpGet': {'.': {}, 'f:path': {}, 'f:port': {}, 'f:scheme': {}}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:timeoutSeconds': {}}, 'f:resources': {'.': {}, 'f:limits': {'.': {}, 'f:cpu': {}, 'f:memory': {}}, 'f:requests': {'.': {}, 'f:cpu': {}, 'f:memory': {}}}, 'f:securityContext': {'.': {}, 'f:allowPrivilegeEscalation': {}, 'f:capabilities': {'.': {}, 'f:drop': {}}, 'f:readOnlyRootFilesystem': {}}, 'f:terminationMessagePath': {}, 'f:terminationMessagePolicy': {}, 'f:volumeMounts': {'.': {}, 'k:{"mountPath":"/conf"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}}}, 'k:{"name":"reconciler-manager"}': {'.': {}, 'f:args': {}, 'f:command': {}, 'f:envFrom': {}, 'f:image': {}, 'f:imagePullPolicy': {}, 'f:name': {}, 'f:resources': {'.': {}, 'f:requests': {'.': {}, 'f:cpu': {}, 'f:memory': {}}}, 'f:securityContext': {'.': {}, 'f:allowPrivilegeEscalation': {}, 'f:capabilities': {'.': {}, 'f:drop': {}}, 'f:readOnlyRootFilesystem': {}}, 'f:terminationMessagePath': {}, 'f:terminationMessagePolicy': {}, 'f:volumeMounts': {'.': {}, 'k:{"mountPath":"/deployment.yaml"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}, 'f:subPath': {}}}}}, 'f:dnsPolicy': {}, 'f:restartPolicy': {}, 'f:schedulerName': {}, 'f:securityContext': {'.': {}, 'f:runAsGroup': {}, 'f:runAsNonRoot': {}, 'f:runAsUser': {}, 'f:seccompProfile': {'.': {}, 'f:type': {}}}, 'f:serviceAccount': {}, 'f:serviceAccountName': {}, 'f:terminationGracePeriodSeconds': {}, 'f:volumes': {'.': {}, 'k:{"name":"configs"}': {'.': {}, 'f:configMap': {'.': {}, 'f:defaultMode': {}, 'f:name': {}}, 'f:name': {}}, 'k:{"name":"otel-agent-config-vol"}': {'.': {}, 'f:configMap': {'.': {}, 'f:defaultMode': {}, 'f:name': {}}, 'f:name': {}}}}}}}}, {'manager': 'kube-controller-manager', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:35:03Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'f:deployment.kubernetes.io/revision': {}}}, 'f:status': {'f:availableReplicas': {}, 'f:conditions': {'.': {}, 'k:{"type":"Available"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}, 'k:{"type":"Progressing"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}}, 'f:observedGeneration': {}, 'f:readyReplicas': {}, 'f:replicas': {}, 'f:updatedReplicas': {}}}, 'subresource': 'status'}]}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'reconciler-manager'}}, 'template': {'metadata': {'labels': {'app': 'reconciler-manager', 'configsync.gke.io/deployment-name': 'reconciler-manager'}}, 'spec': {'volumes': [{'name': 'configs', 'configMap': {'name': 'reconciler-manager-cm', 'defaultMode': 420}}, {'name': 'otel-agent-config-vol', 'configMap': {'name': 'otel-agent', 'defaultMode': 420}}], 'containers': [{'name': 'reconciler-manager', 'image': 'gcr.io/config-management-release/reconciler-manager:v1.18.3-rc.4', 'command': ['/reconciler-manager'], 'args': ['--enable-leader-election', '-v=1'], 'envFrom': [{'configMapRef': {'name': 'reconciler-manager', 'optional': True}}], 'resources': {'requests': {'cpu': '10m', 'memory': '50Mi'}}, 'volumeMounts': [{'name': 'configs', 'mountPath': '/deployment.yaml', 'subPath': 'deployment.yaml'}], 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'allowPrivilegeEscalation': False}}, {'name': 'otel-agent', 'image': 'gcr.io/config-management-release/otelcontribcol:v0.102.0-gke.6', 'command': ['/otelcontribcol'], 'args': ['--config=/conf/otel-agent-config.yaml', '--feature-gates=-pkg.translator.prometheus.NormalizeName'], 'ports': [{'containerPort': 55678, 'protocol': 'TCP'}, {'containerPort': 8888, 'protocol': 'TCP'}], 'env': [{'name': 'KUBE_POD_NAME', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'metadata.name'}}}, {'name': 'KUBE_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'metadata.namespace'}}}, {'name': 'KUBE_POD_UID', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'metadata.uid'}}}, {'name': 'KUBE_POD_IP', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'status.podIP'}}}, {'name': 'KUBE_NODE_NAME', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'spec.nodeName'}}}, {'name': 'KUBE_DEPLOYMENT_NAME', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': "metadata.labels['configsync.gke.io/deployment-name']"}}}, {'name': 'OTEL_RESOURCE_ATTRIBUTES', 'value': 'k8s.pod.name=$(KUBE_POD_NAME),k8s.pod.namespace=$(KUBE_POD_NAMESPACE),k8s.pod.uid=$(KUBE_POD_UID),k8s.pod.ip=$(KUBE_POD_IP),k8s.node.name=$(KUBE_NODE_NAME),k8s.deployment.name=$(KUBE_DEPLOYMENT_NAME)'}], 'resources': {'limits': {'cpu': '1', 'memory': '1Gi'}, 'requests': {'cpu': '10m', 'memory': '100Mi'}}, 'volumeMounts': [{'name': 'otel-agent-config-vol', 'mountPath': '/conf'}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 13133, 'scheme': 'HTTP'}, 'timeoutSeconds': 1, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 3}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'allowPrivilegeEscalation': False}}], 'restartPolicy': 'Always', 'terminationGracePeriodSeconds': 10, 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'reconciler-manager', 'serviceAccount': 'reconciler-manager', 'securityContext': {'runAsUser': 1000, 'runAsGroup': 1000, 'runAsNonRoot': True, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'schedulerName': 'default-scheduler'}}, 'strategy': {'type': 'Recreate'}, 'minReadySeconds': 10, 'revisionHistoryLimit': 10, 'progressDeadlineSeconds': 600}, 'status': {'observedGeneration': 1, 'replicas': 1, 'updatedReplicas': 1, 'readyReplicas': 1, 'availableReplicas': 1, 'conditions': [{'type': 'Available', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:35:03Z', 'lastTransitionTime': '2025-10-01T12:35:03Z', 'reason': 'MinimumReplicasAvailable', 'message': 'Deployment has minimum availability.'}, {'type': 'Progressing', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:35:03Z', 'lastTransitionTime': '2025-10-01T12:34:43Z', 'reason': 'NewReplicaSetAvailable', 'message': 'ReplicaSet "reconciler-manager-56b45d9844" has successfully progressed.'}]}, 'apiVersion': 'apps/v1', 'kind': 'Deployment'})

TASK [install : Get deployment resources in namespace resource-group-system] ***
Wednesday 01 October 2025  12:36:27 +0000 (0:00:02.033)       0:06:59.997 ***** 
Wednesday 01 October 2025  12:36:27 +0000 (0:00:02.033)       0:06:59.996 ***** 
ok: [127.0.0.1]

TASK [install : Print deployment resources in namespace resource-group-system] ***
Wednesday 01 October 2025  12:36:28 +0000 (0:00:00.988)       0:07:00.986 ***** 
Wednesday 01 October 2025  12:36:28 +0000 (0:00:00.988)       0:07:00.985 ***** 
ok: [127.0.0.1] => {
    "deployment_list.resources": [
        {
            "apiVersion": "apps/v1",
            "kind": "Deployment",
            "metadata": {
                "annotations": {
                    "deployment.kubernetes.io/revision": "1",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"labels\":{\"configmanagement.gke.io/arch\":\"csmr\",\"configmanagement.gke.io/configmanagement\":\"config-management\",\"configmanagement.gke.io/system\":\"true\",\"control-plane\":\"controller-manager\",\"k8s-app\":\"kubernetes-config-management\"},\"name\":\"resource-group-controller-manager\",\"namespace\":\"resource-group-system\",\"ownerReferences\":[{\"apiVersion\":\"configmanagement.gke.io/v1\",\"blockOwnerDeletion\":true,\"controller\":true,\"kind\":\"ConfigManagement\",\"name\":\"config-management\",\"uid\":\"3ba193e5-a89c-430d-9bdc-3f8d07e7443b\"}]},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"configmanagement.gke.io/arch\":\"csmr\",\"configsync.gke.io/deployment-name\":\"resource-group-controller-manager\",\"control-plane\":\"controller-manager\"}},\"template\":{\"metadata\":{\"labels\":{\"configmanagement.gke.io/arch\":\"csmr\",\"configsync.gke.io/deployment-name\":\"resource-group-controller-manager\",\"control-plane\":\"controller-manager\"}},\"spec\":{\"containers\":[{\"args\":[\"--metrics-addr=127.0.0.1:8080\",\"--enable-leader-election\"],\"command\":[\"/resource-group\"],\"env\":[{\"name\":\"OC_RESOURCE_LABELS\",\"value\":\"k8s.container.name=\\\"manager\\\"\"}],\"image\":\"gcr.io/config-management-release/resource-group-controller:v1.18.3-rc.4\",\"name\":\"manager\",\"resources\":{\"requests\":{\"cpu\":\"100m\",\"memory\":\"200Mi\"}},\"securityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"readOnlyRootFilesystem\":true}},{\"args\":[\"--config=/conf/otel-agent-config.yaml\"],\"command\":[\"/otelcontribcol\"],\"env\":[{\"name\":\"KUBE_POD_NAME\",\"valueFrom\":{\"fieldRef\":{\"apiVersion\":\"v1\",\"fieldPath\":\"metadata.name\"}}},{\"name\":\"KUBE_POD_NAMESPACE\",\"valueFrom\":{\"fieldRef\":{\"apiVersion\":\"v1\",\"fieldPath\":\"metadata.namespace\"}}},{\"name\":\"KUBE_POD_UID\",\"valueFrom\":{\"fieldRef\":{\"apiVersion\":\"v1\",\"fieldPath\":\"metadata.uid\"}}},{\"name\":\"KUBE_POD_IP\",\"valueFrom\":{\"fieldRef\":{\"apiVersion\":\"v1\",\"fieldPath\":\"status.podIP\"}}},{\"name\":\"KUBE_NODE_NAME\",\"valueFrom\":{\"fieldRef\":{\"apiVersion\":\"v1\",\"fieldPath\":\"spec.nodeName\"}}},{\"name\":\"KUBE_DEPLOYMENT_NAME\",\"valueFrom\":{\"fieldRef\":{\"apiVersion\":\"v1\",\"fieldPath\":\"metadata.labels['configsync.gke.io/deployment-name']\"}}},{\"name\":\"OTEL_RESOURCE_ATTRIBUTES\",\"value\":\"k8s.pod.name=$(KUBE_POD_NAME),k8s.pod.namespace=$(KUBE_POD_NAMESPACE),k8s.pod.uid=$(KUBE_POD_UID),k8s.pod.ip=$(KUBE_POD_IP),k8s.node.name=$(KUBE_NODE_NAME),k8s.deployment.name=$(KUBE_DEPLOYMENT_NAME)\"}],\"image\":\"gcr.io/config-management-release/otelcontribcol:v0.102.0-gke.6\",\"name\":\"otel-agent\",\"ports\":[{\"containerPort\":55678},{\"containerPort\":8888}],\"readinessProbe\":{\"httpGet\":{\"path\":\"/\",\"port\":13133}},\"resources\":{\"requests\":{\"cpu\":\"10m\",\"memory\":\"100Mi\"}},\"securityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"readOnlyRootFilesystem\":true},\"volumeMounts\":[{\"mountPath\":\"/conf\",\"name\":\"otel-agent-config-vol\"}]}],\"securityContext\":{\"runAsGroup\":1000,\"runAsNonRoot\":true,\"runAsUser\":1000,\"seccompProfile\":{\"type\":\"RuntimeDefault\"}},\"serviceAccountName\":\"resource-group-sa\",\"terminationGracePeriodSeconds\":10,\"volumes\":[{\"configMap\":{\"name\":\"resource-group-otel-agent\"},\"name\":\"otel-agent-config-vol\"}]}}}}\n"
                },
                "creationTimestamp": "2025-10-01T12:34:43Z",
                "generation": 1,
                "labels": {
                    "configmanagement.gke.io/arch": "csmr",
                    "configmanagement.gke.io/configmanagement": "config-management",
                    "configmanagement.gke.io/system": "true",
                    "control-plane": "controller-manager",
                    "k8s-app": "kubernetes-config-management"
                },
                "managedFields": [
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:configmanagement.gke.io/arch": {},
                                    "f:configmanagement.gke.io/configmanagement": {},
                                    "f:configmanagement.gke.io/system": {},
                                    "f:control-plane": {},
                                    "f:k8s-app": {}
                                },
                                "f:ownerReferences": {
                                    ".": {},
                                    "k:{\"uid\":\"3ba193e5-a89c-430d-9bdc-3f8d07e7443b\"}": {}
                                }
                            },
                            "f:spec": {
                                "f:progressDeadlineSeconds": {},
                                "f:replicas": {},
                                "f:revisionHistoryLimit": {},
                                "f:selector": {},
                                "f:strategy": {
                                    "f:rollingUpdate": {
                                        ".": {},
                                        "f:maxSurge": {},
                                        "f:maxUnavailable": {}
                                    },
                                    "f:type": {}
                                },
                                "f:template": {
                                    "f:metadata": {
                                        "f:labels": {
                                            ".": {},
                                            "f:configmanagement.gke.io/arch": {},
                                            "f:configsync.gke.io/deployment-name": {},
                                            "f:control-plane": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:containers": {
                                            "k:{\"name\":\"manager\"}": {
                                                ".": {},
                                                "f:args": {},
                                                "f:command": {},
                                                "f:env": {
                                                    ".": {},
                                                    "k:{\"name\":\"OC_RESOURCE_LABELS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:value": {}
                                                    }
                                                },
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:name": {},
                                                "f:resources": {
                                                    ".": {},
                                                    "f:requests": {
                                                        ".": {},
                                                        "f:cpu": {},
                                                        "f:memory": {}
                                                    }
                                                },
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:allowPrivilegeEscalation": {},
                                                    "f:capabilities": {
                                                        ".": {},
                                                        "f:drop": {}
                                                    },
                                                    "f:readOnlyRootFilesystem": {}
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {}
                                            },
                                            "k:{\"name\":\"otel-agent\"}": {
                                                ".": {},
                                                "f:args": {},
                                                "f:command": {},
                                                "f:env": {
                                                    ".": {},
                                                    "k:{\"name\":\"KUBE_DEPLOYMENT_NAME\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"KUBE_NODE_NAME\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"KUBE_POD_IP\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"KUBE_POD_NAME\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"KUBE_POD_NAMESPACE\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"KUBE_POD_UID\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"OTEL_RESOURCE_ATTRIBUTES\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:value": {}
                                                    }
                                                },
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:name": {},
                                                "f:ports": {
                                                    ".": {},
                                                    "k:{\"containerPort\":55678,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:protocol": {}
                                                    },
                                                    "k:{\"containerPort\":8888,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:protocol": {}
                                                    }
                                                },
                                                "f:readinessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:resources": {
                                                    ".": {},
                                                    "f:requests": {
                                                        ".": {},
                                                        "f:cpu": {},
                                                        "f:memory": {}
                                                    }
                                                },
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:allowPrivilegeEscalation": {},
                                                    "f:capabilities": {
                                                        ".": {},
                                                        "f:drop": {}
                                                    },
                                                    "f:readOnlyRootFilesystem": {}
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {},
                                                "f:volumeMounts": {
                                                    ".": {},
                                                    "k:{\"mountPath\":\"/conf\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    }
                                                }
                                            }
                                        },
                                        "f:dnsPolicy": {},
                                        "f:restartPolicy": {},
                                        "f:schedulerName": {},
                                        "f:securityContext": {
                                            ".": {},
                                            "f:runAsGroup": {},
                                            "f:runAsNonRoot": {},
                                            "f:runAsUser": {},
                                            "f:seccompProfile": {
                                                ".": {},
                                                "f:type": {}
                                            }
                                        },
                                        "f:serviceAccount": {},
                                        "f:serviceAccountName": {},
                                        "f:terminationGracePeriodSeconds": {},
                                        "f:volumes": {
                                            ".": {},
                                            "k:{\"name\":\"otel-agent-config-vol\"}": {
                                                ".": {},
                                                "f:configMap": {
                                                    ".": {},
                                                    "f:defaultMode": {},
                                                    "f:name": {}
                                                },
                                                "f:name": {}
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "manager": "kubectl-client-side-apply",
                        "operation": "Update",
                        "time": "2025-10-01T12:34:43Z"
                    },
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    "f:deployment.kubernetes.io/revision": {}
                                }
                            },
                            "f:status": {
                                "f:availableReplicas": {},
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"Available\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Progressing\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:observedGeneration": {},
                                "f:readyReplicas": {},
                                "f:replicas": {},
                                "f:updatedReplicas": {}
                            }
                        },
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "subresource": "status",
                        "time": "2025-10-01T12:34:56Z"
                    }
                ],
                "name": "resource-group-controller-manager",
                "namespace": "resource-group-system",
                "ownerReferences": [
                    {
                        "apiVersion": "configmanagement.gke.io/v1",
                        "blockOwnerDeletion": true,
                        "controller": true,
                        "kind": "ConfigManagement",
                        "name": "config-management",
                        "uid": "3ba193e5-a89c-430d-9bdc-3f8d07e7443b"
                    }
                ],
                "resourceVersion": "4950",
                "uid": "8b55d1c1-f013-498f-b9cd-8ef3547fe236"
            },
            "spec": {
                "progressDeadlineSeconds": 600,
                "replicas": 1,
                "revisionHistoryLimit": 10,
                "selector": {
                    "matchLabels": {
                        "configmanagement.gke.io/arch": "csmr",
                        "configsync.gke.io/deployment-name": "resource-group-controller-manager",
                        "control-plane": "controller-manager"
                    }
                },
                "strategy": {
                    "rollingUpdate": {
                        "maxSurge": "25%",
                        "maxUnavailable": "25%"
                    },
                    "type": "RollingUpdate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "configmanagement.gke.io/arch": "csmr",
                            "configsync.gke.io/deployment-name": "resource-group-controller-manager",
                            "control-plane": "controller-manager"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "args": [
                                    "--metrics-addr=127.0.0.1:8080",
                                    "--enable-leader-election"
                                ],
                                "command": [
                                    "/resource-group"
                                ],
                                "env": [
                                    {
                                        "name": "OC_RESOURCE_LABELS",
                                        "value": "k8s.container.name=\"manager\""
                                    }
                                ],
                                "image": "gcr.io/config-management-release/resource-group-controller:v1.18.3-rc.4",
                                "imagePullPolicy": "IfNotPresent",
                                "name": "manager",
                                "resources": {
                                    "requests": {
                                        "cpu": "100m",
                                        "memory": "200Mi"
                                    }
                                },
                                "securityContext": {
                                    "allowPrivilegeEscalation": false,
                                    "capabilities": {
                                        "drop": [
                                            "ALL"
                                        ]
                                    },
                                    "readOnlyRootFilesystem": true
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File"
                            },
                            {
                                "args": [
                                    "--config=/conf/otel-agent-config.yaml"
                                ],
                                "command": [
                                    "/otelcontribcol"
                                ],
                                "env": [
                                    {
                                        "name": "KUBE_POD_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.name"
                                            }
                                        }
                                    },
                                    {
                                        "name": "KUBE_POD_NAMESPACE",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            }
                                        }
                                    },
                                    {
                                        "name": "KUBE_POD_UID",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.uid"
                                            }
                                        }
                                    },
                                    {
                                        "name": "KUBE_POD_IP",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "status.podIP"
                                            }
                                        }
                                    },
                                    {
                                        "name": "KUBE_NODE_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "spec.nodeName"
                                            }
                                        }
                                    },
                                    {
                                        "name": "KUBE_DEPLOYMENT_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.labels['configsync.gke.io/deployment-name']"
                                            }
                                        }
                                    },
                                    {
                                        "name": "OTEL_RESOURCE_ATTRIBUTES",
                                        "value": "k8s.pod.name=$(KUBE_POD_NAME),k8s.pod.namespace=$(KUBE_POD_NAMESPACE),k8s.pod.uid=$(KUBE_POD_UID),k8s.pod.ip=$(KUBE_POD_IP),k8s.node.name=$(KUBE_NODE_NAME),k8s.deployment.name=$(KUBE_DEPLOYMENT_NAME)"
                                    }
                                ],
                                "image": "gcr.io/config-management-release/otelcontribcol:v0.102.0-gke.6",
                                "imagePullPolicy": "IfNotPresent",
                                "name": "otel-agent",
                                "ports": [
                                    {
                                        "containerPort": 55678,
                                        "protocol": "TCP"
                                    },
                                    {
                                        "containerPort": 8888,
                                        "protocol": "TCP"
                                    }
                                ],
                                "readinessProbe": {
                                    "failureThreshold": 3,
                                    "httpGet": {
                                        "path": "/",
                                        "port": 13133,
                                        "scheme": "HTTP"
                                    },
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 1
                                },
                                "resources": {
                                    "requests": {
                                        "cpu": "10m",
                                        "memory": "100Mi"
                                    }
                                },
                                "securityContext": {
                                    "allowPrivilegeEscalation": false,
                                    "capabilities": {
                                        "drop": [
                                            "ALL"
                                        ]
                                    },
                                    "readOnlyRootFilesystem": true
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/conf",
                                        "name": "otel-agent-config-vol"
                                    }
                                ]
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "restartPolicy": "Always",
                        "schedulerName": "default-scheduler",
                        "securityContext": {
                            "runAsGroup": 1000,
                            "runAsNonRoot": true,
                            "runAsUser": 1000,
                            "seccompProfile": {
                                "type": "RuntimeDefault"
                            }
                        },
                        "serviceAccount": "resource-group-sa",
                        "serviceAccountName": "resource-group-sa",
                        "terminationGracePeriodSeconds": 10,
                        "volumes": [
                            {
                                "configMap": {
                                    "defaultMode": 420,
                                    "name": "resource-group-otel-agent"
                                },
                                "name": "otel-agent-config-vol"
                            }
                        ]
                    }
                }
            },
            "status": {
                "availableReplicas": 1,
                "conditions": [
                    {
                        "lastTransitionTime": "2025-10-01T12:34:56Z",
                        "lastUpdateTime": "2025-10-01T12:34:56Z",
                        "message": "Deployment has minimum availability.",
                        "reason": "MinimumReplicasAvailable",
                        "status": "True",
                        "type": "Available"
                    },
                    {
                        "lastTransitionTime": "2025-10-01T12:34:43Z",
                        "lastUpdateTime": "2025-10-01T12:34:56Z",
                        "message": "ReplicaSet \"resource-group-controller-manager-5cbd699db6\" has successfully progressed.",
                        "reason": "NewReplicaSetAvailable",
                        "status": "True",
                        "type": "Progressing"
                    }
                ],
                "observedGeneration": 1,
                "readyReplicas": 1,
                "replicas": 1,
                "updatedReplicas": 1
            }
        }
    ]
}

TASK [install : Wait for deployments in namespace resource-group-system] *******
Wednesday 01 October 2025  12:36:29 +0000 (0:00:00.211)       0:07:01.198 ***** 
Wednesday 01 October 2025  12:36:29 +0000 (0:00:00.211)       0:07:01.197 ***** 
ok: [127.0.0.1] => (item={'metadata': {'name': 'resource-group-controller-manager', 'namespace': 'resource-group-system', 'uid': '8b55d1c1-f013-498f-b9cd-8ef3547fe236', 'resourceVersion': '4950', 'generation': 1, 'creationTimestamp': '2025-10-01T12:34:43Z', 'labels': {'configmanagement.gke.io/arch': 'csmr', 'configmanagement.gke.io/configmanagement': 'config-management', 'configmanagement.gke.io/system': 'true', 'control-plane': 'controller-manager', 'k8s-app': 'kubernetes-config-management'}, 'annotations': {'deployment.kubernetes.io/revision': '1', 'kubectl.kubernetes.io/last-applied-configuration': '{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"configmanagement.gke.io/arch":"csmr","configmanagement.gke.io/configmanagement":"config-management","configmanagement.gke.io/system":"true","control-plane":"controller-manager","k8s-app":"kubernetes-config-management"},"name":"resource-group-controller-manager","namespace":"resource-group-system","ownerReferences":[{"apiVersion":"configmanagement.gke.io/v1","blockOwnerDeletion":true,"controller":true,"kind":"ConfigManagement","name":"config-management","uid":"3ba193e5-a89c-430d-9bdc-3f8d07e7443b"}]},"spec":{"replicas":1,"selector":{"matchLabels":{"configmanagement.gke.io/arch":"csmr","configsync.gke.io/deployment-name":"resource-group-controller-manager","control-plane":"controller-manager"}},"template":{"metadata":{"labels":{"configmanagement.gke.io/arch":"csmr","configsync.gke.io/deployment-name":"resource-group-controller-manager","control-plane":"controller-manager"}},"spec":{"containers":[{"args":["--metrics-addr=127.0.0.1:8080","--enable-leader-election"],"command":["/resource-group"],"env":[{"name":"OC_RESOURCE_LABELS","value":"k8s.container.name=\\"manager\\""}],"image":"gcr.io/config-management-release/resource-group-controller:v1.18.3-rc.4","name":"manager","resources":{"requests":{"cpu":"100m","memory":"200Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true}},{"args":["--config=/conf/otel-agent-config.yaml"],"command":["/otelcontribcol"],"env":[{"name":"KUBE_POD_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.name"}}},{"name":"KUBE_POD_NAMESPACE","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}},{"name":"KUBE_POD_UID","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.uid"}}},{"name":"KUBE_POD_IP","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"status.podIP"}}},{"name":"KUBE_NODE_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"spec.nodeName"}}},{"name":"KUBE_DEPLOYMENT_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.labels[\'configsync.gke.io/deployment-name\']"}}},{"name":"OTEL_RESOURCE_ATTRIBUTES","value":"k8s.pod.name=$(KUBE_POD_NAME),k8s.pod.namespace=$(KUBE_POD_NAMESPACE),k8s.pod.uid=$(KUBE_POD_UID),k8s.pod.ip=$(KUBE_POD_IP),k8s.node.name=$(KUBE_NODE_NAME),k8s.deployment.name=$(KUBE_DEPLOYMENT_NAME)"}],"image":"gcr.io/config-management-release/otelcontribcol:v0.102.0-gke.6","name":"otel-agent","ports":[{"containerPort":55678},{"containerPort":8888}],"readinessProbe":{"httpGet":{"path":"/","port":13133}},"resources":{"requests":{"cpu":"10m","memory":"100Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true},"volumeMounts":[{"mountPath":"/conf","name":"otel-agent-config-vol"}]}],"securityContext":{"runAsGroup":1000,"runAsNonRoot":true,"runAsUser":1000,"seccompProfile":{"type":"RuntimeDefault"}},"serviceAccountName":"resource-group-sa","terminationGracePeriodSeconds":10,"volumes":[{"configMap":{"name":"resource-group-otel-agent"},"name":"otel-agent-config-vol"}]}}}}\n'}, 'ownerReferences': [{'apiVersion': 'configmanagement.gke.io/v1', 'kind': 'ConfigManagement', 'name': 'config-management', 'uid': '3ba193e5-a89c-430d-9bdc-3f8d07e7443b', 'controller': True, 'blockOwnerDeletion': True}], 'managedFields': [{'manager': 'kubectl-client-side-apply', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:34:43Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'.': {}, 'f:kubectl.kubernetes.io/last-applied-configuration': {}}, 'f:labels': {'.': {}, 'f:configmanagement.gke.io/arch': {}, 'f:configmanagement.gke.io/configmanagement': {}, 'f:configmanagement.gke.io/system': {}, 'f:control-plane': {}, 'f:k8s-app': {}}, 'f:ownerReferences': {'.': {}, 'k:{"uid":"3ba193e5-a89c-430d-9bdc-3f8d07e7443b"}': {}}}, 'f:spec': {'f:progressDeadlineSeconds': {}, 'f:replicas': {}, 'f:revisionHistoryLimit': {}, 'f:selector': {}, 'f:strategy': {'f:rollingUpdate': {'.': {}, 'f:maxSurge': {}, 'f:maxUnavailable': {}}, 'f:type': {}}, 'f:template': {'f:metadata': {'f:labels': {'.': {}, 'f:configmanagement.gke.io/arch': {}, 'f:configsync.gke.io/deployment-name': {}, 'f:control-plane': {}}}, 'f:spec': {'f:containers': {'k:{"name":"manager"}': {'.': {}, 'f:args': {}, 'f:command': {}, 'f:env': {'.': {}, 'k:{"name":"OC_RESOURCE_LABELS"}': {'.': {}, 'f:name': {}, 'f:value': {}}}, 'f:image': {}, 'f:imagePullPolicy': {}, 'f:name': {}, 'f:resources': {'.': {}, 'f:requests': {'.': {}, 'f:cpu': {}, 'f:memory': {}}}, 'f:securityContext': {'.': {}, 'f:allowPrivilegeEscalation': {}, 'f:capabilities': {'.': {}, 'f:drop': {}}, 'f:readOnlyRootFilesystem': {}}, 'f:terminationMessagePath': {}, 'f:terminationMessagePolicy': {}}, 'k:{"name":"otel-agent"}': {'.': {}, 'f:args': {}, 'f:command': {}, 'f:env': {'.': {}, 'k:{"name":"KUBE_DEPLOYMENT_NAME"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}, 'k:{"name":"KUBE_NODE_NAME"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}, 'k:{"name":"KUBE_POD_IP"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}, 'k:{"name":"KUBE_POD_NAME"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}, 'k:{"name":"KUBE_POD_NAMESPACE"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}, 'k:{"name":"KUBE_POD_UID"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}, 'k:{"name":"OTEL_RESOURCE_ATTRIBUTES"}': {'.': {}, 'f:name': {}, 'f:value': {}}}, 'f:image': {}, 'f:imagePullPolicy': {}, 'f:name': {}, 'f:ports': {'.': {}, 'k:{"containerPort":8888,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:protocol': {}}, 'k:{"containerPort":55678,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:protocol': {}}}, 'f:readinessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:httpGet': {'.': {}, 'f:path': {}, 'f:port': {}, 'f:scheme': {}}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:timeoutSeconds': {}}, 'f:resources': {'.': {}, 'f:requests': {'.': {}, 'f:cpu': {}, 'f:memory': {}}}, 'f:securityContext': {'.': {}, 'f:allowPrivilegeEscalation': {}, 'f:capabilities': {'.': {}, 'f:drop': {}}, 'f:readOnlyRootFilesystem': {}}, 'f:terminationMessagePath': {}, 'f:terminationMessagePolicy': {}, 'f:volumeMounts': {'.': {}, 'k:{"mountPath":"/conf"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}}}}, 'f:dnsPolicy': {}, 'f:restartPolicy': {}, 'f:schedulerName': {}, 'f:securityContext': {'.': {}, 'f:runAsGroup': {}, 'f:runAsNonRoot': {}, 'f:runAsUser': {}, 'f:seccompProfile': {'.': {}, 'f:type': {}}}, 'f:serviceAccount': {}, 'f:serviceAccountName': {}, 'f:terminationGracePeriodSeconds': {}, 'f:volumes': {'.': {}, 'k:{"name":"otel-agent-config-vol"}': {'.': {}, 'f:configMap': {'.': {}, 'f:defaultMode': {}, 'f:name': {}}, 'f:name': {}}}}}}}}, {'manager': 'kube-controller-manager', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:34:56Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'f:deployment.kubernetes.io/revision': {}}}, 'f:status': {'f:availableReplicas': {}, 'f:conditions': {'.': {}, 'k:{"type":"Available"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}, 'k:{"type":"Progressing"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}}, 'f:observedGeneration': {}, 'f:readyReplicas': {}, 'f:replicas': {}, 'f:updatedReplicas': {}}}, 'subresource': 'status'}]}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'configmanagement.gke.io/arch': 'csmr', 'configsync.gke.io/deployment-name': 'resource-group-controller-manager', 'control-plane': 'controller-manager'}}, 'template': {'metadata': {'labels': {'configmanagement.gke.io/arch': 'csmr', 'configsync.gke.io/deployment-name': 'resource-group-controller-manager', 'control-plane': 'controller-manager'}}, 'spec': {'volumes': [{'name': 'otel-agent-config-vol', 'configMap': {'name': 'resource-group-otel-agent', 'defaultMode': 420}}], 'containers': [{'name': 'manager', 'image': 'gcr.io/config-management-release/resource-group-controller:v1.18.3-rc.4', 'command': ['/resource-group'], 'args': ['--metrics-addr=127.0.0.1:8080', '--enable-leader-election'], 'env': [{'name': 'OC_RESOURCE_LABELS', 'value': 'k8s.container.name="manager"'}], 'resources': {'requests': {'cpu': '100m', 'memory': '200Mi'}}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'allowPrivilegeEscalation': False}}, {'name': 'otel-agent', 'image': 'gcr.io/config-management-release/otelcontribcol:v0.102.0-gke.6', 'command': ['/otelcontribcol'], 'args': ['--config=/conf/otel-agent-config.yaml'], 'ports': [{'containerPort': 55678, 'protocol': 'TCP'}, {'containerPort': 8888, 'protocol': 'TCP'}], 'env': [{'name': 'KUBE_POD_NAME', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'metadata.name'}}}, {'name': 'KUBE_POD_NAMESPACE', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'metadata.namespace'}}}, {'name': 'KUBE_POD_UID', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'metadata.uid'}}}, {'name': 'KUBE_POD_IP', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'status.podIP'}}}, {'name': 'KUBE_NODE_NAME', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'spec.nodeName'}}}, {'name': 'KUBE_DEPLOYMENT_NAME', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': "metadata.labels['configsync.gke.io/deployment-name']"}}}, {'name': 'OTEL_RESOURCE_ATTRIBUTES', 'value': 'k8s.pod.name=$(KUBE_POD_NAME),k8s.pod.namespace=$(KUBE_POD_NAMESPACE),k8s.pod.uid=$(KUBE_POD_UID),k8s.pod.ip=$(KUBE_POD_IP),k8s.node.name=$(KUBE_NODE_NAME),k8s.deployment.name=$(KUBE_DEPLOYMENT_NAME)'}], 'resources': {'requests': {'cpu': '10m', 'memory': '100Mi'}}, 'volumeMounts': [{'name': 'otel-agent-config-vol', 'mountPath': '/conf'}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 13133, 'scheme': 'HTTP'}, 'timeoutSeconds': 1, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 3}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'allowPrivilegeEscalation': False}}], 'restartPolicy': 'Always', 'terminationGracePeriodSeconds': 10, 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'resource-group-sa', 'serviceAccount': 'resource-group-sa', 'securityContext': {'runAsUser': 1000, 'runAsGroup': 1000, 'runAsNonRoot': True, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'schedulerName': 'default-scheduler'}}, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxUnavailable': '25%', 'maxSurge': '25%'}}, 'revisionHistoryLimit': 10, 'progressDeadlineSeconds': 600}, 'status': {'observedGeneration': 1, 'replicas': 1, 'updatedReplicas': 1, 'readyReplicas': 1, 'availableReplicas': 1, 'conditions': [{'type': 'Available', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:34:56Z', 'lastTransitionTime': '2025-10-01T12:34:56Z', 'reason': 'MinimumReplicasAvailable', 'message': 'Deployment has minimum availability.'}, {'type': 'Progressing', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:34:56Z', 'lastTransitionTime': '2025-10-01T12:34:43Z', 'reason': 'NewReplicaSetAvailable', 'message': 'ReplicaSet "resource-group-controller-manager-5cbd699db6" has successfully progressed.'}]}, 'apiVersion': 'apps/v1', 'kind': 'Deployment'})

TASK [install : Get deployment resources in namespace flux-system] *************
Wednesday 01 October 2025  12:36:30 +0000 (0:00:01.000)       0:07:02.198 ***** 
Wednesday 01 October 2025  12:36:30 +0000 (0:00:01.000)       0:07:02.197 ***** 
ok: [127.0.0.1]

TASK [install : Print deployment resources in namespace flux-system] ***********
Wednesday 01 October 2025  12:36:31 +0000 (0:00:01.081)       0:07:03.279 ***** 
Wednesday 01 October 2025  12:36:31 +0000 (0:00:01.081)       0:07:03.278 ***** 
ok: [127.0.0.1] => {
    "deployment_list.resources": [
        {
            "apiVersion": "apps/v1",
            "kind": "Deployment",
            "metadata": {
                "annotations": {
                    "config.k8s.io/owning-inventory": "215a82444ec3b858ef1be07d464aac87ddee216b-1759322091171903068",
                    "deployment.kubernetes.io/revision": "1",
                    "internal.kpt.dev/upstream-identifier": "apps|Deployment|flux-system|helm-controller",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{\"config.k8s.io/owning-inventory\":\"215a82444ec3b858ef1be07d464aac87ddee216b-1759322091171903068\",\"internal.kpt.dev/upstream-identifier\":\"apps|Deployment|flux-system|helm-controller\"},\"labels\":{\"app.kubernetes.io/component\":\"helm-controller\",\"app.kubernetes.io/part-of\":\"flux\",\"control-plane\":\"controller\"},\"name\":\"helm-controller\",\"namespace\":\"flux-system\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"helm-controller\"}},\"template\":{\"metadata\":{\"annotations\":{\"prometheus.io/port\":\"8080\",\"prometheus.io/scrape\":\"true\"},\"labels\":{\"app\":\"helm-controller\"}},\"spec\":{\"containers\":[{\"args\":[\"--events-addr=http://notification-controller.flux-system.svc.cluster.local./\",\"--watch-all-namespaces\",\"--log-level=info\",\"--log-encoding=json\",\"--enable-leader-election\"],\"env\":[{\"name\":\"RUNTIME_NAMESPACE\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.namespace\"}}},{\"name\":\"GOMAXPROCS\",\"valueFrom\":{\"resourceFieldRef\":{\"containerName\":\"manager\",\"resource\":\"limits.cpu\"}}},{\"name\":\"GOMEMLIMIT\",\"valueFrom\":{\"resourceFieldRef\":{\"containerName\":\"manager\",\"resource\":\"limits.memory\"}}}],\"image\":\"fluxcd/helm-controller:v1.1.0\",\"imagePullPolicy\":\"IfNotPresent\",\"livenessProbe\":{\"httpGet\":{\"path\":\"/healthz\",\"port\":\"healthz\"}},\"name\":\"manager\",\"ports\":[{\"containerPort\":8080,\"name\":\"http-prom\",\"protocol\":\"TCP\"},{\"containerPort\":9440,\"name\":\"healthz\",\"protocol\":\"TCP\"}],\"readinessProbe\":{\"httpGet\":{\"path\":\"/readyz\",\"port\":\"healthz\"}},\"resources\":{\"limits\":{\"cpu\":\"1000m\",\"memory\":\"1Gi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"64Mi\"}},\"securityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"readOnlyRootFilesystem\":true,\"runAsNonRoot\":true,\"seccompProfile\":{\"type\":\"RuntimeDefault\"}},\"volumeMounts\":[{\"mountPath\":\"/tmp\",\"name\":\"temp\"}]}],\"priorityClassName\":\"system-cluster-critical\",\"securityContext\":{\"fsGroup\":1337},\"serviceAccountName\":\"helm-controller\",\"terminationGracePeriodSeconds\":600,\"volumes\":[{\"emptyDir\":{},\"name\":\"temp\"}]}}}}\n"
                },
                "creationTimestamp": "2025-10-01T12:34:54Z",
                "generation": 1,
                "labels": {
                    "app.kubernetes.io/component": "helm-controller",
                    "app.kubernetes.io/part-of": "flux",
                    "control-plane": "controller"
                },
                "managedFields": [
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:config.k8s.io/owning-inventory": {},
                                    "f:internal.kpt.dev/upstream-identifier": {},
                                    "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:app.kubernetes.io/component": {},
                                    "f:app.kubernetes.io/part-of": {},
                                    "f:control-plane": {}
                                }
                            },
                            "f:spec": {
                                "f:progressDeadlineSeconds": {},
                                "f:replicas": {},
                                "f:revisionHistoryLimit": {},
                                "f:selector": {},
                                "f:strategy": {
                                    "f:rollingUpdate": {
                                        ".": {},
                                        "f:maxSurge": {},
                                        "f:maxUnavailable": {}
                                    },
                                    "f:type": {}
                                },
                                "f:template": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:prometheus.io/port": {},
                                            "f:prometheus.io/scrape": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:containers": {
                                            "k:{\"name\":\"manager\"}": {
                                                ".": {},
                                                "f:args": {},
                                                "f:env": {
                                                    ".": {},
                                                    "k:{\"name\":\"GOMAXPROCS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:resourceFieldRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"GOMEMLIMIT\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:resourceFieldRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"RUNTIME_NAMESPACE\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    }
                                                },
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:livenessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:name": {},
                                                "f:ports": {
                                                    ".": {},
                                                    "k:{\"containerPort\":8080,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    },
                                                    "k:{\"containerPort\":9440,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    }
                                                },
                                                "f:readinessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:resources": {
                                                    ".": {},
                                                    "f:limits": {
                                                        ".": {},
                                                        "f:cpu": {},
                                                        "f:memory": {}
                                                    },
                                                    "f:requests": {
                                                        ".": {},
                                                        "f:cpu": {},
                                                        "f:memory": {}
                                                    }
                                                },
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:allowPrivilegeEscalation": {},
                                                    "f:capabilities": {
                                                        ".": {},
                                                        "f:drop": {}
                                                    },
                                                    "f:readOnlyRootFilesystem": {},
                                                    "f:runAsNonRoot": {},
                                                    "f:seccompProfile": {
                                                        ".": {},
                                                        "f:type": {}
                                                    }
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {},
                                                "f:volumeMounts": {
                                                    ".": {},
                                                    "k:{\"mountPath\":\"/tmp\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    }
                                                }
                                            }
                                        },
                                        "f:dnsPolicy": {},
                                        "f:priorityClassName": {},
                                        "f:restartPolicy": {},
                                        "f:schedulerName": {},
                                        "f:securityContext": {
                                            ".": {},
                                            "f:fsGroup": {}
                                        },
                                        "f:serviceAccount": {},
                                        "f:serviceAccountName": {},
                                        "f:terminationGracePeriodSeconds": {},
                                        "f:volumes": {
                                            ".": {},
                                            "k:{\"name\":\"temp\"}": {
                                                ".": {},
                                                "f:emptyDir": {},
                                                "f:name": {}
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "manager": "kubectl",
                        "operation": "Update",
                        "time": "2025-10-01T12:34:54Z"
                    },
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    "f:deployment.kubernetes.io/revision": {}
                                }
                            },
                            "f:status": {
                                "f:availableReplicas": {},
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"Available\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Progressing\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:observedGeneration": {},
                                "f:readyReplicas": {},
                                "f:replicas": {},
                                "f:updatedReplicas": {}
                            }
                        },
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "subresource": "status",
                        "time": "2025-10-01T12:35:01Z"
                    }
                ],
                "name": "helm-controller",
                "namespace": "flux-system",
                "resourceVersion": "4991",
                "uid": "adc11415-7eb9-4678-a3bf-a8b0bc4d2d4c"
            },
            "spec": {
                "progressDeadlineSeconds": 600,
                "replicas": 1,
                "revisionHistoryLimit": 10,
                "selector": {
                    "matchLabels": {
                        "app": "helm-controller"
                    }
                },
                "strategy": {
                    "rollingUpdate": {
                        "maxSurge": "25%",
                        "maxUnavailable": "25%"
                    },
                    "type": "RollingUpdate"
                },
                "template": {
                    "metadata": {
                        "annotations": {
                            "prometheus.io/port": "8080",
                            "prometheus.io/scrape": "true"
                        },
                        "labels": {
                            "app": "helm-controller"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "args": [
                                    "--events-addr=http://notification-controller.flux-system.svc.cluster.local./",
                                    "--watch-all-namespaces",
                                    "--log-level=info",
                                    "--log-encoding=json",
                                    "--enable-leader-election"
                                ],
                                "env": [
                                    {
                                        "name": "RUNTIME_NAMESPACE",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            }
                                        }
                                    },
                                    {
                                        "name": "GOMAXPROCS",
                                        "valueFrom": {
                                            "resourceFieldRef": {
                                                "containerName": "manager",
                                                "divisor": "0",
                                                "resource": "limits.cpu"
                                            }
                                        }
                                    },
                                    {
                                        "name": "GOMEMLIMIT",
                                        "valueFrom": {
                                            "resourceFieldRef": {
                                                "containerName": "manager",
                                                "divisor": "0",
                                                "resource": "limits.memory"
                                            }
                                        }
                                    }
                                ],
                                "image": "fluxcd/helm-controller:v1.1.0",
                                "imagePullPolicy": "IfNotPresent",
                                "livenessProbe": {
                                    "failureThreshold": 3,
                                    "httpGet": {
                                        "path": "/healthz",
                                        "port": "healthz",
                                        "scheme": "HTTP"
                                    },
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 1
                                },
                                "name": "manager",
                                "ports": [
                                    {
                                        "containerPort": 8080,
                                        "name": "http-prom",
                                        "protocol": "TCP"
                                    },
                                    {
                                        "containerPort": 9440,
                                        "name": "healthz",
                                        "protocol": "TCP"
                                    }
                                ],
                                "readinessProbe": {
                                    "failureThreshold": 3,
                                    "httpGet": {
                                        "path": "/readyz",
                                        "port": "healthz",
                                        "scheme": "HTTP"
                                    },
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 1
                                },
                                "resources": {
                                    "limits": {
                                        "cpu": "1",
                                        "memory": "1Gi"
                                    },
                                    "requests": {
                                        "cpu": "100m",
                                        "memory": "64Mi"
                                    }
                                },
                                "securityContext": {
                                    "allowPrivilegeEscalation": false,
                                    "capabilities": {
                                        "drop": [
                                            "ALL"
                                        ]
                                    },
                                    "readOnlyRootFilesystem": true,
                                    "runAsNonRoot": true,
                                    "seccompProfile": {
                                        "type": "RuntimeDefault"
                                    }
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/tmp",
                                        "name": "temp"
                                    }
                                ]
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "priorityClassName": "system-cluster-critical",
                        "restartPolicy": "Always",
                        "schedulerName": "default-scheduler",
                        "securityContext": {
                            "fsGroup": 1337
                        },
                        "serviceAccount": "helm-controller",
                        "serviceAccountName": "helm-controller",
                        "terminationGracePeriodSeconds": 600,
                        "volumes": [
                            {
                                "emptyDir": {},
                                "name": "temp"
                            }
                        ]
                    }
                }
            },
            "status": {
                "availableReplicas": 1,
                "conditions": [
                    {
                        "lastTransitionTime": "2025-10-01T12:35:01Z",
                        "lastUpdateTime": "2025-10-01T12:35:01Z",
                        "message": "Deployment has minimum availability.",
                        "reason": "MinimumReplicasAvailable",
                        "status": "True",
                        "type": "Available"
                    },
                    {
                        "lastTransitionTime": "2025-10-01T12:34:54Z",
                        "lastUpdateTime": "2025-10-01T12:35:01Z",
                        "message": "ReplicaSet \"helm-controller-76d6877585\" has successfully progressed.",
                        "reason": "NewReplicaSetAvailable",
                        "status": "True",
                        "type": "Progressing"
                    }
                ],
                "observedGeneration": 1,
                "readyReplicas": 1,
                "replicas": 1,
                "updatedReplicas": 1
            }
        },
        {
            "apiVersion": "apps/v1",
            "kind": "Deployment",
            "metadata": {
                "annotations": {
                    "config.k8s.io/owning-inventory": "215a82444ec3b858ef1be07d464aac87ddee216b-1759322091171903068",
                    "deployment.kubernetes.io/revision": "1",
                    "internal.kpt.dev/upstream-identifier": "apps|Deployment|flux-system|kustomize-controller",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{\"config.k8s.io/owning-inventory\":\"215a82444ec3b858ef1be07d464aac87ddee216b-1759322091171903068\",\"internal.kpt.dev/upstream-identifier\":\"apps|Deployment|flux-system|kustomize-controller\"},\"labels\":{\"app.kubernetes.io/component\":\"kustomize-controller\",\"app.kubernetes.io/part-of\":\"flux\",\"control-plane\":\"controller\"},\"name\":\"kustomize-controller\",\"namespace\":\"flux-system\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"kustomize-controller\"}},\"template\":{\"metadata\":{\"annotations\":{\"prometheus.io/port\":\"8080\",\"prometheus.io/scrape\":\"true\"},\"labels\":{\"app\":\"kustomize-controller\"}},\"spec\":{\"containers\":[{\"args\":[\"--events-addr=http://notification-controller.flux-system.svc.cluster.local./\",\"--watch-all-namespaces\",\"--log-level=info\",\"--log-encoding=json\",\"--enable-leader-election\"],\"env\":[{\"name\":\"RUNTIME_NAMESPACE\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.namespace\"}}},{\"name\":\"GOMAXPROCS\",\"valueFrom\":{\"resourceFieldRef\":{\"containerName\":\"manager\",\"resource\":\"limits.cpu\"}}},{\"name\":\"GOMEMLIMIT\",\"valueFrom\":{\"resourceFieldRef\":{\"containerName\":\"manager\",\"resource\":\"limits.memory\"}}}],\"image\":\"fluxcd/kustomize-controller:v1.4.0\",\"imagePullPolicy\":\"IfNotPresent\",\"livenessProbe\":{\"httpGet\":{\"path\":\"/healthz\",\"port\":\"healthz\"}},\"name\":\"manager\",\"ports\":[{\"containerPort\":8080,\"name\":\"http-prom\",\"protocol\":\"TCP\"},{\"containerPort\":9440,\"name\":\"healthz\",\"protocol\":\"TCP\"}],\"readinessProbe\":{\"httpGet\":{\"path\":\"/readyz\",\"port\":\"healthz\"}},\"resources\":{\"limits\":{\"cpu\":\"1000m\",\"memory\":\"1Gi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"64Mi\"}},\"securityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"readOnlyRootFilesystem\":true,\"runAsNonRoot\":true,\"seccompProfile\":{\"type\":\"RuntimeDefault\"}},\"volumeMounts\":[{\"mountPath\":\"/tmp\",\"name\":\"temp\"}]}],\"priorityClassName\":\"system-cluster-critical\",\"securityContext\":{\"fsGroup\":1337},\"serviceAccountName\":\"kustomize-controller\",\"terminationGracePeriodSeconds\":60,\"volumes\":[{\"emptyDir\":{},\"name\":\"temp\"}]}}}}\n"
                },
                "creationTimestamp": "2025-10-01T12:34:54Z",
                "generation": 1,
                "labels": {
                    "app.kubernetes.io/component": "kustomize-controller",
                    "app.kubernetes.io/part-of": "flux",
                    "control-plane": "controller"
                },
                "managedFields": [
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:config.k8s.io/owning-inventory": {},
                                    "f:internal.kpt.dev/upstream-identifier": {},
                                    "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:app.kubernetes.io/component": {},
                                    "f:app.kubernetes.io/part-of": {},
                                    "f:control-plane": {}
                                }
                            },
                            "f:spec": {
                                "f:progressDeadlineSeconds": {},
                                "f:replicas": {},
                                "f:revisionHistoryLimit": {},
                                "f:selector": {},
                                "f:strategy": {
                                    "f:rollingUpdate": {
                                        ".": {},
                                        "f:maxSurge": {},
                                        "f:maxUnavailable": {}
                                    },
                                    "f:type": {}
                                },
                                "f:template": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:prometheus.io/port": {},
                                            "f:prometheus.io/scrape": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:containers": {
                                            "k:{\"name\":\"manager\"}": {
                                                ".": {},
                                                "f:args": {},
                                                "f:env": {
                                                    ".": {},
                                                    "k:{\"name\":\"GOMAXPROCS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:resourceFieldRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"GOMEMLIMIT\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:resourceFieldRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"RUNTIME_NAMESPACE\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    }
                                                },
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:livenessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:name": {},
                                                "f:ports": {
                                                    ".": {},
                                                    "k:{\"containerPort\":8080,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    },
                                                    "k:{\"containerPort\":9440,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    }
                                                },
                                                "f:readinessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:resources": {
                                                    ".": {},
                                                    "f:limits": {
                                                        ".": {},
                                                        "f:cpu": {},
                                                        "f:memory": {}
                                                    },
                                                    "f:requests": {
                                                        ".": {},
                                                        "f:cpu": {},
                                                        "f:memory": {}
                                                    }
                                                },
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:allowPrivilegeEscalation": {},
                                                    "f:capabilities": {
                                                        ".": {},
                                                        "f:drop": {}
                                                    },
                                                    "f:readOnlyRootFilesystem": {},
                                                    "f:runAsNonRoot": {},
                                                    "f:seccompProfile": {
                                                        ".": {},
                                                        "f:type": {}
                                                    }
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {},
                                                "f:volumeMounts": {
                                                    ".": {},
                                                    "k:{\"mountPath\":\"/tmp\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    }
                                                }
                                            }
                                        },
                                        "f:dnsPolicy": {},
                                        "f:priorityClassName": {},
                                        "f:restartPolicy": {},
                                        "f:schedulerName": {},
                                        "f:securityContext": {
                                            ".": {},
                                            "f:fsGroup": {}
                                        },
                                        "f:serviceAccount": {},
                                        "f:serviceAccountName": {},
                                        "f:terminationGracePeriodSeconds": {},
                                        "f:volumes": {
                                            ".": {},
                                            "k:{\"name\":\"temp\"}": {
                                                ".": {},
                                                "f:emptyDir": {},
                                                "f:name": {}
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "manager": "kubectl",
                        "operation": "Update",
                        "time": "2025-10-01T12:34:54Z"
                    },
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    "f:deployment.kubernetes.io/revision": {}
                                }
                            },
                            "f:status": {
                                "f:availableReplicas": {},
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"Available\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Progressing\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:observedGeneration": {},
                                "f:readyReplicas": {},
                                "f:replicas": {},
                                "f:updatedReplicas": {}
                            }
                        },
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "subresource": "status",
                        "time": "2025-10-01T12:35:04Z"
                    }
                ],
                "name": "kustomize-controller",
                "namespace": "flux-system",
                "resourceVersion": "5020",
                "uid": "00fb3b60-a73a-4c61-86fb-3f60b93381bc"
            },
            "spec": {
                "progressDeadlineSeconds": 600,
                "replicas": 1,
                "revisionHistoryLimit": 10,
                "selector": {
                    "matchLabels": {
                        "app": "kustomize-controller"
                    }
                },
                "strategy": {
                    "rollingUpdate": {
                        "maxSurge": "25%",
                        "maxUnavailable": "25%"
                    },
                    "type": "RollingUpdate"
                },
                "template": {
                    "metadata": {
                        "annotations": {
                            "prometheus.io/port": "8080",
                            "prometheus.io/scrape": "true"
                        },
                        "labels": {
                            "app": "kustomize-controller"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "args": [
                                    "--events-addr=http://notification-controller.flux-system.svc.cluster.local./",
                                    "--watch-all-namespaces",
                                    "--log-level=info",
                                    "--log-encoding=json",
                                    "--enable-leader-election"
                                ],
                                "env": [
                                    {
                                        "name": "RUNTIME_NAMESPACE",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            }
                                        }
                                    },
                                    {
                                        "name": "GOMAXPROCS",
                                        "valueFrom": {
                                            "resourceFieldRef": {
                                                "containerName": "manager",
                                                "divisor": "0",
                                                "resource": "limits.cpu"
                                            }
                                        }
                                    },
                                    {
                                        "name": "GOMEMLIMIT",
                                        "valueFrom": {
                                            "resourceFieldRef": {
                                                "containerName": "manager",
                                                "divisor": "0",
                                                "resource": "limits.memory"
                                            }
                                        }
                                    }
                                ],
                                "image": "fluxcd/kustomize-controller:v1.4.0",
                                "imagePullPolicy": "IfNotPresent",
                                "livenessProbe": {
                                    "failureThreshold": 3,
                                    "httpGet": {
                                        "path": "/healthz",
                                        "port": "healthz",
                                        "scheme": "HTTP"
                                    },
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 1
                                },
                                "name": "manager",
                                "ports": [
                                    {
                                        "containerPort": 8080,
                                        "name": "http-prom",
                                        "protocol": "TCP"
                                    },
                                    {
                                        "containerPort": 9440,
                                        "name": "healthz",
                                        "protocol": "TCP"
                                    }
                                ],
                                "readinessProbe": {
                                    "failureThreshold": 3,
                                    "httpGet": {
                                        "path": "/readyz",
                                        "port": "healthz",
                                        "scheme": "HTTP"
                                    },
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 1
                                },
                                "resources": {
                                    "limits": {
                                        "cpu": "1",
                                        "memory": "1Gi"
                                    },
                                    "requests": {
                                        "cpu": "100m",
                                        "memory": "64Mi"
                                    }
                                },
                                "securityContext": {
                                    "allowPrivilegeEscalation": false,
                                    "capabilities": {
                                        "drop": [
                                            "ALL"
                                        ]
                                    },
                                    "readOnlyRootFilesystem": true,
                                    "runAsNonRoot": true,
                                    "seccompProfile": {
                                        "type": "RuntimeDefault"
                                    }
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/tmp",
                                        "name": "temp"
                                    }
                                ]
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "priorityClassName": "system-cluster-critical",
                        "restartPolicy": "Always",
                        "schedulerName": "default-scheduler",
                        "securityContext": {
                            "fsGroup": 1337
                        },
                        "serviceAccount": "kustomize-controller",
                        "serviceAccountName": "kustomize-controller",
                        "terminationGracePeriodSeconds": 60,
                        "volumes": [
                            {
                                "emptyDir": {},
                                "name": "temp"
                            }
                        ]
                    }
                }
            },
            "status": {
                "availableReplicas": 1,
                "conditions": [
                    {
                        "lastTransitionTime": "2025-10-01T12:35:04Z",
                        "lastUpdateTime": "2025-10-01T12:35:04Z",
                        "message": "Deployment has minimum availability.",
                        "reason": "MinimumReplicasAvailable",
                        "status": "True",
                        "type": "Available"
                    },
                    {
                        "lastTransitionTime": "2025-10-01T12:34:54Z",
                        "lastUpdateTime": "2025-10-01T12:35:04Z",
                        "message": "ReplicaSet \"kustomize-controller-775d5d8848\" has successfully progressed.",
                        "reason": "NewReplicaSetAvailable",
                        "status": "True",
                        "type": "Progressing"
                    }
                ],
                "observedGeneration": 1,
                "readyReplicas": 1,
                "replicas": 1,
                "updatedReplicas": 1
            }
        },
        {
            "apiVersion": "apps/v1",
            "kind": "Deployment",
            "metadata": {
                "annotations": {
                    "config.k8s.io/owning-inventory": "215a82444ec3b858ef1be07d464aac87ddee216b-1759322091171903068",
                    "deployment.kubernetes.io/revision": "1",
                    "internal.kpt.dev/upstream-identifier": "apps|Deployment|flux-system|notification-controller",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{\"config.k8s.io/owning-inventory\":\"215a82444ec3b858ef1be07d464aac87ddee216b-1759322091171903068\",\"internal.kpt.dev/upstream-identifier\":\"apps|Deployment|flux-system|notification-controller\"},\"labels\":{\"app.kubernetes.io/component\":\"notification-controller\",\"app.kubernetes.io/part-of\":\"flux\",\"control-plane\":\"controller\"},\"name\":\"notification-controller\",\"namespace\":\"flux-system\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"notification-controller\"}},\"template\":{\"metadata\":{\"annotations\":{\"prometheus.io/port\":\"8080\",\"prometheus.io/scrape\":\"true\"},\"labels\":{\"app\":\"notification-controller\"}},\"spec\":{\"containers\":[{\"args\":[\"--watch-all-namespaces\",\"--log-level=info\",\"--log-encoding=json\",\"--enable-leader-election\"],\"env\":[{\"name\":\"RUNTIME_NAMESPACE\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.namespace\"}}},{\"name\":\"GOMAXPROCS\",\"valueFrom\":{\"resourceFieldRef\":{\"containerName\":\"manager\",\"resource\":\"limits.cpu\"}}},{\"name\":\"GOMEMLIMIT\",\"valueFrom\":{\"resourceFieldRef\":{\"containerName\":\"manager\",\"resource\":\"limits.memory\"}}}],\"image\":\"fluxcd/notification-controller:v1.4.0\",\"imagePullPolicy\":\"IfNotPresent\",\"livenessProbe\":{\"httpGet\":{\"path\":\"/healthz\",\"port\":\"healthz\"}},\"name\":\"manager\",\"ports\":[{\"containerPort\":9090,\"name\":\"http\",\"protocol\":\"TCP\"},{\"containerPort\":9292,\"name\":\"http-webhook\",\"protocol\":\"TCP\"},{\"containerPort\":8080,\"name\":\"http-prom\",\"protocol\":\"TCP\"},{\"containerPort\":9440,\"name\":\"healthz\",\"protocol\":\"TCP\"}],\"readinessProbe\":{\"httpGet\":{\"path\":\"/readyz\",\"port\":\"healthz\"}},\"resources\":{\"limits\":{\"cpu\":\"1000m\",\"memory\":\"1Gi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"64Mi\"}},\"securityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"readOnlyRootFilesystem\":true,\"runAsNonRoot\":true,\"seccompProfile\":{\"type\":\"RuntimeDefault\"}},\"volumeMounts\":[{\"mountPath\":\"/tmp\",\"name\":\"temp\"}]}],\"securityContext\":{\"fsGroup\":1337},\"serviceAccountName\":\"notification-controller\",\"terminationGracePeriodSeconds\":10,\"volumes\":[{\"emptyDir\":{},\"name\":\"temp\"}]}}}}\n"
                },
                "creationTimestamp": "2025-10-01T12:34:54Z",
                "generation": 1,
                "labels": {
                    "app.kubernetes.io/component": "notification-controller",
                    "app.kubernetes.io/part-of": "flux",
                    "control-plane": "controller"
                },
                "managedFields": [
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:config.k8s.io/owning-inventory": {},
                                    "f:internal.kpt.dev/upstream-identifier": {},
                                    "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:app.kubernetes.io/component": {},
                                    "f:app.kubernetes.io/part-of": {},
                                    "f:control-plane": {}
                                }
                            },
                            "f:spec": {
                                "f:progressDeadlineSeconds": {},
                                "f:replicas": {},
                                "f:revisionHistoryLimit": {},
                                "f:selector": {},
                                "f:strategy": {
                                    "f:rollingUpdate": {
                                        ".": {},
                                        "f:maxSurge": {},
                                        "f:maxUnavailable": {}
                                    },
                                    "f:type": {}
                                },
                                "f:template": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:prometheus.io/port": {},
                                            "f:prometheus.io/scrape": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:containers": {
                                            "k:{\"name\":\"manager\"}": {
                                                ".": {},
                                                "f:args": {},
                                                "f:env": {
                                                    ".": {},
                                                    "k:{\"name\":\"GOMAXPROCS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:resourceFieldRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"GOMEMLIMIT\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:resourceFieldRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"RUNTIME_NAMESPACE\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    }
                                                },
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:livenessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:name": {},
                                                "f:ports": {
                                                    ".": {},
                                                    "k:{\"containerPort\":8080,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    },
                                                    "k:{\"containerPort\":9090,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    },
                                                    "k:{\"containerPort\":9292,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    },
                                                    "k:{\"containerPort\":9440,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    }
                                                },
                                                "f:readinessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:resources": {
                                                    ".": {},
                                                    "f:limits": {
                                                        ".": {},
                                                        "f:cpu": {},
                                                        "f:memory": {}
                                                    },
                                                    "f:requests": {
                                                        ".": {},
                                                        "f:cpu": {},
                                                        "f:memory": {}
                                                    }
                                                },
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:allowPrivilegeEscalation": {},
                                                    "f:capabilities": {
                                                        ".": {},
                                                        "f:drop": {}
                                                    },
                                                    "f:readOnlyRootFilesystem": {},
                                                    "f:runAsNonRoot": {},
                                                    "f:seccompProfile": {
                                                        ".": {},
                                                        "f:type": {}
                                                    }
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {},
                                                "f:volumeMounts": {
                                                    ".": {},
                                                    "k:{\"mountPath\":\"/tmp\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    }
                                                }
                                            }
                                        },
                                        "f:dnsPolicy": {},
                                        "f:restartPolicy": {},
                                        "f:schedulerName": {},
                                        "f:securityContext": {
                                            ".": {},
                                            "f:fsGroup": {}
                                        },
                                        "f:serviceAccount": {},
                                        "f:serviceAccountName": {},
                                        "f:terminationGracePeriodSeconds": {},
                                        "f:volumes": {
                                            ".": {},
                                            "k:{\"name\":\"temp\"}": {
                                                ".": {},
                                                "f:emptyDir": {},
                                                "f:name": {}
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "manager": "kubectl",
                        "operation": "Update",
                        "time": "2025-10-01T12:34:54Z"
                    },
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    "f:deployment.kubernetes.io/revision": {}
                                }
                            },
                            "f:status": {
                                "f:availableReplicas": {},
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"Available\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Progressing\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:observedGeneration": {},
                                "f:readyReplicas": {},
                                "f:replicas": {},
                                "f:updatedReplicas": {}
                            }
                        },
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "subresource": "status",
                        "time": "2025-10-01T12:35:09Z"
                    }
                ],
                "name": "notification-controller",
                "namespace": "flux-system",
                "resourceVersion": "5100",
                "uid": "1673445f-0f90-40a9-b84d-7bdb9962cb3e"
            },
            "spec": {
                "progressDeadlineSeconds": 600,
                "replicas": 1,
                "revisionHistoryLimit": 10,
                "selector": {
                    "matchLabels": {
                        "app": "notification-controller"
                    }
                },
                "strategy": {
                    "rollingUpdate": {
                        "maxSurge": "25%",
                        "maxUnavailable": "25%"
                    },
                    "type": "RollingUpdate"
                },
                "template": {
                    "metadata": {
                        "annotations": {
                            "prometheus.io/port": "8080",
                            "prometheus.io/scrape": "true"
                        },
                        "labels": {
                            "app": "notification-controller"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "args": [
                                    "--watch-all-namespaces",
                                    "--log-level=info",
                                    "--log-encoding=json",
                                    "--enable-leader-election"
                                ],
                                "env": [
                                    {
                                        "name": "RUNTIME_NAMESPACE",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            }
                                        }
                                    },
                                    {
                                        "name": "GOMAXPROCS",
                                        "valueFrom": {
                                            "resourceFieldRef": {
                                                "containerName": "manager",
                                                "divisor": "0",
                                                "resource": "limits.cpu"
                                            }
                                        }
                                    },
                                    {
                                        "name": "GOMEMLIMIT",
                                        "valueFrom": {
                                            "resourceFieldRef": {
                                                "containerName": "manager",
                                                "divisor": "0",
                                                "resource": "limits.memory"
                                            }
                                        }
                                    }
                                ],
                                "image": "fluxcd/notification-controller:v1.4.0",
                                "imagePullPolicy": "IfNotPresent",
                                "livenessProbe": {
                                    "failureThreshold": 3,
                                    "httpGet": {
                                        "path": "/healthz",
                                        "port": "healthz",
                                        "scheme": "HTTP"
                                    },
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 1
                                },
                                "name": "manager",
                                "ports": [
                                    {
                                        "containerPort": 9090,
                                        "name": "http",
                                        "protocol": "TCP"
                                    },
                                    {
                                        "containerPort": 9292,
                                        "name": "http-webhook",
                                        "protocol": "TCP"
                                    },
                                    {
                                        "containerPort": 8080,
                                        "name": "http-prom",
                                        "protocol": "TCP"
                                    },
                                    {
                                        "containerPort": 9440,
                                        "name": "healthz",
                                        "protocol": "TCP"
                                    }
                                ],
                                "readinessProbe": {
                                    "failureThreshold": 3,
                                    "httpGet": {
                                        "path": "/readyz",
                                        "port": "healthz",
                                        "scheme": "HTTP"
                                    },
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 1
                                },
                                "resources": {
                                    "limits": {
                                        "cpu": "1",
                                        "memory": "1Gi"
                                    },
                                    "requests": {
                                        "cpu": "100m",
                                        "memory": "64Mi"
                                    }
                                },
                                "securityContext": {
                                    "allowPrivilegeEscalation": false,
                                    "capabilities": {
                                        "drop": [
                                            "ALL"
                                        ]
                                    },
                                    "readOnlyRootFilesystem": true,
                                    "runAsNonRoot": true,
                                    "seccompProfile": {
                                        "type": "RuntimeDefault"
                                    }
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/tmp",
                                        "name": "temp"
                                    }
                                ]
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "restartPolicy": "Always",
                        "schedulerName": "default-scheduler",
                        "securityContext": {
                            "fsGroup": 1337
                        },
                        "serviceAccount": "notification-controller",
                        "serviceAccountName": "notification-controller",
                        "terminationGracePeriodSeconds": 10,
                        "volumes": [
                            {
                                "emptyDir": {},
                                "name": "temp"
                            }
                        ]
                    }
                }
            },
            "status": {
                "availableReplicas": 1,
                "conditions": [
                    {
                        "lastTransitionTime": "2025-10-01T12:35:09Z",
                        "lastUpdateTime": "2025-10-01T12:35:09Z",
                        "message": "Deployment has minimum availability.",
                        "reason": "MinimumReplicasAvailable",
                        "status": "True",
                        "type": "Available"
                    },
                    {
                        "lastTransitionTime": "2025-10-01T12:34:54Z",
                        "lastUpdateTime": "2025-10-01T12:35:09Z",
                        "message": "ReplicaSet \"notification-controller-68dbdcbb4\" has successfully progressed.",
                        "reason": "NewReplicaSetAvailable",
                        "status": "True",
                        "type": "Progressing"
                    }
                ],
                "observedGeneration": 1,
                "readyReplicas": 1,
                "replicas": 1,
                "updatedReplicas": 1
            }
        },
        {
            "apiVersion": "apps/v1",
            "kind": "Deployment",
            "metadata": {
                "annotations": {
                    "config.k8s.io/owning-inventory": "215a82444ec3b858ef1be07d464aac87ddee216b-1759322091171903068",
                    "deployment.kubernetes.io/revision": "1",
                    "internal.kpt.dev/upstream-identifier": "apps|Deployment|flux-system|source-controller",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{\"config.k8s.io/owning-inventory\":\"215a82444ec3b858ef1be07d464aac87ddee216b-1759322091171903068\",\"internal.kpt.dev/upstream-identifier\":\"apps|Deployment|flux-system|source-controller\"},\"labels\":{\"app.kubernetes.io/component\":\"source-controller\",\"app.kubernetes.io/part-of\":\"flux\",\"control-plane\":\"controller\"},\"name\":\"source-controller\",\"namespace\":\"flux-system\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"source-controller\"}},\"strategy\":{\"type\":\"Recreate\"},\"template\":{\"metadata\":{\"annotations\":{\"prometheus.io/port\":\"8080\",\"prometheus.io/scrape\":\"true\"},\"labels\":{\"app\":\"source-controller\"}},\"spec\":{\"containers\":[{\"args\":[\"--events-addr=http://notification-controller.flux-system.svc.cluster.local./\",\"--watch-all-namespaces\",\"--log-level=info\",\"--log-encoding=json\",\"--enable-leader-election\",\"--storage-path=/data\",\"--storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.\"],\"env\":[{\"name\":\"RUNTIME_NAMESPACE\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.namespace\"}}},{\"name\":\"TUF_ROOT\",\"value\":\"/tmp/.sigstore\"},{\"name\":\"GOMAXPROCS\",\"valueFrom\":{\"resourceFieldRef\":{\"containerName\":\"manager\",\"resource\":\"limits.cpu\"}}},{\"name\":\"GOMEMLIMIT\",\"valueFrom\":{\"resourceFieldRef\":{\"containerName\":\"manager\",\"resource\":\"limits.memory\"}}}],\"image\":\"fluxcd/source-controller:v1.4.1\",\"imagePullPolicy\":\"IfNotPresent\",\"livenessProbe\":{\"httpGet\":{\"path\":\"/healthz\",\"port\":\"healthz\"}},\"name\":\"manager\",\"ports\":[{\"containerPort\":9090,\"name\":\"http\",\"protocol\":\"TCP\"},{\"containerPort\":8080,\"name\":\"http-prom\",\"protocol\":\"TCP\"},{\"containerPort\":9440,\"name\":\"healthz\",\"protocol\":\"TCP\"}],\"readinessProbe\":{\"httpGet\":{\"path\":\"/\",\"port\":\"http\"}},\"resources\":{\"limits\":{\"cpu\":\"1000m\",\"memory\":\"1Gi\"},\"requests\":{\"cpu\":\"50m\",\"memory\":\"64Mi\"}},\"securityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"readOnlyRootFilesystem\":true,\"runAsNonRoot\":true,\"seccompProfile\":{\"type\":\"RuntimeDefault\"}},\"volumeMounts\":[{\"mountPath\":\"/data\",\"name\":\"data\"},{\"mountPath\":\"/tmp\",\"name\":\"tmp\"}]}],\"priorityClassName\":\"system-cluster-critical\",\"securityContext\":{\"fsGroup\":1337},\"serviceAccountName\":\"source-controller\",\"terminationGracePeriodSeconds\":10,\"volumes\":[{\"emptyDir\":{},\"name\":\"data\"},{\"emptyDir\":{},\"name\":\"tmp\"}]}}}}\n"
                },
                "creationTimestamp": "2025-10-01T12:34:54Z",
                "generation": 1,
                "labels": {
                    "app.kubernetes.io/component": "source-controller",
                    "app.kubernetes.io/part-of": "flux",
                    "control-plane": "controller"
                },
                "managedFields": [
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:config.k8s.io/owning-inventory": {},
                                    "f:internal.kpt.dev/upstream-identifier": {},
                                    "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:app.kubernetes.io/component": {},
                                    "f:app.kubernetes.io/part-of": {},
                                    "f:control-plane": {}
                                }
                            },
                            "f:spec": {
                                "f:progressDeadlineSeconds": {},
                                "f:replicas": {},
                                "f:revisionHistoryLimit": {},
                                "f:selector": {},
                                "f:strategy": {
                                    "f:type": {}
                                },
                                "f:template": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:prometheus.io/port": {},
                                            "f:prometheus.io/scrape": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:containers": {
                                            "k:{\"name\":\"manager\"}": {
                                                ".": {},
                                                "f:args": {},
                                                "f:env": {
                                                    ".": {},
                                                    "k:{\"name\":\"GOMAXPROCS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:resourceFieldRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"GOMEMLIMIT\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:resourceFieldRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"RUNTIME_NAMESPACE\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"TUF_ROOT\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:value": {}
                                                    }
                                                },
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:livenessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:name": {},
                                                "f:ports": {
                                                    ".": {},
                                                    "k:{\"containerPort\":8080,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    },
                                                    "k:{\"containerPort\":9090,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    },
                                                    "k:{\"containerPort\":9440,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    }
                                                },
                                                "f:readinessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:resources": {
                                                    ".": {},
                                                    "f:limits": {
                                                        ".": {},
                                                        "f:cpu": {},
                                                        "f:memory": {}
                                                    },
                                                    "f:requests": {
                                                        ".": {},
                                                        "f:cpu": {},
                                                        "f:memory": {}
                                                    }
                                                },
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:allowPrivilegeEscalation": {},
                                                    "f:capabilities": {
                                                        ".": {},
                                                        "f:drop": {}
                                                    },
                                                    "f:readOnlyRootFilesystem": {},
                                                    "f:runAsNonRoot": {},
                                                    "f:seccompProfile": {
                                                        ".": {},
                                                        "f:type": {}
                                                    }
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {},
                                                "f:volumeMounts": {
                                                    ".": {},
                                                    "k:{\"mountPath\":\"/data\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    },
                                                    "k:{\"mountPath\":\"/tmp\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    }
                                                }
                                            }
                                        },
                                        "f:dnsPolicy": {},
                                        "f:priorityClassName": {},
                                        "f:restartPolicy": {},
                                        "f:schedulerName": {},
                                        "f:securityContext": {
                                            ".": {},
                                            "f:fsGroup": {}
                                        },
                                        "f:serviceAccount": {},
                                        "f:serviceAccountName": {},
                                        "f:terminationGracePeriodSeconds": {},
                                        "f:volumes": {
                                            ".": {},
                                            "k:{\"name\":\"data\"}": {
                                                ".": {},
                                                "f:emptyDir": {},
                                                "f:name": {}
                                            },
                                            "k:{\"name\":\"tmp\"}": {
                                                ".": {},
                                                "f:emptyDir": {},
                                                "f:name": {}
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "manager": "kubectl",
                        "operation": "Update",
                        "time": "2025-10-01T12:34:54Z"
                    },
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    "f:deployment.kubernetes.io/revision": {}
                                }
                            },
                            "f:status": {
                                "f:availableReplicas": {},
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"Available\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Progressing\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:observedGeneration": {},
                                "f:readyReplicas": {},
                                "f:replicas": {},
                                "f:updatedReplicas": {}
                            }
                        },
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "subresource": "status",
                        "time": "2025-10-01T12:35:07Z"
                    }
                ],
                "name": "source-controller",
                "namespace": "flux-system",
                "resourceVersion": "5056",
                "uid": "66debfaa-2b65-4c30-a443-1e989a8a3c4c"
            },
            "spec": {
                "progressDeadlineSeconds": 600,
                "replicas": 1,
                "revisionHistoryLimit": 10,
                "selector": {
                    "matchLabels": {
                        "app": "source-controller"
                    }
                },
                "strategy": {
                    "type": "Recreate"
                },
                "template": {
                    "metadata": {
                        "annotations": {
                            "prometheus.io/port": "8080",
                            "prometheus.io/scrape": "true"
                        },
                        "labels": {
                            "app": "source-controller"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "args": [
                                    "--events-addr=http://notification-controller.flux-system.svc.cluster.local./",
                                    "--watch-all-namespaces",
                                    "--log-level=info",
                                    "--log-encoding=json",
                                    "--enable-leader-election",
                                    "--storage-path=/data",
                                    "--storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local."
                                ],
                                "env": [
                                    {
                                        "name": "RUNTIME_NAMESPACE",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            }
                                        }
                                    },
                                    {
                                        "name": "TUF_ROOT",
                                        "value": "/tmp/.sigstore"
                                    },
                                    {
                                        "name": "GOMAXPROCS",
                                        "valueFrom": {
                                            "resourceFieldRef": {
                                                "containerName": "manager",
                                                "divisor": "0",
                                                "resource": "limits.cpu"
                                            }
                                        }
                                    },
                                    {
                                        "name": "GOMEMLIMIT",
                                        "valueFrom": {
                                            "resourceFieldRef": {
                                                "containerName": "manager",
                                                "divisor": "0",
                                                "resource": "limits.memory"
                                            }
                                        }
                                    }
                                ],
                                "image": "fluxcd/source-controller:v1.4.1",
                                "imagePullPolicy": "IfNotPresent",
                                "livenessProbe": {
                                    "failureThreshold": 3,
                                    "httpGet": {
                                        "path": "/healthz",
                                        "port": "healthz",
                                        "scheme": "HTTP"
                                    },
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 1
                                },
                                "name": "manager",
                                "ports": [
                                    {
                                        "containerPort": 9090,
                                        "name": "http",
                                        "protocol": "TCP"
                                    },
                                    {
                                        "containerPort": 8080,
                                        "name": "http-prom",
                                        "protocol": "TCP"
                                    },
                                    {
                                        "containerPort": 9440,
                                        "name": "healthz",
                                        "protocol": "TCP"
                                    }
                                ],
                                "readinessProbe": {
                                    "failureThreshold": 3,
                                    "httpGet": {
                                        "path": "/",
                                        "port": "http",
                                        "scheme": "HTTP"
                                    },
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 1
                                },
                                "resources": {
                                    "limits": {
                                        "cpu": "1",
                                        "memory": "1Gi"
                                    },
                                    "requests": {
                                        "cpu": "50m",
                                        "memory": "64Mi"
                                    }
                                },
                                "securityContext": {
                                    "allowPrivilegeEscalation": false,
                                    "capabilities": {
                                        "drop": [
                                            "ALL"
                                        ]
                                    },
                                    "readOnlyRootFilesystem": true,
                                    "runAsNonRoot": true,
                                    "seccompProfile": {
                                        "type": "RuntimeDefault"
                                    }
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/data",
                                        "name": "data"
                                    },
                                    {
                                        "mountPath": "/tmp",
                                        "name": "tmp"
                                    }
                                ]
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "priorityClassName": "system-cluster-critical",
                        "restartPolicy": "Always",
                        "schedulerName": "default-scheduler",
                        "securityContext": {
                            "fsGroup": 1337
                        },
                        "serviceAccount": "source-controller",
                        "serviceAccountName": "source-controller",
                        "terminationGracePeriodSeconds": 10,
                        "volumes": [
                            {
                                "emptyDir": {},
                                "name": "data"
                            },
                            {
                                "emptyDir": {},
                                "name": "tmp"
                            }
                        ]
                    }
                }
            },
            "status": {
                "availableReplicas": 1,
                "conditions": [
                    {
                        "lastTransitionTime": "2025-10-01T12:35:07Z",
                        "lastUpdateTime": "2025-10-01T12:35:07Z",
                        "message": "Deployment has minimum availability.",
                        "reason": "MinimumReplicasAvailable",
                        "status": "True",
                        "type": "Available"
                    },
                    {
                        "lastTransitionTime": "2025-10-01T12:34:54Z",
                        "lastUpdateTime": "2025-10-01T12:35:07Z",
                        "message": "ReplicaSet \"source-controller-7489d9c859\" has successfully progressed.",
                        "reason": "NewReplicaSetAvailable",
                        "status": "True",
                        "type": "Progressing"
                    }
                ],
                "observedGeneration": 1,
                "readyReplicas": 1,
                "replicas": 1,
                "updatedReplicas": 1
            }
        }
    ]
}

TASK [install : Wait for deployments in namespace flux-system] *****************
Wednesday 01 October 2025  12:36:31 +0000 (0:00:00.121)       0:07:03.401 ***** 
Wednesday 01 October 2025  12:36:31 +0000 (0:00:00.121)       0:07:03.400 ***** 
ok: [127.0.0.1] => (item={'metadata': {'name': 'helm-controller', 'namespace': 'flux-system', 'uid': 'adc11415-7eb9-4678-a3bf-a8b0bc4d2d4c', 'resourceVersion': '4991', 'generation': 1, 'creationTimestamp': '2025-10-01T12:34:54Z', 'labels': {'app.kubernetes.io/component': 'helm-controller', 'app.kubernetes.io/part-of': 'flux', 'control-plane': 'controller'}, 'annotations': {'config.k8s.io/owning-inventory': '215a82444ec3b858ef1be07d464aac87ddee216b-1759322091171903068', 'deployment.kubernetes.io/revision': '1', 'internal.kpt.dev/upstream-identifier': 'apps|Deployment|flux-system|helm-controller', 'kubectl.kubernetes.io/last-applied-configuration': '{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"config.k8s.io/owning-inventory":"215a82444ec3b858ef1be07d464aac87ddee216b-1759322091171903068","internal.kpt.dev/upstream-identifier":"apps|Deployment|flux-system|helm-controller"},"labels":{"app.kubernetes.io/component":"helm-controller","app.kubernetes.io/part-of":"flux","control-plane":"controller"},"name":"helm-controller","namespace":"flux-system"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"helm-controller"}},"template":{"metadata":{"annotations":{"prometheus.io/port":"8080","prometheus.io/scrape":"true"},"labels":{"app":"helm-controller"}},"spec":{"containers":[{"args":["--events-addr=http://notification-controller.flux-system.svc.cluster.local./","--watch-all-namespaces","--log-level=info","--log-encoding=json","--enable-leader-election"],"env":[{"name":"RUNTIME_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"GOMAXPROCS","valueFrom":{"resourceFieldRef":{"containerName":"manager","resource":"limits.cpu"}}},{"name":"GOMEMLIMIT","valueFrom":{"resourceFieldRef":{"containerName":"manager","resource":"limits.memory"}}}],"image":"fluxcd/helm-controller:v1.1.0","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/healthz","port":"healthz"}},"name":"manager","ports":[{"containerPort":8080,"name":"http-prom","protocol":"TCP"},{"containerPort":9440,"name":"healthz","protocol":"TCP"}],"readinessProbe":{"httpGet":{"path":"/readyz","port":"healthz"}},"resources":{"limits":{"cpu":"1000m","memory":"1Gi"},"requests":{"cpu":"100m","memory":"64Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true,"runAsNonRoot":true,"seccompProfile":{"type":"RuntimeDefault"}},"volumeMounts":[{"mountPath":"/tmp","name":"temp"}]}],"priorityClassName":"system-cluster-critical","securityContext":{"fsGroup":1337},"serviceAccountName":"helm-controller","terminationGracePeriodSeconds":600,"volumes":[{"emptyDir":{},"name":"temp"}]}}}}\n'}, 'managedFields': [{'manager': 'kubectl', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:34:54Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'.': {}, 'f:config.k8s.io/owning-inventory': {}, 'f:internal.kpt.dev/upstream-identifier': {}, 'f:kubectl.kubernetes.io/last-applied-configuration': {}}, 'f:labels': {'.': {}, 'f:app.kubernetes.io/component': {}, 'f:app.kubernetes.io/part-of': {}, 'f:control-plane': {}}}, 'f:spec': {'f:progressDeadlineSeconds': {}, 'f:replicas': {}, 'f:revisionHistoryLimit': {}, 'f:selector': {}, 'f:strategy': {'f:rollingUpdate': {'.': {}, 'f:maxSurge': {}, 'f:maxUnavailable': {}}, 'f:type': {}}, 'f:template': {'f:metadata': {'f:annotations': {'.': {}, 'f:prometheus.io/port': {}, 'f:prometheus.io/scrape': {}}, 'f:labels': {'.': {}, 'f:app': {}}}, 'f:spec': {'f:containers': {'k:{"name":"manager"}': {'.': {}, 'f:args': {}, 'f:env': {'.': {}, 'k:{"name":"GOMAXPROCS"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:resourceFieldRef': {}}}, 'k:{"name":"GOMEMLIMIT"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:resourceFieldRef': {}}}, 'k:{"name":"RUNTIME_NAMESPACE"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}}, 'f:image': {}, 'f:imagePullPolicy': {}, 'f:livenessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:httpGet': {'.': {}, 'f:path': {}, 'f:port': {}, 'f:scheme': {}}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:timeoutSeconds': {}}, 'f:name': {}, 'f:ports': {'.': {}, 'k:{"containerPort":8080,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:name': {}, 'f:protocol': {}}, 'k:{"containerPort":9440,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:name': {}, 'f:protocol': {}}}, 'f:readinessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:httpGet': {'.': {}, 'f:path': {}, 'f:port': {}, 'f:scheme': {}}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:timeoutSeconds': {}}, 'f:resources': {'.': {}, 'f:limits': {'.': {}, 'f:cpu': {}, 'f:memory': {}}, 'f:requests': {'.': {}, 'f:cpu': {}, 'f:memory': {}}}, 'f:securityContext': {'.': {}, 'f:allowPrivilegeEscalation': {}, 'f:capabilities': {'.': {}, 'f:drop': {}}, 'f:readOnlyRootFilesystem': {}, 'f:runAsNonRoot': {}, 'f:seccompProfile': {'.': {}, 'f:type': {}}}, 'f:terminationMessagePath': {}, 'f:terminationMessagePolicy': {}, 'f:volumeMounts': {'.': {}, 'k:{"mountPath":"/tmp"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}}}}, 'f:dnsPolicy': {}, 'f:priorityClassName': {}, 'f:restartPolicy': {}, 'f:schedulerName': {}, 'f:securityContext': {'.': {}, 'f:fsGroup': {}}, 'f:serviceAccount': {}, 'f:serviceAccountName': {}, 'f:terminationGracePeriodSeconds': {}, 'f:volumes': {'.': {}, 'k:{"name":"temp"}': {'.': {}, 'f:emptyDir': {}, 'f:name': {}}}}}}}}, {'manager': 'kube-controller-manager', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:35:01Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'f:deployment.kubernetes.io/revision': {}}}, 'f:status': {'f:availableReplicas': {}, 'f:conditions': {'.': {}, 'k:{"type":"Available"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}, 'k:{"type":"Progressing"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}}, 'f:observedGeneration': {}, 'f:readyReplicas': {}, 'f:replicas': {}, 'f:updatedReplicas': {}}}, 'subresource': 'status'}]}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'helm-controller'}}, 'template': {'metadata': {'labels': {'app': 'helm-controller'}, 'annotations': {'prometheus.io/port': '8080', 'prometheus.io/scrape': 'true'}}, 'spec': {'volumes': [{'name': 'temp', 'emptyDir': {}}], 'containers': [{'name': 'manager', 'image': 'fluxcd/helm-controller:v1.1.0', 'args': ['--events-addr=http://notification-controller.flux-system.svc.cluster.local./', '--watch-all-namespaces', '--log-level=info', '--log-encoding=json', '--enable-leader-election'], 'ports': [{'name': 'http-prom', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'healthz', 'containerPort': 9440, 'protocol': 'TCP'}], 'env': [{'name': 'RUNTIME_NAMESPACE', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'metadata.namespace'}}}, {'name': 'GOMAXPROCS', 'valueFrom': {'resourceFieldRef': {'containerName': 'manager', 'resource': 'limits.cpu', 'divisor': '0'}}}, {'name': 'GOMEMLIMIT', 'valueFrom': {'resourceFieldRef': {'containerName': 'manager', 'resource': 'limits.memory', 'divisor': '0'}}}], 'resources': {'limits': {'cpu': '1', 'memory': '1Gi'}, 'requests': {'cpu': '100m', 'memory': '64Mi'}}, 'volumeMounts': [{'name': 'temp', 'mountPath': '/tmp'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'healthz', 'scheme': 'HTTP'}, 'timeoutSeconds': 1, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 3}, 'readinessProbe': {'httpGet': {'path': '/readyz', 'port': 'healthz', 'scheme': 'HTTP'}, 'timeoutSeconds': 1, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 3}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'runAsNonRoot': True, 'readOnlyRootFilesystem': True, 'allowPrivilegeEscalation': False, 'seccompProfile': {'type': 'RuntimeDefault'}}}], 'restartPolicy': 'Always', 'terminationGracePeriodSeconds': 600, 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'helm-controller', 'serviceAccount': 'helm-controller', 'securityContext': {'fsGroup': 1337}, 'schedulerName': 'default-scheduler', 'priorityClassName': 'system-cluster-critical'}}, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxUnavailable': '25%', 'maxSurge': '25%'}}, 'revisionHistoryLimit': 10, 'progressDeadlineSeconds': 600}, 'status': {'observedGeneration': 1, 'replicas': 1, 'updatedReplicas': 1, 'readyReplicas': 1, 'availableReplicas': 1, 'conditions': [{'type': 'Available', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:35:01Z', 'lastTransitionTime': '2025-10-01T12:35:01Z', 'reason': 'MinimumReplicasAvailable', 'message': 'Deployment has minimum availability.'}, {'type': 'Progressing', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:35:01Z', 'lastTransitionTime': '2025-10-01T12:34:54Z', 'reason': 'NewReplicaSetAvailable', 'message': 'ReplicaSet "helm-controller-76d6877585" has successfully progressed.'}]}, 'apiVersion': 'apps/v1', 'kind': 'Deployment'})
ok: [127.0.0.1] => (item={'metadata': {'name': 'kustomize-controller', 'namespace': 'flux-system', 'uid': '00fb3b60-a73a-4c61-86fb-3f60b93381bc', 'resourceVersion': '5020', 'generation': 1, 'creationTimestamp': '2025-10-01T12:34:54Z', 'labels': {'app.kubernetes.io/component': 'kustomize-controller', 'app.kubernetes.io/part-of': 'flux', 'control-plane': 'controller'}, 'annotations': {'config.k8s.io/owning-inventory': '215a82444ec3b858ef1be07d464aac87ddee216b-1759322091171903068', 'deployment.kubernetes.io/revision': '1', 'internal.kpt.dev/upstream-identifier': 'apps|Deployment|flux-system|kustomize-controller', 'kubectl.kubernetes.io/last-applied-configuration': '{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"config.k8s.io/owning-inventory":"215a82444ec3b858ef1be07d464aac87ddee216b-1759322091171903068","internal.kpt.dev/upstream-identifier":"apps|Deployment|flux-system|kustomize-controller"},"labels":{"app.kubernetes.io/component":"kustomize-controller","app.kubernetes.io/part-of":"flux","control-plane":"controller"},"name":"kustomize-controller","namespace":"flux-system"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"kustomize-controller"}},"template":{"metadata":{"annotations":{"prometheus.io/port":"8080","prometheus.io/scrape":"true"},"labels":{"app":"kustomize-controller"}},"spec":{"containers":[{"args":["--events-addr=http://notification-controller.flux-system.svc.cluster.local./","--watch-all-namespaces","--log-level=info","--log-encoding=json","--enable-leader-election"],"env":[{"name":"RUNTIME_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"GOMAXPROCS","valueFrom":{"resourceFieldRef":{"containerName":"manager","resource":"limits.cpu"}}},{"name":"GOMEMLIMIT","valueFrom":{"resourceFieldRef":{"containerName":"manager","resource":"limits.memory"}}}],"image":"fluxcd/kustomize-controller:v1.4.0","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/healthz","port":"healthz"}},"name":"manager","ports":[{"containerPort":8080,"name":"http-prom","protocol":"TCP"},{"containerPort":9440,"name":"healthz","protocol":"TCP"}],"readinessProbe":{"httpGet":{"path":"/readyz","port":"healthz"}},"resources":{"limits":{"cpu":"1000m","memory":"1Gi"},"requests":{"cpu":"100m","memory":"64Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true,"runAsNonRoot":true,"seccompProfile":{"type":"RuntimeDefault"}},"volumeMounts":[{"mountPath":"/tmp","name":"temp"}]}],"priorityClassName":"system-cluster-critical","securityContext":{"fsGroup":1337},"serviceAccountName":"kustomize-controller","terminationGracePeriodSeconds":60,"volumes":[{"emptyDir":{},"name":"temp"}]}}}}\n'}, 'managedFields': [{'manager': 'kubectl', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:34:54Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'.': {}, 'f:config.k8s.io/owning-inventory': {}, 'f:internal.kpt.dev/upstream-identifier': {}, 'f:kubectl.kubernetes.io/last-applied-configuration': {}}, 'f:labels': {'.': {}, 'f:app.kubernetes.io/component': {}, 'f:app.kubernetes.io/part-of': {}, 'f:control-plane': {}}}, 'f:spec': {'f:progressDeadlineSeconds': {}, 'f:replicas': {}, 'f:revisionHistoryLimit': {}, 'f:selector': {}, 'f:strategy': {'f:rollingUpdate': {'.': {}, 'f:maxSurge': {}, 'f:maxUnavailable': {}}, 'f:type': {}}, 'f:template': {'f:metadata': {'f:annotations': {'.': {}, 'f:prometheus.io/port': {}, 'f:prometheus.io/scrape': {}}, 'f:labels': {'.': {}, 'f:app': {}}}, 'f:spec': {'f:containers': {'k:{"name":"manager"}': {'.': {}, 'f:args': {}, 'f:env': {'.': {}, 'k:{"name":"GOMAXPROCS"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:resourceFieldRef': {}}}, 'k:{"name":"GOMEMLIMIT"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:resourceFieldRef': {}}}, 'k:{"name":"RUNTIME_NAMESPACE"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}}, 'f:image': {}, 'f:imagePullPolicy': {}, 'f:livenessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:httpGet': {'.': {}, 'f:path': {}, 'f:port': {}, 'f:scheme': {}}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:timeoutSeconds': {}}, 'f:name': {}, 'f:ports': {'.': {}, 'k:{"containerPort":8080,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:name': {}, 'f:protocol': {}}, 'k:{"containerPort":9440,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:name': {}, 'f:protocol': {}}}, 'f:readinessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:httpGet': {'.': {}, 'f:path': {}, 'f:port': {}, 'f:scheme': {}}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:timeoutSeconds': {}}, 'f:resources': {'.': {}, 'f:limits': {'.': {}, 'f:cpu': {}, 'f:memory': {}}, 'f:requests': {'.': {}, 'f:cpu': {}, 'f:memory': {}}}, 'f:securityContext': {'.': {}, 'f:allowPrivilegeEscalation': {}, 'f:capabilities': {'.': {}, 'f:drop': {}}, 'f:readOnlyRootFilesystem': {}, 'f:runAsNonRoot': {}, 'f:seccompProfile': {'.': {}, 'f:type': {}}}, 'f:terminationMessagePath': {}, 'f:terminationMessagePolicy': {}, 'f:volumeMounts': {'.': {}, 'k:{"mountPath":"/tmp"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}}}}, 'f:dnsPolicy': {}, 'f:priorityClassName': {}, 'f:restartPolicy': {}, 'f:schedulerName': {}, 'f:securityContext': {'.': {}, 'f:fsGroup': {}}, 'f:serviceAccount': {}, 'f:serviceAccountName': {}, 'f:terminationGracePeriodSeconds': {}, 'f:volumes': {'.': {}, 'k:{"name":"temp"}': {'.': {}, 'f:emptyDir': {}, 'f:name': {}}}}}}}}, {'manager': 'kube-controller-manager', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:35:04Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'f:deployment.kubernetes.io/revision': {}}}, 'f:status': {'f:availableReplicas': {}, 'f:conditions': {'.': {}, 'k:{"type":"Available"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}, 'k:{"type":"Progressing"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}}, 'f:observedGeneration': {}, 'f:readyReplicas': {}, 'f:replicas': {}, 'f:updatedReplicas': {}}}, 'subresource': 'status'}]}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'kustomize-controller'}}, 'template': {'metadata': {'labels': {'app': 'kustomize-controller'}, 'annotations': {'prometheus.io/port': '8080', 'prometheus.io/scrape': 'true'}}, 'spec': {'volumes': [{'name': 'temp', 'emptyDir': {}}], 'containers': [{'name': 'manager', 'image': 'fluxcd/kustomize-controller:v1.4.0', 'args': ['--events-addr=http://notification-controller.flux-system.svc.cluster.local./', '--watch-all-namespaces', '--log-level=info', '--log-encoding=json', '--enable-leader-election'], 'ports': [{'name': 'http-prom', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'healthz', 'containerPort': 9440, 'protocol': 'TCP'}], 'env': [{'name': 'RUNTIME_NAMESPACE', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'metadata.namespace'}}}, {'name': 'GOMAXPROCS', 'valueFrom': {'resourceFieldRef': {'containerName': 'manager', 'resource': 'limits.cpu', 'divisor': '0'}}}, {'name': 'GOMEMLIMIT', 'valueFrom': {'resourceFieldRef': {'containerName': 'manager', 'resource': 'limits.memory', 'divisor': '0'}}}], 'resources': {'limits': {'cpu': '1', 'memory': '1Gi'}, 'requests': {'cpu': '100m', 'memory': '64Mi'}}, 'volumeMounts': [{'name': 'temp', 'mountPath': '/tmp'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'healthz', 'scheme': 'HTTP'}, 'timeoutSeconds': 1, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 3}, 'readinessProbe': {'httpGet': {'path': '/readyz', 'port': 'healthz', 'scheme': 'HTTP'}, 'timeoutSeconds': 1, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 3}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'runAsNonRoot': True, 'readOnlyRootFilesystem': True, 'allowPrivilegeEscalation': False, 'seccompProfile': {'type': 'RuntimeDefault'}}}], 'restartPolicy': 'Always', 'terminationGracePeriodSeconds': 60, 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'kustomize-controller', 'serviceAccount': 'kustomize-controller', 'securityContext': {'fsGroup': 1337}, 'schedulerName': 'default-scheduler', 'priorityClassName': 'system-cluster-critical'}}, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxUnavailable': '25%', 'maxSurge': '25%'}}, 'revisionHistoryLimit': 10, 'progressDeadlineSeconds': 600}, 'status': {'observedGeneration': 1, 'replicas': 1, 'updatedReplicas': 1, 'readyReplicas': 1, 'availableReplicas': 1, 'conditions': [{'type': 'Available', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:35:04Z', 'lastTransitionTime': '2025-10-01T12:35:04Z', 'reason': 'MinimumReplicasAvailable', 'message': 'Deployment has minimum availability.'}, {'type': 'Progressing', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:35:04Z', 'lastTransitionTime': '2025-10-01T12:34:54Z', 'reason': 'NewReplicaSetAvailable', 'message': 'ReplicaSet "kustomize-controller-775d5d8848" has successfully progressed.'}]}, 'apiVersion': 'apps/v1', 'kind': 'Deployment'})
ok: [127.0.0.1] => (item={'metadata': {'name': 'notification-controller', 'namespace': 'flux-system', 'uid': '1673445f-0f90-40a9-b84d-7bdb9962cb3e', 'resourceVersion': '5100', 'generation': 1, 'creationTimestamp': '2025-10-01T12:34:54Z', 'labels': {'app.kubernetes.io/component': 'notification-controller', 'app.kubernetes.io/part-of': 'flux', 'control-plane': 'controller'}, 'annotations': {'config.k8s.io/owning-inventory': '215a82444ec3b858ef1be07d464aac87ddee216b-1759322091171903068', 'deployment.kubernetes.io/revision': '1', 'internal.kpt.dev/upstream-identifier': 'apps|Deployment|flux-system|notification-controller', 'kubectl.kubernetes.io/last-applied-configuration': '{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"config.k8s.io/owning-inventory":"215a82444ec3b858ef1be07d464aac87ddee216b-1759322091171903068","internal.kpt.dev/upstream-identifier":"apps|Deployment|flux-system|notification-controller"},"labels":{"app.kubernetes.io/component":"notification-controller","app.kubernetes.io/part-of":"flux","control-plane":"controller"},"name":"notification-controller","namespace":"flux-system"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"notification-controller"}},"template":{"metadata":{"annotations":{"prometheus.io/port":"8080","prometheus.io/scrape":"true"},"labels":{"app":"notification-controller"}},"spec":{"containers":[{"args":["--watch-all-namespaces","--log-level=info","--log-encoding=json","--enable-leader-election"],"env":[{"name":"RUNTIME_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"GOMAXPROCS","valueFrom":{"resourceFieldRef":{"containerName":"manager","resource":"limits.cpu"}}},{"name":"GOMEMLIMIT","valueFrom":{"resourceFieldRef":{"containerName":"manager","resource":"limits.memory"}}}],"image":"fluxcd/notification-controller:v1.4.0","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/healthz","port":"healthz"}},"name":"manager","ports":[{"containerPort":9090,"name":"http","protocol":"TCP"},{"containerPort":9292,"name":"http-webhook","protocol":"TCP"},{"containerPort":8080,"name":"http-prom","protocol":"TCP"},{"containerPort":9440,"name":"healthz","protocol":"TCP"}],"readinessProbe":{"httpGet":{"path":"/readyz","port":"healthz"}},"resources":{"limits":{"cpu":"1000m","memory":"1Gi"},"requests":{"cpu":"100m","memory":"64Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true,"runAsNonRoot":true,"seccompProfile":{"type":"RuntimeDefault"}},"volumeMounts":[{"mountPath":"/tmp","name":"temp"}]}],"securityContext":{"fsGroup":1337},"serviceAccountName":"notification-controller","terminationGracePeriodSeconds":10,"volumes":[{"emptyDir":{},"name":"temp"}]}}}}\n'}, 'managedFields': [{'manager': 'kubectl', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:34:54Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'.': {}, 'f:config.k8s.io/owning-inventory': {}, 'f:internal.kpt.dev/upstream-identifier': {}, 'f:kubectl.kubernetes.io/last-applied-configuration': {}}, 'f:labels': {'.': {}, 'f:app.kubernetes.io/component': {}, 'f:app.kubernetes.io/part-of': {}, 'f:control-plane': {}}}, 'f:spec': {'f:progressDeadlineSeconds': {}, 'f:replicas': {}, 'f:revisionHistoryLimit': {}, 'f:selector': {}, 'f:strategy': {'f:rollingUpdate': {'.': {}, 'f:maxSurge': {}, 'f:maxUnavailable': {}}, 'f:type': {}}, 'f:template': {'f:metadata': {'f:annotations': {'.': {}, 'f:prometheus.io/port': {}, 'f:prometheus.io/scrape': {}}, 'f:labels': {'.': {}, 'f:app': {}}}, 'f:spec': {'f:containers': {'k:{"name":"manager"}': {'.': {}, 'f:args': {}, 'f:env': {'.': {}, 'k:{"name":"GOMAXPROCS"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:resourceFieldRef': {}}}, 'k:{"name":"GOMEMLIMIT"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:resourceFieldRef': {}}}, 'k:{"name":"RUNTIME_NAMESPACE"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}}, 'f:image': {}, 'f:imagePullPolicy': {}, 'f:livenessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:httpGet': {'.': {}, 'f:path': {}, 'f:port': {}, 'f:scheme': {}}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:timeoutSeconds': {}}, 'f:name': {}, 'f:ports': {'.': {}, 'k:{"containerPort":8080,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:name': {}, 'f:protocol': {}}, 'k:{"containerPort":9090,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:name': {}, 'f:protocol': {}}, 'k:{"containerPort":9292,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:name': {}, 'f:protocol': {}}, 'k:{"containerPort":9440,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:name': {}, 'f:protocol': {}}}, 'f:readinessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:httpGet': {'.': {}, 'f:path': {}, 'f:port': {}, 'f:scheme': {}}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:timeoutSeconds': {}}, 'f:resources': {'.': {}, 'f:limits': {'.': {}, 'f:cpu': {}, 'f:memory': {}}, 'f:requests': {'.': {}, 'f:cpu': {}, 'f:memory': {}}}, 'f:securityContext': {'.': {}, 'f:allowPrivilegeEscalation': {}, 'f:capabilities': {'.': {}, 'f:drop': {}}, 'f:readOnlyRootFilesystem': {}, 'f:runAsNonRoot': {}, 'f:seccompProfile': {'.': {}, 'f:type': {}}}, 'f:terminationMessagePath': {}, 'f:terminationMessagePolicy': {}, 'f:volumeMounts': {'.': {}, 'k:{"mountPath":"/tmp"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}}}}, 'f:dnsPolicy': {}, 'f:restartPolicy': {}, 'f:schedulerName': {}, 'f:securityContext': {'.': {}, 'f:fsGroup': {}}, 'f:serviceAccount': {}, 'f:serviceAccountName': {}, 'f:terminationGracePeriodSeconds': {}, 'f:volumes': {'.': {}, 'k:{"name":"temp"}': {'.': {}, 'f:emptyDir': {}, 'f:name': {}}}}}}}}, {'manager': 'kube-controller-manager', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:35:09Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'f:deployment.kubernetes.io/revision': {}}}, 'f:status': {'f:availableReplicas': {}, 'f:conditions': {'.': {}, 'k:{"type":"Available"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}, 'k:{"type":"Progressing"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}}, 'f:observedGeneration': {}, 'f:readyReplicas': {}, 'f:replicas': {}, 'f:updatedReplicas': {}}}, 'subresource': 'status'}]}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'notification-controller'}}, 'template': {'metadata': {'labels': {'app': 'notification-controller'}, 'annotations': {'prometheus.io/port': '8080', 'prometheus.io/scrape': 'true'}}, 'spec': {'volumes': [{'name': 'temp', 'emptyDir': {}}], 'containers': [{'name': 'manager', 'image': 'fluxcd/notification-controller:v1.4.0', 'args': ['--watch-all-namespaces', '--log-level=info', '--log-encoding=json', '--enable-leader-election'], 'ports': [{'name': 'http', 'containerPort': 9090, 'protocol': 'TCP'}, {'name': 'http-webhook', 'containerPort': 9292, 'protocol': 'TCP'}, {'name': 'http-prom', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'healthz', 'containerPort': 9440, 'protocol': 'TCP'}], 'env': [{'name': 'RUNTIME_NAMESPACE', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'metadata.namespace'}}}, {'name': 'GOMAXPROCS', 'valueFrom': {'resourceFieldRef': {'containerName': 'manager', 'resource': 'limits.cpu', 'divisor': '0'}}}, {'name': 'GOMEMLIMIT', 'valueFrom': {'resourceFieldRef': {'containerName': 'manager', 'resource': 'limits.memory', 'divisor': '0'}}}], 'resources': {'limits': {'cpu': '1', 'memory': '1Gi'}, 'requests': {'cpu': '100m', 'memory': '64Mi'}}, 'volumeMounts': [{'name': 'temp', 'mountPath': '/tmp'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'healthz', 'scheme': 'HTTP'}, 'timeoutSeconds': 1, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 3}, 'readinessProbe': {'httpGet': {'path': '/readyz', 'port': 'healthz', 'scheme': 'HTTP'}, 'timeoutSeconds': 1, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 3}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'runAsNonRoot': True, 'readOnlyRootFilesystem': True, 'allowPrivilegeEscalation': False, 'seccompProfile': {'type': 'RuntimeDefault'}}}], 'restartPolicy': 'Always', 'terminationGracePeriodSeconds': 10, 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'notification-controller', 'serviceAccount': 'notification-controller', 'securityContext': {'fsGroup': 1337}, 'schedulerName': 'default-scheduler'}}, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxUnavailable': '25%', 'maxSurge': '25%'}}, 'revisionHistoryLimit': 10, 'progressDeadlineSeconds': 600}, 'status': {'observedGeneration': 1, 'replicas': 1, 'updatedReplicas': 1, 'readyReplicas': 1, 'availableReplicas': 1, 'conditions': [{'type': 'Available', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:35:09Z', 'lastTransitionTime': '2025-10-01T12:35:09Z', 'reason': 'MinimumReplicasAvailable', 'message': 'Deployment has minimum availability.'}, {'type': 'Progressing', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:35:09Z', 'lastTransitionTime': '2025-10-01T12:34:54Z', 'reason': 'NewReplicaSetAvailable', 'message': 'ReplicaSet "notification-controller-68dbdcbb4" has successfully progressed.'}]}, 'apiVersion': 'apps/v1', 'kind': 'Deployment'})
ok: [127.0.0.1] => (item={'metadata': {'name': 'source-controller', 'namespace': 'flux-system', 'uid': '66debfaa-2b65-4c30-a443-1e989a8a3c4c', 'resourceVersion': '5056', 'generation': 1, 'creationTimestamp': '2025-10-01T12:34:54Z', 'labels': {'app.kubernetes.io/component': 'source-controller', 'app.kubernetes.io/part-of': 'flux', 'control-plane': 'controller'}, 'annotations': {'config.k8s.io/owning-inventory': '215a82444ec3b858ef1be07d464aac87ddee216b-1759322091171903068', 'deployment.kubernetes.io/revision': '1', 'internal.kpt.dev/upstream-identifier': 'apps|Deployment|flux-system|source-controller', 'kubectl.kubernetes.io/last-applied-configuration': '{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"config.k8s.io/owning-inventory":"215a82444ec3b858ef1be07d464aac87ddee216b-1759322091171903068","internal.kpt.dev/upstream-identifier":"apps|Deployment|flux-system|source-controller"},"labels":{"app.kubernetes.io/component":"source-controller","app.kubernetes.io/part-of":"flux","control-plane":"controller"},"name":"source-controller","namespace":"flux-system"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"source-controller"}},"strategy":{"type":"Recreate"},"template":{"metadata":{"annotations":{"prometheus.io/port":"8080","prometheus.io/scrape":"true"},"labels":{"app":"source-controller"}},"spec":{"containers":[{"args":["--events-addr=http://notification-controller.flux-system.svc.cluster.local./","--watch-all-namespaces","--log-level=info","--log-encoding=json","--enable-leader-election","--storage-path=/data","--storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local."],"env":[{"name":"RUNTIME_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"TUF_ROOT","value":"/tmp/.sigstore"},{"name":"GOMAXPROCS","valueFrom":{"resourceFieldRef":{"containerName":"manager","resource":"limits.cpu"}}},{"name":"GOMEMLIMIT","valueFrom":{"resourceFieldRef":{"containerName":"manager","resource":"limits.memory"}}}],"image":"fluxcd/source-controller:v1.4.1","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/healthz","port":"healthz"}},"name":"manager","ports":[{"containerPort":9090,"name":"http","protocol":"TCP"},{"containerPort":8080,"name":"http-prom","protocol":"TCP"},{"containerPort":9440,"name":"healthz","protocol":"TCP"}],"readinessProbe":{"httpGet":{"path":"/","port":"http"}},"resources":{"limits":{"cpu":"1000m","memory":"1Gi"},"requests":{"cpu":"50m","memory":"64Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true,"runAsNonRoot":true,"seccompProfile":{"type":"RuntimeDefault"}},"volumeMounts":[{"mountPath":"/data","name":"data"},{"mountPath":"/tmp","name":"tmp"}]}],"priorityClassName":"system-cluster-critical","securityContext":{"fsGroup":1337},"serviceAccountName":"source-controller","terminationGracePeriodSeconds":10,"volumes":[{"emptyDir":{},"name":"data"},{"emptyDir":{},"name":"tmp"}]}}}}\n'}, 'managedFields': [{'manager': 'kubectl', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:34:54Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'.': {}, 'f:config.k8s.io/owning-inventory': {}, 'f:internal.kpt.dev/upstream-identifier': {}, 'f:kubectl.kubernetes.io/last-applied-configuration': {}}, 'f:labels': {'.': {}, 'f:app.kubernetes.io/component': {}, 'f:app.kubernetes.io/part-of': {}, 'f:control-plane': {}}}, 'f:spec': {'f:progressDeadlineSeconds': {}, 'f:replicas': {}, 'f:revisionHistoryLimit': {}, 'f:selector': {}, 'f:strategy': {'f:type': {}}, 'f:template': {'f:metadata': {'f:annotations': {'.': {}, 'f:prometheus.io/port': {}, 'f:prometheus.io/scrape': {}}, 'f:labels': {'.': {}, 'f:app': {}}}, 'f:spec': {'f:containers': {'k:{"name":"manager"}': {'.': {}, 'f:args': {}, 'f:env': {'.': {}, 'k:{"name":"GOMAXPROCS"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:resourceFieldRef': {}}}, 'k:{"name":"GOMEMLIMIT"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:resourceFieldRef': {}}}, 'k:{"name":"RUNTIME_NAMESPACE"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}, 'k:{"name":"TUF_ROOT"}': {'.': {}, 'f:name': {}, 'f:value': {}}}, 'f:image': {}, 'f:imagePullPolicy': {}, 'f:livenessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:httpGet': {'.': {}, 'f:path': {}, 'f:port': {}, 'f:scheme': {}}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:timeoutSeconds': {}}, 'f:name': {}, 'f:ports': {'.': {}, 'k:{"containerPort":8080,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:name': {}, 'f:protocol': {}}, 'k:{"containerPort":9090,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:name': {}, 'f:protocol': {}}, 'k:{"containerPort":9440,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:name': {}, 'f:protocol': {}}}, 'f:readinessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:httpGet': {'.': {}, 'f:path': {}, 'f:port': {}, 'f:scheme': {}}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:timeoutSeconds': {}}, 'f:resources': {'.': {}, 'f:limits': {'.': {}, 'f:cpu': {}, 'f:memory': {}}, 'f:requests': {'.': {}, 'f:cpu': {}, 'f:memory': {}}}, 'f:securityContext': {'.': {}, 'f:allowPrivilegeEscalation': {}, 'f:capabilities': {'.': {}, 'f:drop': {}}, 'f:readOnlyRootFilesystem': {}, 'f:runAsNonRoot': {}, 'f:seccompProfile': {'.': {}, 'f:type': {}}}, 'f:terminationMessagePath': {}, 'f:terminationMessagePolicy': {}, 'f:volumeMounts': {'.': {}, 'k:{"mountPath":"/data"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}, 'k:{"mountPath":"/tmp"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}}}}, 'f:dnsPolicy': {}, 'f:priorityClassName': {}, 'f:restartPolicy': {}, 'f:schedulerName': {}, 'f:securityContext': {'.': {}, 'f:fsGroup': {}}, 'f:serviceAccount': {}, 'f:serviceAccountName': {}, 'f:terminationGracePeriodSeconds': {}, 'f:volumes': {'.': {}, 'k:{"name":"data"}': {'.': {}, 'f:emptyDir': {}, 'f:name': {}}, 'k:{"name":"tmp"}': {'.': {}, 'f:emptyDir': {}, 'f:name': {}}}}}}}}, {'manager': 'kube-controller-manager', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:35:07Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'f:deployment.kubernetes.io/revision': {}}}, 'f:status': {'f:availableReplicas': {}, 'f:conditions': {'.': {}, 'k:{"type":"Available"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}, 'k:{"type":"Progressing"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}}, 'f:observedGeneration': {}, 'f:readyReplicas': {}, 'f:replicas': {}, 'f:updatedReplicas': {}}}, 'subresource': 'status'}]}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'source-controller'}}, 'template': {'metadata': {'labels': {'app': 'source-controller'}, 'annotations': {'prometheus.io/port': '8080', 'prometheus.io/scrape': 'true'}}, 'spec': {'volumes': [{'name': 'data', 'emptyDir': {}}, {'name': 'tmp', 'emptyDir': {}}], 'containers': [{'name': 'manager', 'image': 'fluxcd/source-controller:v1.4.1', 'args': ['--events-addr=http://notification-controller.flux-system.svc.cluster.local./', '--watch-all-namespaces', '--log-level=info', '--log-encoding=json', '--enable-leader-election', '--storage-path=/data', '--storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.'], 'ports': [{'name': 'http', 'containerPort': 9090, 'protocol': 'TCP'}, {'name': 'http-prom', 'containerPort': 8080, 'protocol': 'TCP'}, {'name': 'healthz', 'containerPort': 9440, 'protocol': 'TCP'}], 'env': [{'name': 'RUNTIME_NAMESPACE', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'metadata.namespace'}}}, {'name': 'TUF_ROOT', 'value': '/tmp/.sigstore'}, {'name': 'GOMAXPROCS', 'valueFrom': {'resourceFieldRef': {'containerName': 'manager', 'resource': 'limits.cpu', 'divisor': '0'}}}, {'name': 'GOMEMLIMIT', 'valueFrom': {'resourceFieldRef': {'containerName': 'manager', 'resource': 'limits.memory', 'divisor': '0'}}}], 'resources': {'limits': {'cpu': '1', 'memory': '1Gi'}, 'requests': {'cpu': '50m', 'memory': '64Mi'}}, 'volumeMounts': [{'name': 'data', 'mountPath': '/data'}, {'name': 'tmp', 'mountPath': '/tmp'}], 'livenessProbe': {'httpGet': {'path': '/healthz', 'port': 'healthz', 'scheme': 'HTTP'}, 'timeoutSeconds': 1, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 3}, 'readinessProbe': {'httpGet': {'path': '/', 'port': 'http', 'scheme': 'HTTP'}, 'timeoutSeconds': 1, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 3}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'runAsNonRoot': True, 'readOnlyRootFilesystem': True, 'allowPrivilegeEscalation': False, 'seccompProfile': {'type': 'RuntimeDefault'}}}], 'restartPolicy': 'Always', 'terminationGracePeriodSeconds': 10, 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'source-controller', 'serviceAccount': 'source-controller', 'securityContext': {'fsGroup': 1337}, 'schedulerName': 'default-scheduler', 'priorityClassName': 'system-cluster-critical'}}, 'strategy': {'type': 'Recreate'}, 'revisionHistoryLimit': 10, 'progressDeadlineSeconds': 600}, 'status': {'observedGeneration': 1, 'replicas': 1, 'updatedReplicas': 1, 'readyReplicas': 1, 'availableReplicas': 1, 'conditions': [{'type': 'Available', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:35:07Z', 'lastTransitionTime': '2025-10-01T12:35:07Z', 'reason': 'MinimumReplicasAvailable', 'message': 'Deployment has minimum availability.'}, {'type': 'Progressing', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:35:07Z', 'lastTransitionTime': '2025-10-01T12:34:54Z', 'reason': 'NewReplicaSetAvailable', 'message': 'ReplicaSet "source-controller-7489d9c859" has successfully progressed.'}]}, 'apiVersion': 'apps/v1', 'kind': 'Deployment'})

TASK [install : Get deployment resources in namespace argocd] ******************
Wednesday 01 October 2025  12:36:34 +0000 (0:00:03.679)       0:07:07.081 ***** 
Wednesday 01 October 2025  12:36:34 +0000 (0:00:03.679)       0:07:07.080 ***** 
ok: [127.0.0.1]

TASK [install : Print deployment resources in namespace argocd] ****************
Wednesday 01 October 2025  12:36:36 +0000 (0:00:01.167)       0:07:08.248 ***** 
Wednesday 01 October 2025  12:36:36 +0000 (0:00:01.167)       0:07:08.247 ***** 
ok: [127.0.0.1] => {
    "deployment_list.resources": [
        {
            "apiVersion": "apps/v1",
            "kind": "Deployment",
            "metadata": {
                "annotations": {
                    "config.k8s.io/owning-inventory": "b3eea0dca944e5ddd5a4d7c4fdcfda74d5608155-1759322119970877404",
                    "deployment.kubernetes.io/revision": "1",
                    "internal.kpt.dev/upstream-identifier": "apps|Deployment|argocd|argocd-applicationset-controller",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{\"config.k8s.io/owning-inventory\":\"b3eea0dca944e5ddd5a4d7c4fdcfda74d5608155-1759322119970877404\",\"internal.kpt.dev/upstream-identifier\":\"apps|Deployment|argocd|argocd-applicationset-controller\"},\"labels\":{\"app.kubernetes.io/component\":\"applicationset-controller\",\"app.kubernetes.io/name\":\"argocd-applicationset-controller\",\"app.kubernetes.io/part-of\":\"argocd\"},\"name\":\"argocd-applicationset-controller\",\"namespace\":\"argocd\"},\"spec\":{\"selector\":{\"matchLabels\":{\"app.kubernetes.io/name\":\"argocd-applicationset-controller\"}},\"template\":{\"metadata\":{\"labels\":{\"app.kubernetes.io/name\":\"argocd-applicationset-controller\"}},\"spec\":{\"containers\":[{\"args\":[\"/usr/local/bin/argocd-applicationset-controller\"],\"env\":[{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_GLOBAL_PRESERVED_ANNOTATIONS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"applicationsetcontroller.global.preserved.annotations\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_GLOBAL_PRESERVED_LABELS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"applicationsetcontroller.global.preserved.labels\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"NAMESPACE\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.namespace\"}}},{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_LEADER_ELECTION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"applicationsetcontroller.enable.leader.election\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"repo.server\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_POLICY\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"applicationsetcontroller.policy\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_POLICY_OVERRIDE\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"applicationsetcontroller.enable.policy.override\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_DEBUG\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"applicationsetcontroller.debug\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_LOGFORMAT\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"applicationsetcontroller.log.format\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_LOGLEVEL\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"applicationsetcontroller.log.level\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_LOG_FORMAT_TIMESTAMP\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"log.format.timestamp\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_DRY_RUN\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"applicationsetcontroller.dryrun\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_GIT_MODULES_ENABLED\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"applicationsetcontroller.enable.git.submodule\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_PROGRESSIVE_SYNCS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"applicationsetcontroller.enable.progressive.syncs\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_TOKENREF_STRICT_MODE\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"applicationsetcontroller.enable.tokenref.strict.mode\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_NEW_GIT_FILE_GLOBBING\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"applicationsetcontroller.enable.new.git.file.globbing\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_PLAINTEXT\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"applicationsetcontroller.repo.server.plaintext\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_STRICT_TLS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"applicationsetcontroller.repo.server.strict.tls\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_TIMEOUT_SECONDS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"applicationsetcontroller.repo.server.timeout.seconds\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_CONCURRENT_RECONCILIATIONS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"applicationsetcontroller.concurrent.reconciliations.max\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_NAMESPACES\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"applicationsetcontroller.namespaces\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_SCM_ROOT_CA_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"applicationsetcontroller.scm.root.ca.path\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_ALLOWED_SCM_PROVIDERS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"applicationsetcontroller.allowed.scm.providers\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_SCM_PROVIDERS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"applicationsetcontroller.enable.scm.providers\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_WEBHOOK_PARALLELISM_LIMIT\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"applicationsetcontroller.webhook.parallelism.limit\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_REQUEUE_AFTER\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"applicationsetcontroller.requeue.after\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}}],\"image\":\"quay.io/argoproj/argocd:v3.0.6\",\"imagePullPolicy\":\"Always\",\"name\":\"argocd-applicationset-controller\",\"ports\":[{\"containerPort\":7000,\"name\":\"webhook\"},{\"containerPort\":8080,\"name\":\"metrics\"}],\"securityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"readOnlyRootFilesystem\":true,\"runAsNonRoot\":true,\"seccompProfile\":{\"type\":\"RuntimeDefault\"}},\"volumeMounts\":[{\"mountPath\":\"/app/config/ssh\",\"name\":\"ssh-known-hosts\"},{\"mountPath\":\"/app/config/tls\",\"name\":\"tls-certs\"},{\"mountPath\":\"/app/config/gpg/source\",\"name\":\"gpg-keys\"},{\"mountPath\":\"/app/config/gpg/keys\",\"name\":\"gpg-keyring\"},{\"mountPath\":\"/tmp\",\"name\":\"tmp\"},{\"mountPath\":\"/app/config/reposerver/tls\",\"name\":\"argocd-repo-server-tls\"}]}],\"nodeSelector\":{\"kubernetes.io/os\":\"linux\"},\"serviceAccountName\":\"argocd-applicationset-controller\",\"volumes\":[{\"configMap\":{\"name\":\"argocd-ssh-known-hosts-cm\"},\"name\":\"ssh-known-hosts\"},{\"configMap\":{\"name\":\"argocd-tls-certs-cm\"},\"name\":\"tls-certs\"},{\"configMap\":{\"name\":\"argocd-gpg-keys-cm\"},\"name\":\"gpg-keys\"},{\"emptyDir\":{},\"name\":\"gpg-keyring\"},{\"emptyDir\":{},\"name\":\"tmp\"},{\"name\":\"argocd-repo-server-tls\",\"secret\":{\"items\":[{\"key\":\"tls.crt\",\"path\":\"tls.crt\"},{\"key\":\"tls.key\",\"path\":\"tls.key\"},{\"key\":\"ca.crt\",\"path\":\"ca.crt\"}],\"optional\":true,\"secretName\":\"argocd-repo-server-tls\"}}]}}}}\n"
                },
                "creationTimestamp": "2025-10-01T12:35:25Z",
                "generation": 1,
                "labels": {
                    "app.kubernetes.io/component": "applicationset-controller",
                    "app.kubernetes.io/name": "argocd-applicationset-controller",
                    "app.kubernetes.io/part-of": "argocd"
                },
                "managedFields": [
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:config.k8s.io/owning-inventory": {},
                                    "f:internal.kpt.dev/upstream-identifier": {},
                                    "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:app.kubernetes.io/component": {},
                                    "f:app.kubernetes.io/name": {},
                                    "f:app.kubernetes.io/part-of": {}
                                }
                            },
                            "f:spec": {
                                "f:progressDeadlineSeconds": {},
                                "f:replicas": {},
                                "f:revisionHistoryLimit": {},
                                "f:selector": {},
                                "f:strategy": {
                                    "f:rollingUpdate": {
                                        ".": {},
                                        "f:maxSurge": {},
                                        "f:maxUnavailable": {}
                                    },
                                    "f:type": {}
                                },
                                "f:template": {
                                    "f:metadata": {
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/name": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:containers": {
                                            "k:{\"name\":\"argocd-applicationset-controller\"}": {
                                                ".": {},
                                                "f:args": {},
                                                "f:env": {
                                                    ".": {},
                                                    "k:{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_ALLOWED_SCM_PROVIDERS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_CONCURRENT_RECONCILIATIONS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_DEBUG\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_DRY_RUN\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_LEADER_ELECTION\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_NEW_GIT_FILE_GLOBBING\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_POLICY_OVERRIDE\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_PROGRESSIVE_SYNCS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_SCM_PROVIDERS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_GLOBAL_PRESERVED_ANNOTATIONS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_GLOBAL_PRESERVED_LABELS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_LOGFORMAT\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_LOGLEVEL\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_NAMESPACES\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_POLICY\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_PLAINTEXT\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_STRICT_TLS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_TIMEOUT_SECONDS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_REQUEUE_AFTER\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_SCM_ROOT_CA_PATH\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_TOKENREF_STRICT_MODE\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_WEBHOOK_PARALLELISM_LIMIT\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_GIT_MODULES_ENABLED\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_LOG_FORMAT_TIMESTAMP\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"NAMESPACE\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {}
                                                        }
                                                    }
                                                },
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:name": {},
                                                "f:ports": {
                                                    ".": {},
                                                    "k:{\"containerPort\":7000,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    },
                                                    "k:{\"containerPort\":8080,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    }
                                                },
                                                "f:resources": {},
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:allowPrivilegeEscalation": {},
                                                    "f:capabilities": {
                                                        ".": {},
                                                        "f:drop": {}
                                                    },
                                                    "f:readOnlyRootFilesystem": {},
                                                    "f:runAsNonRoot": {},
                                                    "f:seccompProfile": {
                                                        ".": {},
                                                        "f:type": {}
                                                    }
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {},
                                                "f:volumeMounts": {
                                                    ".": {},
                                                    "k:{\"mountPath\":\"/app/config/gpg/keys\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    },
                                                    "k:{\"mountPath\":\"/app/config/gpg/source\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    },
                                                    "k:{\"mountPath\":\"/app/config/reposerver/tls\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    },
                                                    "k:{\"mountPath\":\"/app/config/ssh\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    },
                                                    "k:{\"mountPath\":\"/app/config/tls\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    },
                                                    "k:{\"mountPath\":\"/tmp\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    }
                                                }
                                            }
                                        },
                                        "f:dnsPolicy": {},
                                        "f:nodeSelector": {},
                                        "f:restartPolicy": {},
                                        "f:schedulerName": {},
                                        "f:securityContext": {},
                                        "f:serviceAccount": {},
                                        "f:serviceAccountName": {},
                                        "f:terminationGracePeriodSeconds": {},
                                        "f:volumes": {
                                            ".": {},
                                            "k:{\"name\":\"argocd-repo-server-tls\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:secret": {
                                                    ".": {},
                                                    "f:defaultMode": {},
                                                    "f:items": {},
                                                    "f:optional": {},
                                                    "f:secretName": {}
                                                }
                                            },
                                            "k:{\"name\":\"gpg-keyring\"}": {
                                                ".": {},
                                                "f:emptyDir": {},
                                                "f:name": {}
                                            },
                                            "k:{\"name\":\"gpg-keys\"}": {
                                                ".": {},
                                                "f:configMap": {
                                                    ".": {},
                                                    "f:defaultMode": {},
                                                    "f:name": {}
                                                },
                                                "f:name": {}
                                            },
                                            "k:{\"name\":\"ssh-known-hosts\"}": {
                                                ".": {},
                                                "f:configMap": {
                                                    ".": {},
                                                    "f:defaultMode": {},
                                                    "f:name": {}
                                                },
                                                "f:name": {}
                                            },
                                            "k:{\"name\":\"tls-certs\"}": {
                                                ".": {},
                                                "f:configMap": {
                                                    ".": {},
                                                    "f:defaultMode": {},
                                                    "f:name": {}
                                                },
                                                "f:name": {}
                                            },
                                            "k:{\"name\":\"tmp\"}": {
                                                ".": {},
                                                "f:emptyDir": {},
                                                "f:name": {}
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "manager": "kubectl",
                        "operation": "Update",
                        "time": "2025-10-01T12:35:25Z"
                    },
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    "f:deployment.kubernetes.io/revision": {}
                                }
                            },
                            "f:status": {
                                "f:availableReplicas": {},
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"Available\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Progressing\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:observedGeneration": {},
                                "f:readyReplicas": {},
                                "f:replicas": {},
                                "f:updatedReplicas": {}
                            }
                        },
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "subresource": "status",
                        "time": "2025-10-01T12:35:35Z"
                    }
                ],
                "name": "argocd-applicationset-controller",
                "namespace": "argocd",
                "resourceVersion": "5506",
                "uid": "d1595120-62c5-45ca-9396-15981c388245"
            },
            "spec": {
                "progressDeadlineSeconds": 600,
                "replicas": 1,
                "revisionHistoryLimit": 10,
                "selector": {
                    "matchLabels": {
                        "app.kubernetes.io/name": "argocd-applicationset-controller"
                    }
                },
                "strategy": {
                    "rollingUpdate": {
                        "maxSurge": "25%",
                        "maxUnavailable": "25%"
                    },
                    "type": "RollingUpdate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/name": "argocd-applicationset-controller"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "args": [
                                    "/usr/local/bin/argocd-applicationset-controller"
                                ],
                                "env": [
                                    {
                                        "name": "ARGOCD_APPLICATIONSET_CONTROLLER_GLOBAL_PRESERVED_ANNOTATIONS",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "applicationsetcontroller.global.preserved.annotations",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_APPLICATIONSET_CONTROLLER_GLOBAL_PRESERVED_LABELS",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "applicationsetcontroller.global.preserved.labels",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "NAMESPACE",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_LEADER_ELECTION",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "applicationsetcontroller.enable.leader.election",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "repo.server",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_APPLICATIONSET_CONTROLLER_POLICY",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "applicationsetcontroller.policy",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_POLICY_OVERRIDE",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "applicationsetcontroller.enable.policy.override",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_APPLICATIONSET_CONTROLLER_DEBUG",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "applicationsetcontroller.debug",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_APPLICATIONSET_CONTROLLER_LOGFORMAT",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "applicationsetcontroller.log.format",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_APPLICATIONSET_CONTROLLER_LOGLEVEL",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "applicationsetcontroller.log.level",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_LOG_FORMAT_TIMESTAMP",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "log.format.timestamp",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_APPLICATIONSET_CONTROLLER_DRY_RUN",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "applicationsetcontroller.dryrun",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_GIT_MODULES_ENABLED",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "applicationsetcontroller.enable.git.submodule",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_PROGRESSIVE_SYNCS",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "applicationsetcontroller.enable.progressive.syncs",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_APPLICATIONSET_CONTROLLER_TOKENREF_STRICT_MODE",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "applicationsetcontroller.enable.tokenref.strict.mode",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_NEW_GIT_FILE_GLOBBING",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "applicationsetcontroller.enable.new.git.file.globbing",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_PLAINTEXT",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "applicationsetcontroller.repo.server.plaintext",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_STRICT_TLS",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "applicationsetcontroller.repo.server.strict.tls",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_TIMEOUT_SECONDS",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "applicationsetcontroller.repo.server.timeout.seconds",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_APPLICATIONSET_CONTROLLER_CONCURRENT_RECONCILIATIONS",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "applicationsetcontroller.concurrent.reconciliations.max",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_APPLICATIONSET_CONTROLLER_NAMESPACES",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "applicationsetcontroller.namespaces",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_APPLICATIONSET_CONTROLLER_SCM_ROOT_CA_PATH",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "applicationsetcontroller.scm.root.ca.path",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_APPLICATIONSET_CONTROLLER_ALLOWED_SCM_PROVIDERS",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "applicationsetcontroller.allowed.scm.providers",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_SCM_PROVIDERS",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "applicationsetcontroller.enable.scm.providers",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_APPLICATIONSET_CONTROLLER_WEBHOOK_PARALLELISM_LIMIT",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "applicationsetcontroller.webhook.parallelism.limit",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_APPLICATIONSET_CONTROLLER_REQUEUE_AFTER",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "applicationsetcontroller.requeue.after",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    }
                                ],
                                "image": "quay.io/argoproj/argocd:v3.0.6",
                                "imagePullPolicy": "Always",
                                "name": "argocd-applicationset-controller",
                                "ports": [
                                    {
                                        "containerPort": 7000,
                                        "name": "webhook",
                                        "protocol": "TCP"
                                    },
                                    {
                                        "containerPort": 8080,
                                        "name": "metrics",
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {},
                                "securityContext": {
                                    "allowPrivilegeEscalation": false,
                                    "capabilities": {
                                        "drop": [
                                            "ALL"
                                        ]
                                    },
                                    "readOnlyRootFilesystem": true,
                                    "runAsNonRoot": true,
                                    "seccompProfile": {
                                        "type": "RuntimeDefault"
                                    }
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/app/config/ssh",
                                        "name": "ssh-known-hosts"
                                    },
                                    {
                                        "mountPath": "/app/config/tls",
                                        "name": "tls-certs"
                                    },
                                    {
                                        "mountPath": "/app/config/gpg/source",
                                        "name": "gpg-keys"
                                    },
                                    {
                                        "mountPath": "/app/config/gpg/keys",
                                        "name": "gpg-keyring"
                                    },
                                    {
                                        "mountPath": "/tmp",
                                        "name": "tmp"
                                    },
                                    {
                                        "mountPath": "/app/config/reposerver/tls",
                                        "name": "argocd-repo-server-tls"
                                    }
                                ]
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "nodeSelector": {
                            "kubernetes.io/os": "linux"
                        },
                        "restartPolicy": "Always",
                        "schedulerName": "default-scheduler",
                        "securityContext": {},
                        "serviceAccount": "argocd-applicationset-controller",
                        "serviceAccountName": "argocd-applicationset-controller",
                        "terminationGracePeriodSeconds": 30,
                        "volumes": [
                            {
                                "configMap": {
                                    "defaultMode": 420,
                                    "name": "argocd-ssh-known-hosts-cm"
                                },
                                "name": "ssh-known-hosts"
                            },
                            {
                                "configMap": {
                                    "defaultMode": 420,
                                    "name": "argocd-tls-certs-cm"
                                },
                                "name": "tls-certs"
                            },
                            {
                                "configMap": {
                                    "defaultMode": 420,
                                    "name": "argocd-gpg-keys-cm"
                                },
                                "name": "gpg-keys"
                            },
                            {
                                "emptyDir": {},
                                "name": "gpg-keyring"
                            },
                            {
                                "emptyDir": {},
                                "name": "tmp"
                            },
                            {
                                "name": "argocd-repo-server-tls",
                                "secret": {
                                    "defaultMode": 420,
                                    "items": [
                                        {
                                            "key": "tls.crt",
                                            "path": "tls.crt"
                                        },
                                        {
                                            "key": "tls.key",
                                            "path": "tls.key"
                                        },
                                        {
                                            "key": "ca.crt",
                                            "path": "ca.crt"
                                        }
                                    ],
                                    "optional": true,
                                    "secretName": "argocd-repo-server-tls"
                                }
                            }
                        ]
                    }
                }
            },
            "status": {
                "availableReplicas": 1,
                "conditions": [
                    {
                        "lastTransitionTime": "2025-10-01T12:35:35Z",
                        "lastUpdateTime": "2025-10-01T12:35:35Z",
                        "message": "Deployment has minimum availability.",
                        "reason": "MinimumReplicasAvailable",
                        "status": "True",
                        "type": "Available"
                    },
                    {
                        "lastTransitionTime": "2025-10-01T12:35:25Z",
                        "lastUpdateTime": "2025-10-01T12:35:35Z",
                        "message": "ReplicaSet \"argocd-applicationset-controller-787f4cc5bf\" has successfully progressed.",
                        "reason": "NewReplicaSetAvailable",
                        "status": "True",
                        "type": "Progressing"
                    }
                ],
                "observedGeneration": 1,
                "readyReplicas": 1,
                "replicas": 1,
                "updatedReplicas": 1
            }
        },
        {
            "apiVersion": "apps/v1",
            "kind": "Deployment",
            "metadata": {
                "annotations": {
                    "config.k8s.io/owning-inventory": "b3eea0dca944e5ddd5a4d7c4fdcfda74d5608155-1759322119970877404",
                    "deployment.kubernetes.io/revision": "1",
                    "internal.kpt.dev/upstream-identifier": "apps|Deployment|argocd|argocd-dex-server",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{\"config.k8s.io/owning-inventory\":\"b3eea0dca944e5ddd5a4d7c4fdcfda74d5608155-1759322119970877404\",\"internal.kpt.dev/upstream-identifier\":\"apps|Deployment|argocd|argocd-dex-server\"},\"labels\":{\"app.kubernetes.io/component\":\"dex-server\",\"app.kubernetes.io/name\":\"argocd-dex-server\",\"app.kubernetes.io/part-of\":\"argocd\"},\"name\":\"argocd-dex-server\",\"namespace\":\"argocd\"},\"spec\":{\"selector\":{\"matchLabels\":{\"app.kubernetes.io/name\":\"argocd-dex-server\"}},\"template\":{\"metadata\":{\"labels\":{\"app.kubernetes.io/name\":\"argocd-dex-server\"}},\"spec\":{\"affinity\":{\"podAntiAffinity\":{\"preferredDuringSchedulingIgnoredDuringExecution\":[{\"podAffinityTerm\":{\"labelSelector\":{\"matchLabels\":{\"app.kubernetes.io/part-of\":\"argocd\"}},\"topologyKey\":\"kubernetes.io/hostname\"},\"weight\":5}]}},\"containers\":[{\"command\":[\"/shared/argocd-dex\",\"rundex\"],\"env\":[{\"name\":\"ARGOCD_DEX_SERVER_LOGFORMAT\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"dexserver.log.format\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_DEX_SERVER_LOGLEVEL\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"dexserver.log.level\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_LOG_FORMAT_TIMESTAMP\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"log.format.timestamp\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_DEX_SERVER_DISABLE_TLS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"dexserver.disable.tls\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}}],\"image\":\"ghcr.io/dexidp/dex:v2.41.1\",\"imagePullPolicy\":\"Always\",\"name\":\"dex\",\"ports\":[{\"containerPort\":5556},{\"containerPort\":5557},{\"containerPort\":5558}],\"securityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"readOnlyRootFilesystem\":true,\"runAsNonRoot\":true,\"seccompProfile\":{\"type\":\"RuntimeDefault\"}},\"volumeMounts\":[{\"mountPath\":\"/shared\",\"name\":\"static-files\"},{\"mountPath\":\"/tmp\",\"name\":\"dexconfig\"},{\"mountPath\":\"/tls\",\"name\":\"argocd-dex-server-tls\"}]}],\"initContainers\":[{\"command\":[\"/bin/cp\",\"-n\",\"/usr/local/bin/argocd\",\"/shared/argocd-dex\"],\"image\":\"quay.io/argoproj/argocd:v3.0.6\",\"imagePullPolicy\":\"Always\",\"name\":\"copyutil\",\"securityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"readOnlyRootFilesystem\":true,\"runAsNonRoot\":true,\"seccompProfile\":{\"type\":\"RuntimeDefault\"}},\"volumeMounts\":[{\"mountPath\":\"/shared\",\"name\":\"static-files\"},{\"mountPath\":\"/tmp\",\"name\":\"dexconfig\"}]}],\"nodeSelector\":{\"kubernetes.io/os\":\"linux\"},\"serviceAccountName\":\"argocd-dex-server\",\"volumes\":[{\"emptyDir\":{},\"name\":\"static-files\"},{\"emptyDir\":{},\"name\":\"dexconfig\"},{\"name\":\"argocd-dex-server-tls\",\"secret\":{\"items\":[{\"key\":\"tls.crt\",\"path\":\"tls.crt\"},{\"key\":\"tls.key\",\"path\":\"tls.key\"},{\"key\":\"ca.crt\",\"path\":\"ca.crt\"}],\"optional\":true,\"secretName\":\"argocd-dex-server-tls\"}}]}}}}\n"
                },
                "creationTimestamp": "2025-10-01T12:35:25Z",
                "generation": 1,
                "labels": {
                    "app.kubernetes.io/component": "dex-server",
                    "app.kubernetes.io/name": "argocd-dex-server",
                    "app.kubernetes.io/part-of": "argocd"
                },
                "managedFields": [
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:config.k8s.io/owning-inventory": {},
                                    "f:internal.kpt.dev/upstream-identifier": {},
                                    "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:app.kubernetes.io/component": {},
                                    "f:app.kubernetes.io/name": {},
                                    "f:app.kubernetes.io/part-of": {}
                                }
                            },
                            "f:spec": {
                                "f:progressDeadlineSeconds": {},
                                "f:replicas": {},
                                "f:revisionHistoryLimit": {},
                                "f:selector": {},
                                "f:strategy": {
                                    "f:rollingUpdate": {
                                        ".": {},
                                        "f:maxSurge": {},
                                        "f:maxUnavailable": {}
                                    },
                                    "f:type": {}
                                },
                                "f:template": {
                                    "f:metadata": {
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/name": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:affinity": {
                                            ".": {},
                                            "f:podAntiAffinity": {
                                                ".": {},
                                                "f:preferredDuringSchedulingIgnoredDuringExecution": {}
                                            }
                                        },
                                        "f:containers": {
                                            "k:{\"name\":\"dex\"}": {
                                                ".": {},
                                                "f:command": {},
                                                "f:env": {
                                                    ".": {},
                                                    "k:{\"name\":\"ARGOCD_DEX_SERVER_DISABLE_TLS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_DEX_SERVER_LOGFORMAT\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_DEX_SERVER_LOGLEVEL\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_LOG_FORMAT_TIMESTAMP\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    }
                                                },
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:name": {},
                                                "f:ports": {
                                                    ".": {},
                                                    "k:{\"containerPort\":5556,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:protocol": {}
                                                    },
                                                    "k:{\"containerPort\":5557,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:protocol": {}
                                                    },
                                                    "k:{\"containerPort\":5558,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:protocol": {}
                                                    }
                                                },
                                                "f:resources": {},
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:allowPrivilegeEscalation": {},
                                                    "f:capabilities": {
                                                        ".": {},
                                                        "f:drop": {}
                                                    },
                                                    "f:readOnlyRootFilesystem": {},
                                                    "f:runAsNonRoot": {},
                                                    "f:seccompProfile": {
                                                        ".": {},
                                                        "f:type": {}
                                                    }
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {},
                                                "f:volumeMounts": {
                                                    ".": {},
                                                    "k:{\"mountPath\":\"/shared\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    },
                                                    "k:{\"mountPath\":\"/tls\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    },
                                                    "k:{\"mountPath\":\"/tmp\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    }
                                                }
                                            }
                                        },
                                        "f:dnsPolicy": {},
                                        "f:initContainers": {
                                            ".": {},
                                            "k:{\"name\":\"copyutil\"}": {
                                                ".": {},
                                                "f:command": {},
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:name": {},
                                                "f:resources": {},
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:allowPrivilegeEscalation": {},
                                                    "f:capabilities": {
                                                        ".": {},
                                                        "f:drop": {}
                                                    },
                                                    "f:readOnlyRootFilesystem": {},
                                                    "f:runAsNonRoot": {},
                                                    "f:seccompProfile": {
                                                        ".": {},
                                                        "f:type": {}
                                                    }
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {},
                                                "f:volumeMounts": {
                                                    ".": {},
                                                    "k:{\"mountPath\":\"/shared\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    },
                                                    "k:{\"mountPath\":\"/tmp\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    }
                                                }
                                            }
                                        },
                                        "f:nodeSelector": {},
                                        "f:restartPolicy": {},
                                        "f:schedulerName": {},
                                        "f:securityContext": {},
                                        "f:serviceAccount": {},
                                        "f:serviceAccountName": {},
                                        "f:terminationGracePeriodSeconds": {},
                                        "f:volumes": {
                                            ".": {},
                                            "k:{\"name\":\"argocd-dex-server-tls\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:secret": {
                                                    ".": {},
                                                    "f:defaultMode": {},
                                                    "f:items": {},
                                                    "f:optional": {},
                                                    "f:secretName": {}
                                                }
                                            },
                                            "k:{\"name\":\"dexconfig\"}": {
                                                ".": {},
                                                "f:emptyDir": {},
                                                "f:name": {}
                                            },
                                            "k:{\"name\":\"static-files\"}": {
                                                ".": {},
                                                "f:emptyDir": {},
                                                "f:name": {}
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "manager": "kubectl",
                        "operation": "Update",
                        "time": "2025-10-01T12:35:25Z"
                    },
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    "f:deployment.kubernetes.io/revision": {}
                                }
                            },
                            "f:status": {
                                "f:availableReplicas": {},
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"Available\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Progressing\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:observedGeneration": {},
                                "f:readyReplicas": {},
                                "f:replicas": {},
                                "f:updatedReplicas": {}
                            }
                        },
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "subresource": "status",
                        "time": "2025-10-01T12:35:49Z"
                    }
                ],
                "name": "argocd-dex-server",
                "namespace": "argocd",
                "resourceVersion": "5645",
                "uid": "375d5a56-bec4-40d8-a427-6ace0a5a55ea"
            },
            "spec": {
                "progressDeadlineSeconds": 600,
                "replicas": 1,
                "revisionHistoryLimit": 10,
                "selector": {
                    "matchLabels": {
                        "app.kubernetes.io/name": "argocd-dex-server"
                    }
                },
                "strategy": {
                    "rollingUpdate": {
                        "maxSurge": "25%",
                        "maxUnavailable": "25%"
                    },
                    "type": "RollingUpdate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/name": "argocd-dex-server"
                        }
                    },
                    "spec": {
                        "affinity": {
                            "podAntiAffinity": {
                                "preferredDuringSchedulingIgnoredDuringExecution": [
                                    {
                                        "podAffinityTerm": {
                                            "labelSelector": {
                                                "matchLabels": {
                                                    "app.kubernetes.io/part-of": "argocd"
                                                }
                                            },
                                            "topologyKey": "kubernetes.io/hostname"
                                        },
                                        "weight": 5
                                    }
                                ]
                            }
                        },
                        "containers": [
                            {
                                "command": [
                                    "/shared/argocd-dex",
                                    "rundex"
                                ],
                                "env": [
                                    {
                                        "name": "ARGOCD_DEX_SERVER_LOGFORMAT",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "dexserver.log.format",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_DEX_SERVER_LOGLEVEL",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "dexserver.log.level",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_LOG_FORMAT_TIMESTAMP",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "log.format.timestamp",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_DEX_SERVER_DISABLE_TLS",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "dexserver.disable.tls",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    }
                                ],
                                "image": "ghcr.io/dexidp/dex:v2.41.1",
                                "imagePullPolicy": "Always",
                                "name": "dex",
                                "ports": [
                                    {
                                        "containerPort": 5556,
                                        "protocol": "TCP"
                                    },
                                    {
                                        "containerPort": 5557,
                                        "protocol": "TCP"
                                    },
                                    {
                                        "containerPort": 5558,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {},
                                "securityContext": {
                                    "allowPrivilegeEscalation": false,
                                    "capabilities": {
                                        "drop": [
                                            "ALL"
                                        ]
                                    },
                                    "readOnlyRootFilesystem": true,
                                    "runAsNonRoot": true,
                                    "seccompProfile": {
                                        "type": "RuntimeDefault"
                                    }
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/shared",
                                        "name": "static-files"
                                    },
                                    {
                                        "mountPath": "/tmp",
                                        "name": "dexconfig"
                                    },
                                    {
                                        "mountPath": "/tls",
                                        "name": "argocd-dex-server-tls"
                                    }
                                ]
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "initContainers": [
                            {
                                "command": [
                                    "/bin/cp",
                                    "-n",
                                    "/usr/local/bin/argocd",
                                    "/shared/argocd-dex"
                                ],
                                "image": "quay.io/argoproj/argocd:v3.0.6",
                                "imagePullPolicy": "Always",
                                "name": "copyutil",
                                "resources": {},
                                "securityContext": {
                                    "allowPrivilegeEscalation": false,
                                    "capabilities": {
                                        "drop": [
                                            "ALL"
                                        ]
                                    },
                                    "readOnlyRootFilesystem": true,
                                    "runAsNonRoot": true,
                                    "seccompProfile": {
                                        "type": "RuntimeDefault"
                                    }
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/shared",
                                        "name": "static-files"
                                    },
                                    {
                                        "mountPath": "/tmp",
                                        "name": "dexconfig"
                                    }
                                ]
                            }
                        ],
                        "nodeSelector": {
                            "kubernetes.io/os": "linux"
                        },
                        "restartPolicy": "Always",
                        "schedulerName": "default-scheduler",
                        "securityContext": {},
                        "serviceAccount": "argocd-dex-server",
                        "serviceAccountName": "argocd-dex-server",
                        "terminationGracePeriodSeconds": 30,
                        "volumes": [
                            {
                                "emptyDir": {},
                                "name": "static-files"
                            },
                            {
                                "emptyDir": {},
                                "name": "dexconfig"
                            },
                            {
                                "name": "argocd-dex-server-tls",
                                "secret": {
                                    "defaultMode": 420,
                                    "items": [
                                        {
                                            "key": "tls.crt",
                                            "path": "tls.crt"
                                        },
                                        {
                                            "key": "tls.key",
                                            "path": "tls.key"
                                        },
                                        {
                                            "key": "ca.crt",
                                            "path": "ca.crt"
                                        }
                                    ],
                                    "optional": true,
                                    "secretName": "argocd-dex-server-tls"
                                }
                            }
                        ]
                    }
                }
            },
            "status": {
                "availableReplicas": 1,
                "conditions": [
                    {
                        "lastTransitionTime": "2025-10-01T12:35:49Z",
                        "lastUpdateTime": "2025-10-01T12:35:49Z",
                        "message": "Deployment has minimum availability.",
                        "reason": "MinimumReplicasAvailable",
                        "status": "True",
                        "type": "Available"
                    },
                    {
                        "lastTransitionTime": "2025-10-01T12:35:25Z",
                        "lastUpdateTime": "2025-10-01T12:35:49Z",
                        "message": "ReplicaSet \"argocd-dex-server-67677d8f7b\" has successfully progressed.",
                        "reason": "NewReplicaSetAvailable",
                        "status": "True",
                        "type": "Progressing"
                    }
                ],
                "observedGeneration": 1,
                "readyReplicas": 1,
                "replicas": 1,
                "updatedReplicas": 1
            }
        },
        {
            "apiVersion": "apps/v1",
            "kind": "Deployment",
            "metadata": {
                "annotations": {
                    "config.k8s.io/owning-inventory": "b3eea0dca944e5ddd5a4d7c4fdcfda74d5608155-1759322119970877404",
                    "deployment.kubernetes.io/revision": "1",
                    "internal.kpt.dev/upstream-identifier": "apps|Deployment|argocd|argocd-notifications-controller",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{\"config.k8s.io/owning-inventory\":\"b3eea0dca944e5ddd5a4d7c4fdcfda74d5608155-1759322119970877404\",\"internal.kpt.dev/upstream-identifier\":\"apps|Deployment|argocd|argocd-notifications-controller\"},\"labels\":{\"app.kubernetes.io/component\":\"notifications-controller\",\"app.kubernetes.io/name\":\"argocd-notifications-controller\",\"app.kubernetes.io/part-of\":\"argocd\"},\"name\":\"argocd-notifications-controller\",\"namespace\":\"argocd\"},\"spec\":{\"selector\":{\"matchLabels\":{\"app.kubernetes.io/name\":\"argocd-notifications-controller\"}},\"strategy\":{\"type\":\"Recreate\"},\"template\":{\"metadata\":{\"labels\":{\"app.kubernetes.io/name\":\"argocd-notifications-controller\"}},\"spec\":{\"containers\":[{\"args\":[\"/usr/local/bin/argocd-notifications\"],\"env\":[{\"name\":\"ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"notificationscontroller.log.format\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_NOTIFICATIONS_CONTROLLER_LOGLEVEL\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"notificationscontroller.log.level\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_LOG_FORMAT_TIMESTAMP\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"log.format.timestamp\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_APPLICATION_NAMESPACES\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"application.namespaces\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_NOTIFICATION_CONTROLLER_SELF_SERVICE_NOTIFICATION_ENABLED\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"notificationscontroller.selfservice.enabled\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_NOTIFICATION_CONTROLLER_REPO_SERVER_PLAINTEXT\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"notificationscontroller.repo.server.plaintext\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}}],\"image\":\"quay.io/argoproj/argocd:v3.0.6\",\"imagePullPolicy\":\"Always\",\"livenessProbe\":{\"tcpSocket\":{\"port\":9001}},\"name\":\"argocd-notifications-controller\",\"securityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"readOnlyRootFilesystem\":true},\"volumeMounts\":[{\"mountPath\":\"/app/config/tls\",\"name\":\"tls-certs\"},{\"mountPath\":\"/app/config/reposerver/tls\",\"name\":\"argocd-repo-server-tls\"}],\"workingDir\":\"/app\"}],\"nodeSelector\":{\"kubernetes.io/os\":\"linux\"},\"securityContext\":{\"runAsNonRoot\":true,\"seccompProfile\":{\"type\":\"RuntimeDefault\"}},\"serviceAccountName\":\"argocd-notifications-controller\",\"volumes\":[{\"configMap\":{\"name\":\"argocd-tls-certs-cm\"},\"name\":\"tls-certs\"},{\"name\":\"argocd-repo-server-tls\",\"secret\":{\"items\":[{\"key\":\"tls.crt\",\"path\":\"tls.crt\"},{\"key\":\"tls.key\",\"path\":\"tls.key\"},{\"key\":\"ca.crt\",\"path\":\"ca.crt\"}],\"optional\":true,\"secretName\":\"argocd-repo-server-tls\"}}]}}}}\n"
                },
                "creationTimestamp": "2025-10-01T12:35:25Z",
                "generation": 1,
                "labels": {
                    "app.kubernetes.io/component": "notifications-controller",
                    "app.kubernetes.io/name": "argocd-notifications-controller",
                    "app.kubernetes.io/part-of": "argocd"
                },
                "managedFields": [
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:config.k8s.io/owning-inventory": {},
                                    "f:internal.kpt.dev/upstream-identifier": {},
                                    "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:app.kubernetes.io/component": {},
                                    "f:app.kubernetes.io/name": {},
                                    "f:app.kubernetes.io/part-of": {}
                                }
                            },
                            "f:spec": {
                                "f:progressDeadlineSeconds": {},
                                "f:replicas": {},
                                "f:revisionHistoryLimit": {},
                                "f:selector": {},
                                "f:strategy": {
                                    "f:type": {}
                                },
                                "f:template": {
                                    "f:metadata": {
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/name": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:containers": {
                                            "k:{\"name\":\"argocd-notifications-controller\"}": {
                                                ".": {},
                                                "f:args": {},
                                                "f:env": {
                                                    ".": {},
                                                    "k:{\"name\":\"ARGOCD_APPLICATION_NAMESPACES\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_LOG_FORMAT_TIMESTAMP\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_NOTIFICATIONS_CONTROLLER_LOGLEVEL\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_NOTIFICATION_CONTROLLER_REPO_SERVER_PLAINTEXT\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_NOTIFICATION_CONTROLLER_SELF_SERVICE_NOTIFICATION_ENABLED\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    }
                                                },
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:livenessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:tcpSocket": {
                                                        ".": {},
                                                        "f:port": {}
                                                    },
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:name": {},
                                                "f:resources": {},
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:allowPrivilegeEscalation": {},
                                                    "f:capabilities": {
                                                        ".": {},
                                                        "f:drop": {}
                                                    },
                                                    "f:readOnlyRootFilesystem": {}
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {},
                                                "f:volumeMounts": {
                                                    ".": {},
                                                    "k:{\"mountPath\":\"/app/config/reposerver/tls\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    },
                                                    "k:{\"mountPath\":\"/app/config/tls\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    }
                                                },
                                                "f:workingDir": {}
                                            }
                                        },
                                        "f:dnsPolicy": {},
                                        "f:nodeSelector": {},
                                        "f:restartPolicy": {},
                                        "f:schedulerName": {},
                                        "f:securityContext": {
                                            ".": {},
                                            "f:runAsNonRoot": {},
                                            "f:seccompProfile": {
                                                ".": {},
                                                "f:type": {}
                                            }
                                        },
                                        "f:serviceAccount": {},
                                        "f:serviceAccountName": {},
                                        "f:terminationGracePeriodSeconds": {},
                                        "f:volumes": {
                                            ".": {},
                                            "k:{\"name\":\"argocd-repo-server-tls\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:secret": {
                                                    ".": {},
                                                    "f:defaultMode": {},
                                                    "f:items": {},
                                                    "f:optional": {},
                                                    "f:secretName": {}
                                                }
                                            },
                                            "k:{\"name\":\"tls-certs\"}": {
                                                ".": {},
                                                "f:configMap": {
                                                    ".": {},
                                                    "f:defaultMode": {},
                                                    "f:name": {}
                                                },
                                                "f:name": {}
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "manager": "kubectl",
                        "operation": "Update",
                        "time": "2025-10-01T12:35:25Z"
                    },
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    "f:deployment.kubernetes.io/revision": {}
                                }
                            },
                            "f:status": {
                                "f:availableReplicas": {},
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"Available\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Progressing\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:observedGeneration": {},
                                "f:readyReplicas": {},
                                "f:replicas": {},
                                "f:updatedReplicas": {}
                            }
                        },
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "subresource": "status",
                        "time": "2025-10-01T12:35:35Z"
                    }
                ],
                "name": "argocd-notifications-controller",
                "namespace": "argocd",
                "resourceVersion": "5508",
                "uid": "0f8587fa-976b-44a2-a1c7-e94d38b11d56"
            },
            "spec": {
                "progressDeadlineSeconds": 600,
                "replicas": 1,
                "revisionHistoryLimit": 10,
                "selector": {
                    "matchLabels": {
                        "app.kubernetes.io/name": "argocd-notifications-controller"
                    }
                },
                "strategy": {
                    "type": "Recreate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/name": "argocd-notifications-controller"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "args": [
                                    "/usr/local/bin/argocd-notifications"
                                ],
                                "env": [
                                    {
                                        "name": "ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "notificationscontroller.log.format",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_NOTIFICATIONS_CONTROLLER_LOGLEVEL",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "notificationscontroller.log.level",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_LOG_FORMAT_TIMESTAMP",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "log.format.timestamp",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_APPLICATION_NAMESPACES",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "application.namespaces",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_NOTIFICATION_CONTROLLER_SELF_SERVICE_NOTIFICATION_ENABLED",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "notificationscontroller.selfservice.enabled",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_NOTIFICATION_CONTROLLER_REPO_SERVER_PLAINTEXT",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "notificationscontroller.repo.server.plaintext",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    }
                                ],
                                "image": "quay.io/argoproj/argocd:v3.0.6",
                                "imagePullPolicy": "Always",
                                "livenessProbe": {
                                    "failureThreshold": 3,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "tcpSocket": {
                                        "port": 9001
                                    },
                                    "timeoutSeconds": 1
                                },
                                "name": "argocd-notifications-controller",
                                "resources": {},
                                "securityContext": {
                                    "allowPrivilegeEscalation": false,
                                    "capabilities": {
                                        "drop": [
                                            "ALL"
                                        ]
                                    },
                                    "readOnlyRootFilesystem": true
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/app/config/tls",
                                        "name": "tls-certs"
                                    },
                                    {
                                        "mountPath": "/app/config/reposerver/tls",
                                        "name": "argocd-repo-server-tls"
                                    }
                                ],
                                "workingDir": "/app"
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "nodeSelector": {
                            "kubernetes.io/os": "linux"
                        },
                        "restartPolicy": "Always",
                        "schedulerName": "default-scheduler",
                        "securityContext": {
                            "runAsNonRoot": true,
                            "seccompProfile": {
                                "type": "RuntimeDefault"
                            }
                        },
                        "serviceAccount": "argocd-notifications-controller",
                        "serviceAccountName": "argocd-notifications-controller",
                        "terminationGracePeriodSeconds": 30,
                        "volumes": [
                            {
                                "configMap": {
                                    "defaultMode": 420,
                                    "name": "argocd-tls-certs-cm"
                                },
                                "name": "tls-certs"
                            },
                            {
                                "name": "argocd-repo-server-tls",
                                "secret": {
                                    "defaultMode": 420,
                                    "items": [
                                        {
                                            "key": "tls.crt",
                                            "path": "tls.crt"
                                        },
                                        {
                                            "key": "tls.key",
                                            "path": "tls.key"
                                        },
                                        {
                                            "key": "ca.crt",
                                            "path": "ca.crt"
                                        }
                                    ],
                                    "optional": true,
                                    "secretName": "argocd-repo-server-tls"
                                }
                            }
                        ]
                    }
                }
            },
            "status": {
                "availableReplicas": 1,
                "conditions": [
                    {
                        "lastTransitionTime": "2025-10-01T12:35:35Z",
                        "lastUpdateTime": "2025-10-01T12:35:35Z",
                        "message": "Deployment has minimum availability.",
                        "reason": "MinimumReplicasAvailable",
                        "status": "True",
                        "type": "Available"
                    },
                    {
                        "lastTransitionTime": "2025-10-01T12:35:25Z",
                        "lastUpdateTime": "2025-10-01T12:35:35Z",
                        "message": "ReplicaSet \"argocd-notifications-controller-586b4bf99b\" has successfully progressed.",
                        "reason": "NewReplicaSetAvailable",
                        "status": "True",
                        "type": "Progressing"
                    }
                ],
                "observedGeneration": 1,
                "readyReplicas": 1,
                "replicas": 1,
                "updatedReplicas": 1
            }
        },
        {
            "apiVersion": "apps/v1",
            "kind": "Deployment",
            "metadata": {
                "annotations": {
                    "config.k8s.io/owning-inventory": "b3eea0dca944e5ddd5a4d7c4fdcfda74d5608155-1759322119970877404",
                    "deployment.kubernetes.io/revision": "1",
                    "internal.kpt.dev/upstream-identifier": "apps|Deployment|argocd|argocd-redis",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{\"config.k8s.io/owning-inventory\":\"b3eea0dca944e5ddd5a4d7c4fdcfda74d5608155-1759322119970877404\",\"internal.kpt.dev/upstream-identifier\":\"apps|Deployment|argocd|argocd-redis\"},\"labels\":{\"app.kubernetes.io/component\":\"redis\",\"app.kubernetes.io/name\":\"argocd-redis\",\"app.kubernetes.io/part-of\":\"argocd\"},\"name\":\"argocd-redis\",\"namespace\":\"argocd\"},\"spec\":{\"selector\":{\"matchLabels\":{\"app.kubernetes.io/name\":\"argocd-redis\"}},\"template\":{\"metadata\":{\"labels\":{\"app.kubernetes.io/name\":\"argocd-redis\"}},\"spec\":{\"affinity\":{\"podAntiAffinity\":{\"preferredDuringSchedulingIgnoredDuringExecution\":[{\"podAffinityTerm\":{\"labelSelector\":{\"matchLabels\":{\"app.kubernetes.io/name\":\"argocd-redis\"}},\"topologyKey\":\"kubernetes.io/hostname\"},\"weight\":100},{\"podAffinityTerm\":{\"labelSelector\":{\"matchLabels\":{\"app.kubernetes.io/part-of\":\"argocd\"}},\"topologyKey\":\"kubernetes.io/hostname\"},\"weight\":5}]}},\"containers\":[{\"args\":[\"--save\",\"\",\"--appendonly\",\"no\",\"--requirepass $(REDIS_PASSWORD)\"],\"env\":[{\"name\":\"REDIS_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"auth\",\"name\":\"argocd-redis\"}}}],\"image\":\"redis:7.2.7-alpine\",\"imagePullPolicy\":\"Always\",\"name\":\"redis\",\"ports\":[{\"containerPort\":6379}],\"securityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"readOnlyRootFilesystem\":true}}],\"initContainers\":[{\"command\":[\"argocd\",\"admin\",\"redis-initial-password\"],\"image\":\"quay.io/argoproj/argocd:v3.0.6\",\"imagePullPolicy\":\"IfNotPresent\",\"name\":\"secret-init\",\"securityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"readOnlyRootFilesystem\":true,\"runAsNonRoot\":true,\"seccompProfile\":{\"type\":\"RuntimeDefault\"}}}],\"nodeSelector\":{\"kubernetes.io/os\":\"linux\"},\"securityContext\":{\"runAsNonRoot\":true,\"runAsUser\":999,\"seccompProfile\":{\"type\":\"RuntimeDefault\"}},\"serviceAccountName\":\"argocd-redis\"}}}}\n"
                },
                "creationTimestamp": "2025-10-01T12:35:25Z",
                "generation": 1,
                "labels": {
                    "app.kubernetes.io/component": "redis",
                    "app.kubernetes.io/name": "argocd-redis",
                    "app.kubernetes.io/part-of": "argocd"
                },
                "managedFields": [
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:config.k8s.io/owning-inventory": {},
                                    "f:internal.kpt.dev/upstream-identifier": {},
                                    "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:app.kubernetes.io/component": {},
                                    "f:app.kubernetes.io/name": {},
                                    "f:app.kubernetes.io/part-of": {}
                                }
                            },
                            "f:spec": {
                                "f:progressDeadlineSeconds": {},
                                "f:replicas": {},
                                "f:revisionHistoryLimit": {},
                                "f:selector": {},
                                "f:strategy": {
                                    "f:rollingUpdate": {
                                        ".": {},
                                        "f:maxSurge": {},
                                        "f:maxUnavailable": {}
                                    },
                                    "f:type": {}
                                },
                                "f:template": {
                                    "f:metadata": {
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/name": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:affinity": {
                                            ".": {},
                                            "f:podAntiAffinity": {
                                                ".": {},
                                                "f:preferredDuringSchedulingIgnoredDuringExecution": {}
                                            }
                                        },
                                        "f:containers": {
                                            "k:{\"name\":\"redis\"}": {
                                                ".": {},
                                                "f:args": {},
                                                "f:env": {
                                                    ".": {},
                                                    "k:{\"name\":\"REDIS_PASSWORD\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:secretKeyRef": {}
                                                        }
                                                    }
                                                },
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:name": {},
                                                "f:ports": {
                                                    ".": {},
                                                    "k:{\"containerPort\":6379,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:protocol": {}
                                                    }
                                                },
                                                "f:resources": {},
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:allowPrivilegeEscalation": {},
                                                    "f:capabilities": {
                                                        ".": {},
                                                        "f:drop": {}
                                                    },
                                                    "f:readOnlyRootFilesystem": {}
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {}
                                            }
                                        },
                                        "f:dnsPolicy": {},
                                        "f:initContainers": {
                                            ".": {},
                                            "k:{\"name\":\"secret-init\"}": {
                                                ".": {},
                                                "f:command": {},
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:name": {},
                                                "f:resources": {},
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:allowPrivilegeEscalation": {},
                                                    "f:capabilities": {
                                                        ".": {},
                                                        "f:drop": {}
                                                    },
                                                    "f:readOnlyRootFilesystem": {},
                                                    "f:runAsNonRoot": {},
                                                    "f:seccompProfile": {
                                                        ".": {},
                                                        "f:type": {}
                                                    }
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {}
                                            }
                                        },
                                        "f:nodeSelector": {},
                                        "f:restartPolicy": {},
                                        "f:schedulerName": {},
                                        "f:securityContext": {
                                            ".": {},
                                            "f:runAsNonRoot": {},
                                            "f:runAsUser": {},
                                            "f:seccompProfile": {
                                                ".": {},
                                                "f:type": {}
                                            }
                                        },
                                        "f:serviceAccount": {},
                                        "f:serviceAccountName": {},
                                        "f:terminationGracePeriodSeconds": {}
                                    }
                                }
                            }
                        },
                        "manager": "kubectl",
                        "operation": "Update",
                        "time": "2025-10-01T12:35:25Z"
                    },
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    "f:deployment.kubernetes.io/revision": {}
                                }
                            },
                            "f:status": {
                                "f:availableReplicas": {},
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"Available\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Progressing\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:observedGeneration": {},
                                "f:readyReplicas": {},
                                "f:replicas": {},
                                "f:updatedReplicas": {}
                            }
                        },
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "subresource": "status",
                        "time": "2025-10-01T12:35:43Z"
                    }
                ],
                "name": "argocd-redis",
                "namespace": "argocd",
                "resourceVersion": "5592",
                "uid": "f6391adb-7426-4558-9507-430c32817b13"
            },
            "spec": {
                "progressDeadlineSeconds": 600,
                "replicas": 1,
                "revisionHistoryLimit": 10,
                "selector": {
                    "matchLabels": {
                        "app.kubernetes.io/name": "argocd-redis"
                    }
                },
                "strategy": {
                    "rollingUpdate": {
                        "maxSurge": "25%",
                        "maxUnavailable": "25%"
                    },
                    "type": "RollingUpdate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/name": "argocd-redis"
                        }
                    },
                    "spec": {
                        "affinity": {
                            "podAntiAffinity": {
                                "preferredDuringSchedulingIgnoredDuringExecution": [
                                    {
                                        "podAffinityTerm": {
                                            "labelSelector": {
                                                "matchLabels": {
                                                    "app.kubernetes.io/name": "argocd-redis"
                                                }
                                            },
                                            "topologyKey": "kubernetes.io/hostname"
                                        },
                                        "weight": 100
                                    },
                                    {
                                        "podAffinityTerm": {
                                            "labelSelector": {
                                                "matchLabels": {
                                                    "app.kubernetes.io/part-of": "argocd"
                                                }
                                            },
                                            "topologyKey": "kubernetes.io/hostname"
                                        },
                                        "weight": 5
                                    }
                                ]
                            }
                        },
                        "containers": [
                            {
                                "args": [
                                    "--save",
                                    "",
                                    "--appendonly",
                                    "no",
                                    "--requirepass $(REDIS_PASSWORD)"
                                ],
                                "env": [
                                    {
                                        "name": "REDIS_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "auth",
                                                "name": "argocd-redis"
                                            }
                                        }
                                    }
                                ],
                                "image": "redis:7.2.7-alpine",
                                "imagePullPolicy": "Always",
                                "name": "redis",
                                "ports": [
                                    {
                                        "containerPort": 6379,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {},
                                "securityContext": {
                                    "allowPrivilegeEscalation": false,
                                    "capabilities": {
                                        "drop": [
                                            "ALL"
                                        ]
                                    },
                                    "readOnlyRootFilesystem": true
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File"
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "initContainers": [
                            {
                                "command": [
                                    "argocd",
                                    "admin",
                                    "redis-initial-password"
                                ],
                                "image": "quay.io/argoproj/argocd:v3.0.6",
                                "imagePullPolicy": "IfNotPresent",
                                "name": "secret-init",
                                "resources": {},
                                "securityContext": {
                                    "allowPrivilegeEscalation": false,
                                    "capabilities": {
                                        "drop": [
                                            "ALL"
                                        ]
                                    },
                                    "readOnlyRootFilesystem": true,
                                    "runAsNonRoot": true,
                                    "seccompProfile": {
                                        "type": "RuntimeDefault"
                                    }
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File"
                            }
                        ],
                        "nodeSelector": {
                            "kubernetes.io/os": "linux"
                        },
                        "restartPolicy": "Always",
                        "schedulerName": "default-scheduler",
                        "securityContext": {
                            "runAsNonRoot": true,
                            "runAsUser": 999,
                            "seccompProfile": {
                                "type": "RuntimeDefault"
                            }
                        },
                        "serviceAccount": "argocd-redis",
                        "serviceAccountName": "argocd-redis",
                        "terminationGracePeriodSeconds": 30
                    }
                }
            },
            "status": {
                "availableReplicas": 1,
                "conditions": [
                    {
                        "lastTransitionTime": "2025-10-01T12:35:43Z",
                        "lastUpdateTime": "2025-10-01T12:35:43Z",
                        "message": "Deployment has minimum availability.",
                        "reason": "MinimumReplicasAvailable",
                        "status": "True",
                        "type": "Available"
                    },
                    {
                        "lastTransitionTime": "2025-10-01T12:35:25Z",
                        "lastUpdateTime": "2025-10-01T12:35:43Z",
                        "message": "ReplicaSet \"argocd-redis-dd46cfd64\" has successfully progressed.",
                        "reason": "NewReplicaSetAvailable",
                        "status": "True",
                        "type": "Progressing"
                    }
                ],
                "observedGeneration": 1,
                "readyReplicas": 1,
                "replicas": 1,
                "updatedReplicas": 1
            }
        },
        {
            "apiVersion": "apps/v1",
            "kind": "Deployment",
            "metadata": {
                "annotations": {
                    "config.k8s.io/owning-inventory": "b3eea0dca944e5ddd5a4d7c4fdcfda74d5608155-1759322119970877404",
                    "deployment.kubernetes.io/revision": "1",
                    "internal.kpt.dev/upstream-identifier": "apps|Deployment|argocd|argocd-repo-server",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{\"config.k8s.io/owning-inventory\":\"b3eea0dca944e5ddd5a4d7c4fdcfda74d5608155-1759322119970877404\",\"internal.kpt.dev/upstream-identifier\":\"apps|Deployment|argocd|argocd-repo-server\"},\"labels\":{\"app.kubernetes.io/component\":\"repo-server\",\"app.kubernetes.io/name\":\"argocd-repo-server\",\"app.kubernetes.io/part-of\":\"argocd\"},\"name\":\"argocd-repo-server\",\"namespace\":\"argocd\"},\"spec\":{\"selector\":{\"matchLabels\":{\"app.kubernetes.io/name\":\"argocd-repo-server\"}},\"template\":{\"metadata\":{\"labels\":{\"app.kubernetes.io/name\":\"argocd-repo-server\"}},\"spec\":{\"affinity\":{\"podAntiAffinity\":{\"preferredDuringSchedulingIgnoredDuringExecution\":[{\"podAffinityTerm\":{\"labelSelector\":{\"matchLabels\":{\"app.kubernetes.io/name\":\"argocd-repo-server\"}},\"topologyKey\":\"kubernetes.io/hostname\"},\"weight\":100},{\"podAffinityTerm\":{\"labelSelector\":{\"matchLabels\":{\"app.kubernetes.io/part-of\":\"argocd\"}},\"topologyKey\":\"kubernetes.io/hostname\"},\"weight\":5}]}},\"automountServiceAccountToken\":false,\"containers\":[{\"args\":[\"/usr/local/bin/argocd-repo-server\"],\"env\":[{\"name\":\"REDIS_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"auth\",\"name\":\"argocd-redis\"}}},{\"name\":\"ARGOCD_RECONCILIATION_TIMEOUT\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"timeout.reconciliation\",\"name\":\"argocd-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_REPO_SERVER_LOGFORMAT\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"reposerver.log.format\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_REPO_SERVER_LOGLEVEL\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"reposerver.log.level\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_LOG_FORMAT_TIMESTAMP\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"log.format.timestamp\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_REPO_SERVER_PARALLELISM_LIMIT\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"reposerver.parallelism.limit\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_REPO_SERVER_LISTEN_ADDRESS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"reposerver.listen.address\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_REPO_SERVER_LISTEN_METRICS_ADDRESS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"reposerver.metrics.listen.address\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_REPO_SERVER_DISABLE_TLS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"reposerver.disable.tls\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_TLS_MIN_VERSION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"reposerver.tls.minversion\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_TLS_MAX_VERSION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"reposerver.tls.maxversion\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_TLS_CIPHERS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"reposerver.tls.ciphers\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_REPO_CACHE_EXPIRATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"reposerver.repo.cache.expiration\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"REDIS_SERVER\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"redis.server\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"REDIS_COMPRESSION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"redis.compression\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"REDISDB\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"redis.db\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_DEFAULT_CACHE_EXPIRATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"reposerver.default.cache.expiration\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_REPO_SERVER_OTLP_ADDRESS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"otlp.address\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_REPO_SERVER_OTLP_INSECURE\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"otlp.insecure\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_REPO_SERVER_OTLP_HEADERS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"otlp.headers\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_REPO_SERVER_OTLP_ATTRS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"otlp.attrs\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_REPO_SERVER_MAX_COMBINED_DIRECTORY_MANIFESTS_SIZE\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"reposerver.max.combined.directory.manifests.size\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_REPO_SERVER_PLUGIN_TAR_EXCLUSIONS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"reposerver.plugin.tar.exclusions\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_REPO_SERVER_PLUGIN_USE_MANIFEST_GENERATE_PATHS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"reposerver.plugin.use.manifest.generate.paths\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_REPO_SERVER_ALLOW_OUT_OF_BOUNDS_SYMLINKS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"reposerver.allow.oob.symlinks\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_TAR_SIZE\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"reposerver.streamed.manifest.max.tar.size\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_EXTRACTED_SIZE\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"reposerver.streamed.manifest.max.extracted.size\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_REPO_SERVER_HELM_MANIFEST_MAX_EXTRACTED_SIZE\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"reposerver.helm.manifest.max.extracted.size\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_REPO_SERVER_DISABLE_HELM_MANIFEST_MAX_EXTRACTED_SIZE\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"reposerver.disable.helm.manifest.max.extracted.size\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_REVISION_CACHE_LOCK_TIMEOUT\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"reposerver.revision.cache.lock.timeout\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_GIT_MODULES_ENABLED\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"reposerver.enable.git.submodule\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_GIT_LS_REMOTE_PARALLELISM_LIMIT\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"reposerver.git.lsremote.parallelism.limit\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_GIT_REQUEST_TIMEOUT\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"reposerver.git.request.timeout\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_GRPC_MAX_SIZE_MB\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"reposerver.grpc.max.size\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_REPO_SERVER_INCLUDE_HIDDEN_DIRECTORIES\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"reposerver.include.hidden.directories\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"HELM_CACHE_HOME\",\"value\":\"/helm-working-dir\"},{\"name\":\"HELM_CONFIG_HOME\",\"value\":\"/helm-working-dir\"},{\"name\":\"HELM_DATA_HOME\",\"value\":\"/helm-working-dir\"}],\"image\":\"quay.io/argoproj/argocd:v3.0.6\",\"imagePullPolicy\":\"Always\",\"livenessProbe\":{\"failureThreshold\":3,\"httpGet\":{\"path\":\"/healthz?full=true\",\"port\":8084},\"initialDelaySeconds\":30,\"periodSeconds\":30,\"timeoutSeconds\":5},\"name\":\"argocd-repo-server\",\"ports\":[{\"containerPort\":8081},{\"containerPort\":8084}],\"readinessProbe\":{\"httpGet\":{\"path\":\"/healthz\",\"port\":8084},\"initialDelaySeconds\":5,\"periodSeconds\":10},\"securityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"readOnlyRootFilesystem\":true,\"runAsNonRoot\":true,\"seccompProfile\":{\"type\":\"RuntimeDefault\"}},\"volumeMounts\":[{\"mountPath\":\"/app/config/ssh\",\"name\":\"ssh-known-hosts\"},{\"mountPath\":\"/app/config/tls\",\"name\":\"tls-certs\"},{\"mountPath\":\"/app/config/gpg/source\",\"name\":\"gpg-keys\"},{\"mountPath\":\"/app/config/gpg/keys\",\"name\":\"gpg-keyring\"},{\"mountPath\":\"/app/config/reposerver/tls\",\"name\":\"argocd-repo-server-tls\"},{\"mountPath\":\"/tmp\",\"name\":\"tmp\"},{\"mountPath\":\"/helm-working-dir\",\"name\":\"helm-working-dir\"},{\"mountPath\":\"/home/argocd/cmp-server/plugins\",\"name\":\"plugins\"}]}],\"initContainers\":[{\"command\":[\"/bin/cp\",\"-n\",\"/usr/local/bin/argocd\",\"/var/run/argocd/argocd-cmp-server\"],\"image\":\"quay.io/argoproj/argocd:v3.0.6\",\"name\":\"copyutil\",\"securityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"readOnlyRootFilesystem\":true,\"runAsNonRoot\":true,\"seccompProfile\":{\"type\":\"RuntimeDefault\"}},\"volumeMounts\":[{\"mountPath\":\"/var/run/argocd\",\"name\":\"var-files\"}]}],\"nodeSelector\":{\"kubernetes.io/os\":\"linux\"},\"serviceAccountName\":\"argocd-repo-server\",\"volumes\":[{\"configMap\":{\"name\":\"argocd-ssh-known-hosts-cm\"},\"name\":\"ssh-known-hosts\"},{\"configMap\":{\"name\":\"argocd-tls-certs-cm\"},\"name\":\"tls-certs\"},{\"configMap\":{\"name\":\"argocd-gpg-keys-cm\"},\"name\":\"gpg-keys\"},{\"emptyDir\":{},\"name\":\"gpg-keyring\"},{\"emptyDir\":{},\"name\":\"tmp\"},{\"emptyDir\":{},\"name\":\"helm-working-dir\"},{\"name\":\"argocd-repo-server-tls\",\"secret\":{\"items\":[{\"key\":\"tls.crt\",\"path\":\"tls.crt\"},{\"key\":\"tls.key\",\"path\":\"tls.key\"},{\"key\":\"ca.crt\",\"path\":\"ca.crt\"}],\"optional\":true,\"secretName\":\"argocd-repo-server-tls\"}},{\"emptyDir\":{},\"name\":\"var-files\"},{\"emptyDir\":{},\"name\":\"plugins\"}]}}}}\n"
                },
                "creationTimestamp": "2025-10-01T12:35:25Z",
                "generation": 1,
                "labels": {
                    "app.kubernetes.io/component": "repo-server",
                    "app.kubernetes.io/name": "argocd-repo-server",
                    "app.kubernetes.io/part-of": "argocd"
                },
                "managedFields": [
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:config.k8s.io/owning-inventory": {},
                                    "f:internal.kpt.dev/upstream-identifier": {},
                                    "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:app.kubernetes.io/component": {},
                                    "f:app.kubernetes.io/name": {},
                                    "f:app.kubernetes.io/part-of": {}
                                }
                            },
                            "f:spec": {
                                "f:progressDeadlineSeconds": {},
                                "f:replicas": {},
                                "f:revisionHistoryLimit": {},
                                "f:selector": {},
                                "f:strategy": {
                                    "f:rollingUpdate": {
                                        ".": {},
                                        "f:maxSurge": {},
                                        "f:maxUnavailable": {}
                                    },
                                    "f:type": {}
                                },
                                "f:template": {
                                    "f:metadata": {
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/name": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:affinity": {
                                            ".": {},
                                            "f:podAntiAffinity": {
                                                ".": {},
                                                "f:preferredDuringSchedulingIgnoredDuringExecution": {}
                                            }
                                        },
                                        "f:automountServiceAccountToken": {},
                                        "f:containers": {
                                            "k:{\"name\":\"argocd-repo-server\"}": {
                                                ".": {},
                                                "f:args": {},
                                                "f:env": {
                                                    ".": {},
                                                    "k:{\"name\":\"ARGOCD_DEFAULT_CACHE_EXPIRATION\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_GIT_LS_REMOTE_PARALLELISM_LIMIT\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_GIT_MODULES_ENABLED\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_GIT_REQUEST_TIMEOUT\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_GRPC_MAX_SIZE_MB\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_LOG_FORMAT_TIMESTAMP\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_RECONCILIATION_TIMEOUT\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_REPO_CACHE_EXPIRATION\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_REPO_SERVER_ALLOW_OUT_OF_BOUNDS_SYMLINKS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_REPO_SERVER_DISABLE_HELM_MANIFEST_MAX_EXTRACTED_SIZE\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_REPO_SERVER_DISABLE_TLS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_REPO_SERVER_HELM_MANIFEST_MAX_EXTRACTED_SIZE\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_REPO_SERVER_INCLUDE_HIDDEN_DIRECTORIES\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_REPO_SERVER_LISTEN_ADDRESS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_REPO_SERVER_LISTEN_METRICS_ADDRESS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_REPO_SERVER_LOGFORMAT\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_REPO_SERVER_LOGLEVEL\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_REPO_SERVER_MAX_COMBINED_DIRECTORY_MANIFESTS_SIZE\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_REPO_SERVER_OTLP_ADDRESS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_REPO_SERVER_OTLP_ATTRS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_REPO_SERVER_OTLP_HEADERS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_REPO_SERVER_OTLP_INSECURE\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_REPO_SERVER_PARALLELISM_LIMIT\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_REPO_SERVER_PLUGIN_TAR_EXCLUSIONS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_REPO_SERVER_PLUGIN_USE_MANIFEST_GENERATE_PATHS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_EXTRACTED_SIZE\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_TAR_SIZE\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_REVISION_CACHE_LOCK_TIMEOUT\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_TLS_CIPHERS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_TLS_MAX_VERSION\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_TLS_MIN_VERSION\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"HELM_CACHE_HOME\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:value": {}
                                                    },
                                                    "k:{\"name\":\"HELM_CONFIG_HOME\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:value": {}
                                                    },
                                                    "k:{\"name\":\"HELM_DATA_HOME\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:value": {}
                                                    },
                                                    "k:{\"name\":\"REDISDB\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"REDIS_COMPRESSION\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"REDIS_PASSWORD\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:secretKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"REDIS_SERVER\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    }
                                                },
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:livenessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:initialDelaySeconds": {},
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:name": {},
                                                "f:ports": {
                                                    ".": {},
                                                    "k:{\"containerPort\":8081,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:protocol": {}
                                                    },
                                                    "k:{\"containerPort\":8084,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:protocol": {}
                                                    }
                                                },
                                                "f:readinessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:initialDelaySeconds": {},
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:resources": {},
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:allowPrivilegeEscalation": {},
                                                    "f:capabilities": {
                                                        ".": {},
                                                        "f:drop": {}
                                                    },
                                                    "f:readOnlyRootFilesystem": {},
                                                    "f:runAsNonRoot": {},
                                                    "f:seccompProfile": {
                                                        ".": {},
                                                        "f:type": {}
                                                    }
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {},
                                                "f:volumeMounts": {
                                                    ".": {},
                                                    "k:{\"mountPath\":\"/app/config/gpg/keys\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    },
                                                    "k:{\"mountPath\":\"/app/config/gpg/source\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    },
                                                    "k:{\"mountPath\":\"/app/config/reposerver/tls\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    },
                                                    "k:{\"mountPath\":\"/app/config/ssh\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    },
                                                    "k:{\"mountPath\":\"/app/config/tls\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    },
                                                    "k:{\"mountPath\":\"/helm-working-dir\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    },
                                                    "k:{\"mountPath\":\"/home/argocd/cmp-server/plugins\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    },
                                                    "k:{\"mountPath\":\"/tmp\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    }
                                                }
                                            }
                                        },
                                        "f:dnsPolicy": {},
                                        "f:initContainers": {
                                            ".": {},
                                            "k:{\"name\":\"copyutil\"}": {
                                                ".": {},
                                                "f:command": {},
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:name": {},
                                                "f:resources": {},
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:allowPrivilegeEscalation": {},
                                                    "f:capabilities": {
                                                        ".": {},
                                                        "f:drop": {}
                                                    },
                                                    "f:readOnlyRootFilesystem": {},
                                                    "f:runAsNonRoot": {},
                                                    "f:seccompProfile": {
                                                        ".": {},
                                                        "f:type": {}
                                                    }
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {},
                                                "f:volumeMounts": {
                                                    ".": {},
                                                    "k:{\"mountPath\":\"/var/run/argocd\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    }
                                                }
                                            }
                                        },
                                        "f:nodeSelector": {},
                                        "f:restartPolicy": {},
                                        "f:schedulerName": {},
                                        "f:securityContext": {},
                                        "f:serviceAccount": {},
                                        "f:serviceAccountName": {},
                                        "f:terminationGracePeriodSeconds": {},
                                        "f:volumes": {
                                            ".": {},
                                            "k:{\"name\":\"argocd-repo-server-tls\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:secret": {
                                                    ".": {},
                                                    "f:defaultMode": {},
                                                    "f:items": {},
                                                    "f:optional": {},
                                                    "f:secretName": {}
                                                }
                                            },
                                            "k:{\"name\":\"gpg-keyring\"}": {
                                                ".": {},
                                                "f:emptyDir": {},
                                                "f:name": {}
                                            },
                                            "k:{\"name\":\"gpg-keys\"}": {
                                                ".": {},
                                                "f:configMap": {
                                                    ".": {},
                                                    "f:defaultMode": {},
                                                    "f:name": {}
                                                },
                                                "f:name": {}
                                            },
                                            "k:{\"name\":\"helm-working-dir\"}": {
                                                ".": {},
                                                "f:emptyDir": {},
                                                "f:name": {}
                                            },
                                            "k:{\"name\":\"plugins\"}": {
                                                ".": {},
                                                "f:emptyDir": {},
                                                "f:name": {}
                                            },
                                            "k:{\"name\":\"ssh-known-hosts\"}": {
                                                ".": {},
                                                "f:configMap": {
                                                    ".": {},
                                                    "f:defaultMode": {},
                                                    "f:name": {}
                                                },
                                                "f:name": {}
                                            },
                                            "k:{\"name\":\"tls-certs\"}": {
                                                ".": {},
                                                "f:configMap": {
                                                    ".": {},
                                                    "f:defaultMode": {},
                                                    "f:name": {}
                                                },
                                                "f:name": {}
                                            },
                                            "k:{\"name\":\"tmp\"}": {
                                                ".": {},
                                                "f:emptyDir": {},
                                                "f:name": {}
                                            },
                                            "k:{\"name\":\"var-files\"}": {
                                                ".": {},
                                                "f:emptyDir": {},
                                                "f:name": {}
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "manager": "kubectl",
                        "operation": "Update",
                        "time": "2025-10-01T12:35:25Z"
                    },
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    "f:deployment.kubernetes.io/revision": {}
                                }
                            },
                            "f:status": {
                                "f:availableReplicas": {},
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"Available\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Progressing\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:observedGeneration": {},
                                "f:readyReplicas": {},
                                "f:replicas": {},
                                "f:updatedReplicas": {}
                            }
                        },
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "subresource": "status",
                        "time": "2025-10-01T12:36:00Z"
                    }
                ],
                "name": "argocd-repo-server",
                "namespace": "argocd",
                "resourceVersion": "5721",
                "uid": "35bdd9dd-9c06-42b2-8ae8-1f6a2e210fa0"
            },
            "spec": {
                "progressDeadlineSeconds": 600,
                "replicas": 1,
                "revisionHistoryLimit": 10,
                "selector": {
                    "matchLabels": {
                        "app.kubernetes.io/name": "argocd-repo-server"
                    }
                },
                "strategy": {
                    "rollingUpdate": {
                        "maxSurge": "25%",
                        "maxUnavailable": "25%"
                    },
                    "type": "RollingUpdate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/name": "argocd-repo-server"
                        }
                    },
                    "spec": {
                        "affinity": {
                            "podAntiAffinity": {
                                "preferredDuringSchedulingIgnoredDuringExecution": [
                                    {
                                        "podAffinityTerm": {
                                            "labelSelector": {
                                                "matchLabels": {
                                                    "app.kubernetes.io/name": "argocd-repo-server"
                                                }
                                            },
                                            "topologyKey": "kubernetes.io/hostname"
                                        },
                                        "weight": 100
                                    },
                                    {
                                        "podAffinityTerm": {
                                            "labelSelector": {
                                                "matchLabels": {
                                                    "app.kubernetes.io/part-of": "argocd"
                                                }
                                            },
                                            "topologyKey": "kubernetes.io/hostname"
                                        },
                                        "weight": 5
                                    }
                                ]
                            }
                        },
                        "automountServiceAccountToken": false,
                        "containers": [
                            {
                                "args": [
                                    "/usr/local/bin/argocd-repo-server"
                                ],
                                "env": [
                                    {
                                        "name": "REDIS_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "auth",
                                                "name": "argocd-redis"
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_RECONCILIATION_TIMEOUT",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "timeout.reconciliation",
                                                "name": "argocd-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_REPO_SERVER_LOGFORMAT",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "reposerver.log.format",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_REPO_SERVER_LOGLEVEL",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "reposerver.log.level",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_LOG_FORMAT_TIMESTAMP",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "log.format.timestamp",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_REPO_SERVER_PARALLELISM_LIMIT",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "reposerver.parallelism.limit",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_REPO_SERVER_LISTEN_ADDRESS",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "reposerver.listen.address",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_REPO_SERVER_LISTEN_METRICS_ADDRESS",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "reposerver.metrics.listen.address",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_REPO_SERVER_DISABLE_TLS",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "reposerver.disable.tls",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_TLS_MIN_VERSION",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "reposerver.tls.minversion",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_TLS_MAX_VERSION",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "reposerver.tls.maxversion",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_TLS_CIPHERS",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "reposerver.tls.ciphers",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_REPO_CACHE_EXPIRATION",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "reposerver.repo.cache.expiration",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "REDIS_SERVER",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "redis.server",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "REDIS_COMPRESSION",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "redis.compression",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "REDISDB",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "redis.db",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_DEFAULT_CACHE_EXPIRATION",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "reposerver.default.cache.expiration",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_REPO_SERVER_OTLP_ADDRESS",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "otlp.address",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_REPO_SERVER_OTLP_INSECURE",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "otlp.insecure",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_REPO_SERVER_OTLP_HEADERS",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "otlp.headers",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_REPO_SERVER_OTLP_ATTRS",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "otlp.attrs",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_REPO_SERVER_MAX_COMBINED_DIRECTORY_MANIFESTS_SIZE",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "reposerver.max.combined.directory.manifests.size",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_REPO_SERVER_PLUGIN_TAR_EXCLUSIONS",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "reposerver.plugin.tar.exclusions",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_REPO_SERVER_PLUGIN_USE_MANIFEST_GENERATE_PATHS",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "reposerver.plugin.use.manifest.generate.paths",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_REPO_SERVER_ALLOW_OUT_OF_BOUNDS_SYMLINKS",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "reposerver.allow.oob.symlinks",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_TAR_SIZE",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "reposerver.streamed.manifest.max.tar.size",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_EXTRACTED_SIZE",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "reposerver.streamed.manifest.max.extracted.size",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_REPO_SERVER_HELM_MANIFEST_MAX_EXTRACTED_SIZE",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "reposerver.helm.manifest.max.extracted.size",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_REPO_SERVER_DISABLE_HELM_MANIFEST_MAX_EXTRACTED_SIZE",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "reposerver.disable.helm.manifest.max.extracted.size",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_REVISION_CACHE_LOCK_TIMEOUT",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "reposerver.revision.cache.lock.timeout",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_GIT_MODULES_ENABLED",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "reposerver.enable.git.submodule",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_GIT_LS_REMOTE_PARALLELISM_LIMIT",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "reposerver.git.lsremote.parallelism.limit",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_GIT_REQUEST_TIMEOUT",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "reposerver.git.request.timeout",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_GRPC_MAX_SIZE_MB",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "reposerver.grpc.max.size",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_REPO_SERVER_INCLUDE_HIDDEN_DIRECTORIES",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "reposerver.include.hidden.directories",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "HELM_CACHE_HOME",
                                        "value": "/helm-working-dir"
                                    },
                                    {
                                        "name": "HELM_CONFIG_HOME",
                                        "value": "/helm-working-dir"
                                    },
                                    {
                                        "name": "HELM_DATA_HOME",
                                        "value": "/helm-working-dir"
                                    }
                                ],
                                "image": "quay.io/argoproj/argocd:v3.0.6",
                                "imagePullPolicy": "Always",
                                "livenessProbe": {
                                    "failureThreshold": 3,
                                    "httpGet": {
                                        "path": "/healthz?full=true",
                                        "port": 8084,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 30,
                                    "periodSeconds": 30,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 5
                                },
                                "name": "argocd-repo-server",
                                "ports": [
                                    {
                                        "containerPort": 8081,
                                        "protocol": "TCP"
                                    },
                                    {
                                        "containerPort": 8084,
                                        "protocol": "TCP"
                                    }
                                ],
                                "readinessProbe": {
                                    "failureThreshold": 3,
                                    "httpGet": {
                                        "path": "/healthz",
                                        "port": 8084,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 1
                                },
                                "resources": {},
                                "securityContext": {
                                    "allowPrivilegeEscalation": false,
                                    "capabilities": {
                                        "drop": [
                                            "ALL"
                                        ]
                                    },
                                    "readOnlyRootFilesystem": true,
                                    "runAsNonRoot": true,
                                    "seccompProfile": {
                                        "type": "RuntimeDefault"
                                    }
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/app/config/ssh",
                                        "name": "ssh-known-hosts"
                                    },
                                    {
                                        "mountPath": "/app/config/tls",
                                        "name": "tls-certs"
                                    },
                                    {
                                        "mountPath": "/app/config/gpg/source",
                                        "name": "gpg-keys"
                                    },
                                    {
                                        "mountPath": "/app/config/gpg/keys",
                                        "name": "gpg-keyring"
                                    },
                                    {
                                        "mountPath": "/app/config/reposerver/tls",
                                        "name": "argocd-repo-server-tls"
                                    },
                                    {
                                        "mountPath": "/tmp",
                                        "name": "tmp"
                                    },
                                    {
                                        "mountPath": "/helm-working-dir",
                                        "name": "helm-working-dir"
                                    },
                                    {
                                        "mountPath": "/home/argocd/cmp-server/plugins",
                                        "name": "plugins"
                                    }
                                ]
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "initContainers": [
                            {
                                "command": [
                                    "/bin/cp",
                                    "-n",
                                    "/usr/local/bin/argocd",
                                    "/var/run/argocd/argocd-cmp-server"
                                ],
                                "image": "quay.io/argoproj/argocd:v3.0.6",
                                "imagePullPolicy": "IfNotPresent",
                                "name": "copyutil",
                                "resources": {},
                                "securityContext": {
                                    "allowPrivilegeEscalation": false,
                                    "capabilities": {
                                        "drop": [
                                            "ALL"
                                        ]
                                    },
                                    "readOnlyRootFilesystem": true,
                                    "runAsNonRoot": true,
                                    "seccompProfile": {
                                        "type": "RuntimeDefault"
                                    }
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/var/run/argocd",
                                        "name": "var-files"
                                    }
                                ]
                            }
                        ],
                        "nodeSelector": {
                            "kubernetes.io/os": "linux"
                        },
                        "restartPolicy": "Always",
                        "schedulerName": "default-scheduler",
                        "securityContext": {},
                        "serviceAccount": "argocd-repo-server",
                        "serviceAccountName": "argocd-repo-server",
                        "terminationGracePeriodSeconds": 30,
                        "volumes": [
                            {
                                "configMap": {
                                    "defaultMode": 420,
                                    "name": "argocd-ssh-known-hosts-cm"
                                },
                                "name": "ssh-known-hosts"
                            },
                            {
                                "configMap": {
                                    "defaultMode": 420,
                                    "name": "argocd-tls-certs-cm"
                                },
                                "name": "tls-certs"
                            },
                            {
                                "configMap": {
                                    "defaultMode": 420,
                                    "name": "argocd-gpg-keys-cm"
                                },
                                "name": "gpg-keys"
                            },
                            {
                                "emptyDir": {},
                                "name": "gpg-keyring"
                            },
                            {
                                "emptyDir": {},
                                "name": "tmp"
                            },
                            {
                                "emptyDir": {},
                                "name": "helm-working-dir"
                            },
                            {
                                "name": "argocd-repo-server-tls",
                                "secret": {
                                    "defaultMode": 420,
                                    "items": [
                                        {
                                            "key": "tls.crt",
                                            "path": "tls.crt"
                                        },
                                        {
                                            "key": "tls.key",
                                            "path": "tls.key"
                                        },
                                        {
                                            "key": "ca.crt",
                                            "path": "ca.crt"
                                        }
                                    ],
                                    "optional": true,
                                    "secretName": "argocd-repo-server-tls"
                                }
                            },
                            {
                                "emptyDir": {},
                                "name": "var-files"
                            },
                            {
                                "emptyDir": {},
                                "name": "plugins"
                            }
                        ]
                    }
                }
            },
            "status": {
                "availableReplicas": 1,
                "conditions": [
                    {
                        "lastTransitionTime": "2025-10-01T12:36:00Z",
                        "lastUpdateTime": "2025-10-01T12:36:00Z",
                        "message": "Deployment has minimum availability.",
                        "reason": "MinimumReplicasAvailable",
                        "status": "True",
                        "type": "Available"
                    },
                    {
                        "lastTransitionTime": "2025-10-01T12:35:25Z",
                        "lastUpdateTime": "2025-10-01T12:36:00Z",
                        "message": "ReplicaSet \"argocd-repo-server-6494cbbfc6\" has successfully progressed.",
                        "reason": "NewReplicaSetAvailable",
                        "status": "True",
                        "type": "Progressing"
                    }
                ],
                "observedGeneration": 1,
                "readyReplicas": 1,
                "replicas": 1,
                "updatedReplicas": 1
            }
        },
        {
            "apiVersion": "apps/v1",
            "kind": "Deployment",
            "metadata": {
                "annotations": {
                    "config.k8s.io/owning-inventory": "b3eea0dca944e5ddd5a4d7c4fdcfda74d5608155-1759322119970877404",
                    "deployment.kubernetes.io/revision": "1",
                    "internal.kpt.dev/upstream-identifier": "apps|Deployment|argocd|argocd-server",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{\"config.k8s.io/owning-inventory\":\"b3eea0dca944e5ddd5a4d7c4fdcfda74d5608155-1759322119970877404\",\"internal.kpt.dev/upstream-identifier\":\"apps|Deployment|argocd|argocd-server\"},\"labels\":{\"app.kubernetes.io/component\":\"server\",\"app.kubernetes.io/name\":\"argocd-server\",\"app.kubernetes.io/part-of\":\"argocd\"},\"name\":\"argocd-server\",\"namespace\":\"argocd\"},\"spec\":{\"selector\":{\"matchLabels\":{\"app.kubernetes.io/name\":\"argocd-server\"}},\"template\":{\"metadata\":{\"labels\":{\"app.kubernetes.io/name\":\"argocd-server\"}},\"spec\":{\"affinity\":{\"podAntiAffinity\":{\"preferredDuringSchedulingIgnoredDuringExecution\":[{\"podAffinityTerm\":{\"labelSelector\":{\"matchLabels\":{\"app.kubernetes.io/name\":\"argocd-server\"}},\"topologyKey\":\"kubernetes.io/hostname\"},\"weight\":100},{\"podAffinityTerm\":{\"labelSelector\":{\"matchLabels\":{\"app.kubernetes.io/part-of\":\"argocd\"}},\"topologyKey\":\"kubernetes.io/hostname\"},\"weight\":5}]}},\"containers\":[{\"args\":[\"/usr/local/bin/argocd-server\"],\"env\":[{\"name\":\"REDIS_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"auth\",\"name\":\"argocd-redis\"}}},{\"name\":\"ARGOCD_SERVER_INSECURE\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.insecure\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_BASEHREF\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.basehref\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_ROOTPATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.rootpath\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_LOGFORMAT\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.log.format\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_LOG_LEVEL\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.log.level\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_REPO_SERVER\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"repo.server\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_DEX_SERVER\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.dex.server\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_DISABLE_AUTH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.disable.auth\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_ENABLE_GZIP\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.enable.gzip\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_REPO_SERVER_TIMEOUT_SECONDS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.repo.server.timeout.seconds\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_X_FRAME_OPTIONS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.x.frame.options\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_CONTENT_SECURITY_POLICY\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.content.security.policy\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_REPO_SERVER_PLAINTEXT\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.repo.server.plaintext\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_REPO_SERVER_STRICT_TLS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.repo.server.strict.tls\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_DEX_SERVER_PLAINTEXT\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.dex.server.plaintext\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_DEX_SERVER_STRICT_TLS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.dex.server.strict.tls\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_TLS_MIN_VERSION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.tls.minversion\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_TLS_MAX_VERSION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.tls.maxversion\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_TLS_CIPHERS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.tls.ciphers\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_CONNECTION_STATUS_CACHE_EXPIRATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.connection.status.cache.expiration\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_OIDC_CACHE_EXPIRATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.oidc.cache.expiration\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_LOGIN_ATTEMPTS_EXPIRATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.login.attempts.expiration\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_STATIC_ASSETS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.staticassets\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_APP_STATE_CACHE_EXPIRATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.app.state.cache.expiration\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"REDIS_SERVER\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"redis.server\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"REDIS_COMPRESSION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"redis.compression\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"REDISDB\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"redis.db\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_DEFAULT_CACHE_EXPIRATION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.default.cache.expiration\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_MAX_COOKIE_NUMBER\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.http.cookie.maxnumber\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_LISTEN_ADDRESS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.listen.address\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_METRICS_LISTEN_ADDRESS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.metrics.listen.address\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_OTLP_ADDRESS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"otlp.address\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_OTLP_INSECURE\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"otlp.insecure\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_OTLP_HEADERS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"otlp.headers\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_OTLP_ATTRS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"otlp.attrs\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_APPLICATION_NAMESPACES\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"application.namespaces\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_ENABLE_PROXY_EXTENSION\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.enable.proxy.extension\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_K8SCLIENT_RETRY_MAX\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.k8sclient.retry.max\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_K8SCLIENT_RETRY_BASE_BACKOFF\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.k8sclient.retry.base.backoff\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_API_CONTENT_TYPES\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.api.content.types\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SERVER_WEBHOOK_PARALLELISM_LIMIT\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.webhook.parallelism.limit\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_NEW_GIT_FILE_GLOBBING\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"applicationsetcontroller.enable.new.git.file.globbing\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_SCM_ROOT_CA_PATH\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"applicationsetcontroller.scm.root.ca.path\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_ALLOWED_SCM_PROVIDERS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"applicationsetcontroller.allowed.scm.providers\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_SCM_PROVIDERS\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"applicationsetcontroller.enable.scm.providers\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_HYDRATOR_ENABLED\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"hydrator.enabled\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}},{\"name\":\"ARGOCD_SYNC_WITH_REPLACE_ALLOWED\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"server.sync.replace.allowed\",\"name\":\"argocd-cmd-params-cm\",\"optional\":true}}}],\"image\":\"quay.io/argoproj/argocd:v3.0.6\",\"imagePullPolicy\":\"Always\",\"livenessProbe\":{\"httpGet\":{\"path\":\"/healthz?full=true\",\"port\":8080},\"initialDelaySeconds\":3,\"periodSeconds\":30,\"timeoutSeconds\":5},\"name\":\"argocd-server\",\"ports\":[{\"containerPort\":8080},{\"containerPort\":8083}],\"readinessProbe\":{\"httpGet\":{\"path\":\"/healthz\",\"port\":8080},\"initialDelaySeconds\":3,\"periodSeconds\":30},\"securityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"readOnlyRootFilesystem\":true,\"runAsNonRoot\":true,\"seccompProfile\":{\"type\":\"RuntimeDefault\"}},\"volumeMounts\":[{\"mountPath\":\"/app/config/ssh\",\"name\":\"ssh-known-hosts\"},{\"mountPath\":\"/app/config/tls\",\"name\":\"tls-certs\"},{\"mountPath\":\"/app/config/server/tls\",\"name\":\"argocd-repo-server-tls\"},{\"mountPath\":\"/app/config/dex/tls\",\"name\":\"argocd-dex-server-tls\"},{\"mountPath\":\"/home/argocd\",\"name\":\"plugins-home\"},{\"mountPath\":\"/tmp\",\"name\":\"tmp\"},{\"mountPath\":\"/home/argocd/params\",\"name\":\"argocd-cmd-params-cm\"}]}],\"nodeSelector\":{\"kubernetes.io/os\":\"linux\"},\"serviceAccountName\":\"argocd-server\",\"volumes\":[{\"emptyDir\":{},\"name\":\"plugins-home\"},{\"emptyDir\":{},\"name\":\"tmp\"},{\"configMap\":{\"name\":\"argocd-ssh-known-hosts-cm\"},\"name\":\"ssh-known-hosts\"},{\"configMap\":{\"name\":\"argocd-tls-certs-cm\"},\"name\":\"tls-certs\"},{\"name\":\"argocd-repo-server-tls\",\"secret\":{\"items\":[{\"key\":\"tls.crt\",\"path\":\"tls.crt\"},{\"key\":\"tls.key\",\"path\":\"tls.key\"},{\"key\":\"ca.crt\",\"path\":\"ca.crt\"}],\"optional\":true,\"secretName\":\"argocd-repo-server-tls\"}},{\"name\":\"argocd-dex-server-tls\",\"secret\":{\"items\":[{\"key\":\"tls.crt\",\"path\":\"tls.crt\"},{\"key\":\"ca.crt\",\"path\":\"ca.crt\"}],\"optional\":true,\"secretName\":\"argocd-dex-server-tls\"}},{\"configMap\":{\"items\":[{\"key\":\"server.profile.enabled\",\"path\":\"profiler.enabled\"}],\"name\":\"argocd-cmd-params-cm\",\"optional\":true},\"name\":\"argocd-cmd-params-cm\"}]}}}}\n"
                },
                "creationTimestamp": "2025-10-01T12:35:25Z",
                "generation": 1,
                "labels": {
                    "app.kubernetes.io/component": "server",
                    "app.kubernetes.io/name": "argocd-server",
                    "app.kubernetes.io/part-of": "argocd"
                },
                "managedFields": [
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:config.k8s.io/owning-inventory": {},
                                    "f:internal.kpt.dev/upstream-identifier": {},
                                    "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:app.kubernetes.io/component": {},
                                    "f:app.kubernetes.io/name": {},
                                    "f:app.kubernetes.io/part-of": {}
                                }
                            },
                            "f:spec": {
                                "f:progressDeadlineSeconds": {},
                                "f:replicas": {},
                                "f:revisionHistoryLimit": {},
                                "f:selector": {},
                                "f:strategy": {
                                    "f:rollingUpdate": {
                                        ".": {},
                                        "f:maxSurge": {},
                                        "f:maxUnavailable": {}
                                    },
                                    "f:type": {}
                                },
                                "f:template": {
                                    "f:metadata": {
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/name": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:affinity": {
                                            ".": {},
                                            "f:podAntiAffinity": {
                                                ".": {},
                                                "f:preferredDuringSchedulingIgnoredDuringExecution": {}
                                            }
                                        },
                                        "f:containers": {
                                            "k:{\"name\":\"argocd-server\"}": {
                                                ".": {},
                                                "f:args": {},
                                                "f:env": {
                                                    ".": {},
                                                    "k:{\"name\":\"ARGOCD_API_CONTENT_TYPES\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_ALLOWED_SCM_PROVIDERS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_NEW_GIT_FILE_GLOBBING\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_SCM_PROVIDERS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_APPLICATIONSET_CONTROLLER_SCM_ROOT_CA_PATH\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_APPLICATION_NAMESPACES\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_APP_STATE_CACHE_EXPIRATION\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_DEFAULT_CACHE_EXPIRATION\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_HYDRATOR_ENABLED\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_K8SCLIENT_RETRY_BASE_BACKOFF\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_K8SCLIENT_RETRY_MAX\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_MAX_COOKIE_NUMBER\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_SERVER_BASEHREF\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_SERVER_CONNECTION_STATUS_CACHE_EXPIRATION\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_SERVER_CONTENT_SECURITY_POLICY\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_SERVER_DEX_SERVER\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_SERVER_DEX_SERVER_PLAINTEXT\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_SERVER_DEX_SERVER_STRICT_TLS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_SERVER_DISABLE_AUTH\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_SERVER_ENABLE_GZIP\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_SERVER_ENABLE_PROXY_EXTENSION\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_SERVER_INSECURE\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_SERVER_LISTEN_ADDRESS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_SERVER_LOGFORMAT\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_SERVER_LOGIN_ATTEMPTS_EXPIRATION\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_SERVER_LOG_LEVEL\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_SERVER_METRICS_LISTEN_ADDRESS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_SERVER_OIDC_CACHE_EXPIRATION\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_SERVER_OTLP_ADDRESS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_SERVER_OTLP_ATTRS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_SERVER_OTLP_HEADERS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_SERVER_OTLP_INSECURE\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_SERVER_REPO_SERVER\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_SERVER_REPO_SERVER_PLAINTEXT\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_SERVER_REPO_SERVER_STRICT_TLS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_SERVER_REPO_SERVER_TIMEOUT_SECONDS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_SERVER_ROOTPATH\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_SERVER_STATIC_ASSETS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_SERVER_WEBHOOK_PARALLELISM_LIMIT\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_SERVER_X_FRAME_OPTIONS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_SYNC_WITH_REPLACE_ALLOWED\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_TLS_CIPHERS\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_TLS_MAX_VERSION\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"ARGOCD_TLS_MIN_VERSION\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"REDISDB\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"REDIS_COMPRESSION\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"REDIS_PASSWORD\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:secretKeyRef": {}
                                                        }
                                                    },
                                                    "k:{\"name\":\"REDIS_SERVER\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:configMapKeyRef": {}
                                                        }
                                                    }
                                                },
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:livenessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:initialDelaySeconds": {},
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:name": {},
                                                "f:ports": {
                                                    ".": {},
                                                    "k:{\"containerPort\":8080,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:protocol": {}
                                                    },
                                                    "k:{\"containerPort\":8083,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:protocol": {}
                                                    }
                                                },
                                                "f:readinessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:initialDelaySeconds": {},
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:resources": {},
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:allowPrivilegeEscalation": {},
                                                    "f:capabilities": {
                                                        ".": {},
                                                        "f:drop": {}
                                                    },
                                                    "f:readOnlyRootFilesystem": {},
                                                    "f:runAsNonRoot": {},
                                                    "f:seccompProfile": {
                                                        ".": {},
                                                        "f:type": {}
                                                    }
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {},
                                                "f:volumeMounts": {
                                                    ".": {},
                                                    "k:{\"mountPath\":\"/app/config/dex/tls\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    },
                                                    "k:{\"mountPath\":\"/app/config/server/tls\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    },
                                                    "k:{\"mountPath\":\"/app/config/ssh\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    },
                                                    "k:{\"mountPath\":\"/app/config/tls\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    },
                                                    "k:{\"mountPath\":\"/home/argocd\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    },
                                                    "k:{\"mountPath\":\"/home/argocd/params\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    },
                                                    "k:{\"mountPath\":\"/tmp\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    }
                                                }
                                            }
                                        },
                                        "f:dnsPolicy": {},
                                        "f:nodeSelector": {},
                                        "f:restartPolicy": {},
                                        "f:schedulerName": {},
                                        "f:securityContext": {},
                                        "f:serviceAccount": {},
                                        "f:serviceAccountName": {},
                                        "f:terminationGracePeriodSeconds": {},
                                        "f:volumes": {
                                            ".": {},
                                            "k:{\"name\":\"argocd-cmd-params-cm\"}": {
                                                ".": {},
                                                "f:configMap": {
                                                    ".": {},
                                                    "f:defaultMode": {},
                                                    "f:items": {},
                                                    "f:name": {},
                                                    "f:optional": {}
                                                },
                                                "f:name": {}
                                            },
                                            "k:{\"name\":\"argocd-dex-server-tls\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:secret": {
                                                    ".": {},
                                                    "f:defaultMode": {},
                                                    "f:items": {},
                                                    "f:optional": {},
                                                    "f:secretName": {}
                                                }
                                            },
                                            "k:{\"name\":\"argocd-repo-server-tls\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:secret": {
                                                    ".": {},
                                                    "f:defaultMode": {},
                                                    "f:items": {},
                                                    "f:optional": {},
                                                    "f:secretName": {}
                                                }
                                            },
                                            "k:{\"name\":\"plugins-home\"}": {
                                                ".": {},
                                                "f:emptyDir": {},
                                                "f:name": {}
                                            },
                                            "k:{\"name\":\"ssh-known-hosts\"}": {
                                                ".": {},
                                                "f:configMap": {
                                                    ".": {},
                                                    "f:defaultMode": {},
                                                    "f:name": {}
                                                },
                                                "f:name": {}
                                            },
                                            "k:{\"name\":\"tls-certs\"}": {
                                                ".": {},
                                                "f:configMap": {
                                                    ".": {},
                                                    "f:defaultMode": {},
                                                    "f:name": {}
                                                },
                                                "f:name": {}
                                            },
                                            "k:{\"name\":\"tmp\"}": {
                                                ".": {},
                                                "f:emptyDir": {},
                                                "f:name": {}
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "manager": "kubectl",
                        "operation": "Update",
                        "time": "2025-10-01T12:35:25Z"
                    },
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    "f:deployment.kubernetes.io/revision": {}
                                }
                            },
                            "f:status": {
                                "f:availableReplicas": {},
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"Available\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Progressing\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:observedGeneration": {},
                                "f:readyReplicas": {},
                                "f:replicas": {},
                                "f:updatedReplicas": {}
                            }
                        },
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "subresource": "status",
                        "time": "2025-10-01T12:36:09Z"
                    }
                ],
                "name": "argocd-server",
                "namespace": "argocd",
                "resourceVersion": "5781",
                "uid": "60c0d9a9-a8db-47d2-8ef3-1b5bf4278aac"
            },
            "spec": {
                "progressDeadlineSeconds": 600,
                "replicas": 1,
                "revisionHistoryLimit": 10,
                "selector": {
                    "matchLabels": {
                        "app.kubernetes.io/name": "argocd-server"
                    }
                },
                "strategy": {
                    "rollingUpdate": {
                        "maxSurge": "25%",
                        "maxUnavailable": "25%"
                    },
                    "type": "RollingUpdate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/name": "argocd-server"
                        }
                    },
                    "spec": {
                        "affinity": {
                            "podAntiAffinity": {
                                "preferredDuringSchedulingIgnoredDuringExecution": [
                                    {
                                        "podAffinityTerm": {
                                            "labelSelector": {
                                                "matchLabels": {
                                                    "app.kubernetes.io/name": "argocd-server"
                                                }
                                            },
                                            "topologyKey": "kubernetes.io/hostname"
                                        },
                                        "weight": 100
                                    },
                                    {
                                        "podAffinityTerm": {
                                            "labelSelector": {
                                                "matchLabels": {
                                                    "app.kubernetes.io/part-of": "argocd"
                                                }
                                            },
                                            "topologyKey": "kubernetes.io/hostname"
                                        },
                                        "weight": 5
                                    }
                                ]
                            }
                        },
                        "containers": [
                            {
                                "args": [
                                    "/usr/local/bin/argocd-server"
                                ],
                                "env": [
                                    {
                                        "name": "REDIS_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "auth",
                                                "name": "argocd-redis"
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_SERVER_INSECURE",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "server.insecure",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_SERVER_BASEHREF",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "server.basehref",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_SERVER_ROOTPATH",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "server.rootpath",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_SERVER_LOGFORMAT",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "server.log.format",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_SERVER_LOG_LEVEL",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "server.log.level",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_SERVER_REPO_SERVER",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "repo.server",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_SERVER_DEX_SERVER",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "server.dex.server",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_SERVER_DISABLE_AUTH",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "server.disable.auth",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_SERVER_ENABLE_GZIP",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "server.enable.gzip",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_SERVER_REPO_SERVER_TIMEOUT_SECONDS",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "server.repo.server.timeout.seconds",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_SERVER_X_FRAME_OPTIONS",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "server.x.frame.options",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_SERVER_CONTENT_SECURITY_POLICY",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "server.content.security.policy",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_SERVER_REPO_SERVER_PLAINTEXT",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "server.repo.server.plaintext",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_SERVER_REPO_SERVER_STRICT_TLS",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "server.repo.server.strict.tls",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_SERVER_DEX_SERVER_PLAINTEXT",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "server.dex.server.plaintext",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_SERVER_DEX_SERVER_STRICT_TLS",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "server.dex.server.strict.tls",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_TLS_MIN_VERSION",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "server.tls.minversion",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_TLS_MAX_VERSION",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "server.tls.maxversion",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_TLS_CIPHERS",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "server.tls.ciphers",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_SERVER_CONNECTION_STATUS_CACHE_EXPIRATION",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "server.connection.status.cache.expiration",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_SERVER_OIDC_CACHE_EXPIRATION",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "server.oidc.cache.expiration",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_SERVER_LOGIN_ATTEMPTS_EXPIRATION",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "server.login.attempts.expiration",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_SERVER_STATIC_ASSETS",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "server.staticassets",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_APP_STATE_CACHE_EXPIRATION",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "server.app.state.cache.expiration",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "REDIS_SERVER",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "redis.server",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "REDIS_COMPRESSION",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "redis.compression",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "REDISDB",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "redis.db",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_DEFAULT_CACHE_EXPIRATION",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "server.default.cache.expiration",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_MAX_COOKIE_NUMBER",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "server.http.cookie.maxnumber",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_SERVER_LISTEN_ADDRESS",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "server.listen.address",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_SERVER_METRICS_LISTEN_ADDRESS",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "server.metrics.listen.address",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_SERVER_OTLP_ADDRESS",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "otlp.address",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_SERVER_OTLP_INSECURE",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "otlp.insecure",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_SERVER_OTLP_HEADERS",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "otlp.headers",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_SERVER_OTLP_ATTRS",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "otlp.attrs",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_APPLICATION_NAMESPACES",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "application.namespaces",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_SERVER_ENABLE_PROXY_EXTENSION",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "server.enable.proxy.extension",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_K8SCLIENT_RETRY_MAX",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "server.k8sclient.retry.max",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_K8SCLIENT_RETRY_BASE_BACKOFF",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "server.k8sclient.retry.base.backoff",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_API_CONTENT_TYPES",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "server.api.content.types",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_SERVER_WEBHOOK_PARALLELISM_LIMIT",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "server.webhook.parallelism.limit",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_NEW_GIT_FILE_GLOBBING",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "applicationsetcontroller.enable.new.git.file.globbing",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_APPLICATIONSET_CONTROLLER_SCM_ROOT_CA_PATH",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "applicationsetcontroller.scm.root.ca.path",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_APPLICATIONSET_CONTROLLER_ALLOWED_SCM_PROVIDERS",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "applicationsetcontroller.allowed.scm.providers",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_SCM_PROVIDERS",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "applicationsetcontroller.enable.scm.providers",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_HYDRATOR_ENABLED",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "hydrator.enabled",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    },
                                    {
                                        "name": "ARGOCD_SYNC_WITH_REPLACE_ALLOWED",
                                        "valueFrom": {
                                            "configMapKeyRef": {
                                                "key": "server.sync.replace.allowed",
                                                "name": "argocd-cmd-params-cm",
                                                "optional": true
                                            }
                                        }
                                    }
                                ],
                                "image": "quay.io/argoproj/argocd:v3.0.6",
                                "imagePullPolicy": "Always",
                                "livenessProbe": {
                                    "failureThreshold": 3,
                                    "httpGet": {
                                        "path": "/healthz?full=true",
                                        "port": 8080,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 3,
                                    "periodSeconds": 30,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 5
                                },
                                "name": "argocd-server",
                                "ports": [
                                    {
                                        "containerPort": 8080,
                                        "protocol": "TCP"
                                    },
                                    {
                                        "containerPort": 8083,
                                        "protocol": "TCP"
                                    }
                                ],
                                "readinessProbe": {
                                    "failureThreshold": 3,
                                    "httpGet": {
                                        "path": "/healthz",
                                        "port": 8080,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 3,
                                    "periodSeconds": 30,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 1
                                },
                                "resources": {},
                                "securityContext": {
                                    "allowPrivilegeEscalation": false,
                                    "capabilities": {
                                        "drop": [
                                            "ALL"
                                        ]
                                    },
                                    "readOnlyRootFilesystem": true,
                                    "runAsNonRoot": true,
                                    "seccompProfile": {
                                        "type": "RuntimeDefault"
                                    }
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/app/config/ssh",
                                        "name": "ssh-known-hosts"
                                    },
                                    {
                                        "mountPath": "/app/config/tls",
                                        "name": "tls-certs"
                                    },
                                    {
                                        "mountPath": "/app/config/server/tls",
                                        "name": "argocd-repo-server-tls"
                                    },
                                    {
                                        "mountPath": "/app/config/dex/tls",
                                        "name": "argocd-dex-server-tls"
                                    },
                                    {
                                        "mountPath": "/home/argocd",
                                        "name": "plugins-home"
                                    },
                                    {
                                        "mountPath": "/tmp",
                                        "name": "tmp"
                                    },
                                    {
                                        "mountPath": "/home/argocd/params",
                                        "name": "argocd-cmd-params-cm"
                                    }
                                ]
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "nodeSelector": {
                            "kubernetes.io/os": "linux"
                        },
                        "restartPolicy": "Always",
                        "schedulerName": "default-scheduler",
                        "securityContext": {},
                        "serviceAccount": "argocd-server",
                        "serviceAccountName": "argocd-server",
                        "terminationGracePeriodSeconds": 30,
                        "volumes": [
                            {
                                "emptyDir": {},
                                "name": "plugins-home"
                            },
                            {
                                "emptyDir": {},
                                "name": "tmp"
                            },
                            {
                                "configMap": {
                                    "defaultMode": 420,
                                    "name": "argocd-ssh-known-hosts-cm"
                                },
                                "name": "ssh-known-hosts"
                            },
                            {
                                "configMap": {
                                    "defaultMode": 420,
                                    "name": "argocd-tls-certs-cm"
                                },
                                "name": "tls-certs"
                            },
                            {
                                "name": "argocd-repo-server-tls",
                                "secret": {
                                    "defaultMode": 420,
                                    "items": [
                                        {
                                            "key": "tls.crt",
                                            "path": "tls.crt"
                                        },
                                        {
                                            "key": "tls.key",
                                            "path": "tls.key"
                                        },
                                        {
                                            "key": "ca.crt",
                                            "path": "ca.crt"
                                        }
                                    ],
                                    "optional": true,
                                    "secretName": "argocd-repo-server-tls"
                                }
                            },
                            {
                                "name": "argocd-dex-server-tls",
                                "secret": {
                                    "defaultMode": 420,
                                    "items": [
                                        {
                                            "key": "tls.crt",
                                            "path": "tls.crt"
                                        },
                                        {
                                            "key": "ca.crt",
                                            "path": "ca.crt"
                                        }
                                    ],
                                    "optional": true,
                                    "secretName": "argocd-dex-server-tls"
                                }
                            },
                            {
                                "configMap": {
                                    "defaultMode": 420,
                                    "items": [
                                        {
                                            "key": "server.profile.enabled",
                                            "path": "profiler.enabled"
                                        }
                                    ],
                                    "name": "argocd-cmd-params-cm",
                                    "optional": true
                                },
                                "name": "argocd-cmd-params-cm"
                            }
                        ]
                    }
                }
            },
            "status": {
                "availableReplicas": 1,
                "conditions": [
                    {
                        "lastTransitionTime": "2025-10-01T12:36:09Z",
                        "lastUpdateTime": "2025-10-01T12:36:09Z",
                        "message": "Deployment has minimum availability.",
                        "reason": "MinimumReplicasAvailable",
                        "status": "True",
                        "type": "Available"
                    },
                    {
                        "lastTransitionTime": "2025-10-01T12:35:25Z",
                        "lastUpdateTime": "2025-10-01T12:36:09Z",
                        "message": "ReplicaSet \"argocd-server-6687649b6c\" has successfully progressed.",
                        "reason": "NewReplicaSetAvailable",
                        "status": "True",
                        "type": "Progressing"
                    }
                ],
                "observedGeneration": 1,
                "readyReplicas": 1,
                "replicas": 1,
                "updatedReplicas": 1
            }
        }
    ]
}

TASK [install : Wait for deployments in namespace argocd] **********************
Wednesday 01 October 2025  12:36:36 +0000 (0:00:00.347)       0:07:08.596 ***** 
Wednesday 01 October 2025  12:36:36 +0000 (0:00:00.347)       0:07:08.595 ***** 
ok: [127.0.0.1] => (item={'metadata': {'name': 'argocd-applicationset-controller', 'namespace': 'argocd', 'uid': 'd1595120-62c5-45ca-9396-15981c388245', 'resourceVersion': '5506', 'generation': 1, 'creationTimestamp': '2025-10-01T12:35:25Z', 'labels': {'app.kubernetes.io/component': 'applicationset-controller', 'app.kubernetes.io/name': 'argocd-applicationset-controller', 'app.kubernetes.io/part-of': 'argocd'}, 'annotations': {'config.k8s.io/owning-inventory': 'b3eea0dca944e5ddd5a4d7c4fdcfda74d5608155-1759322119970877404', 'deployment.kubernetes.io/revision': '1', 'internal.kpt.dev/upstream-identifier': 'apps|Deployment|argocd|argocd-applicationset-controller', 'kubectl.kubernetes.io/last-applied-configuration': '{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"config.k8s.io/owning-inventory":"b3eea0dca944e5ddd5a4d7c4fdcfda74d5608155-1759322119970877404","internal.kpt.dev/upstream-identifier":"apps|Deployment|argocd|argocd-applicationset-controller"},"labels":{"app.kubernetes.io/component":"applicationset-controller","app.kubernetes.io/name":"argocd-applicationset-controller","app.kubernetes.io/part-of":"argocd"},"name":"argocd-applicationset-controller","namespace":"argocd"},"spec":{"selector":{"matchLabels":{"app.kubernetes.io/name":"argocd-applicationset-controller"}},"template":{"metadata":{"labels":{"app.kubernetes.io/name":"argocd-applicationset-controller"}},"spec":{"containers":[{"args":["/usr/local/bin/argocd-applicationset-controller"],"env":[{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_GLOBAL_PRESERVED_ANNOTATIONS","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.global.preserved.annotations","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_GLOBAL_PRESERVED_LABELS","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.global.preserved.labels","name":"argocd-cmd-params-cm","optional":true}}},{"name":"NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_LEADER_ELECTION","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.enable.leader.election","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER","valueFrom":{"configMapKeyRef":{"key":"repo.server","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_POLICY","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.policy","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_POLICY_OVERRIDE","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.enable.policy.override","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_DEBUG","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.debug","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_LOGFORMAT","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.log.format","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_LOGLEVEL","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.log.level","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_LOG_FORMAT_TIMESTAMP","valueFrom":{"configMapKeyRef":{"key":"log.format.timestamp","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_DRY_RUN","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.dryrun","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_GIT_MODULES_ENABLED","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.enable.git.submodule","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_PROGRESSIVE_SYNCS","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.enable.progressive.syncs","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_TOKENREF_STRICT_MODE","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.enable.tokenref.strict.mode","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_NEW_GIT_FILE_GLOBBING","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.enable.new.git.file.globbing","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_PLAINTEXT","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.repo.server.plaintext","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_STRICT_TLS","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.repo.server.strict.tls","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_TIMEOUT_SECONDS","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.repo.server.timeout.seconds","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_CONCURRENT_RECONCILIATIONS","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.concurrent.reconciliations.max","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_NAMESPACES","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.namespaces","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_SCM_ROOT_CA_PATH","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.scm.root.ca.path","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_ALLOWED_SCM_PROVIDERS","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.allowed.scm.providers","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_SCM_PROVIDERS","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.enable.scm.providers","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_WEBHOOK_PARALLELISM_LIMIT","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.webhook.parallelism.limit","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_REQUEUE_AFTER","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.requeue.after","name":"argocd-cmd-params-cm","optional":true}}}],"image":"quay.io/argoproj/argocd:v3.0.6","imagePullPolicy":"Always","name":"argocd-applicationset-controller","ports":[{"containerPort":7000,"name":"webhook"},{"containerPort":8080,"name":"metrics"}],"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true,"runAsNonRoot":true,"seccompProfile":{"type":"RuntimeDefault"}},"volumeMounts":[{"mountPath":"/app/config/ssh","name":"ssh-known-hosts"},{"mountPath":"/app/config/tls","name":"tls-certs"},{"mountPath":"/app/config/gpg/source","name":"gpg-keys"},{"mountPath":"/app/config/gpg/keys","name":"gpg-keyring"},{"mountPath":"/tmp","name":"tmp"},{"mountPath":"/app/config/reposerver/tls","name":"argocd-repo-server-tls"}]}],"nodeSelector":{"kubernetes.io/os":"linux"},"serviceAccountName":"argocd-applicationset-controller","volumes":[{"configMap":{"name":"argocd-ssh-known-hosts-cm"},"name":"ssh-known-hosts"},{"configMap":{"name":"argocd-tls-certs-cm"},"name":"tls-certs"},{"configMap":{"name":"argocd-gpg-keys-cm"},"name":"gpg-keys"},{"emptyDir":{},"name":"gpg-keyring"},{"emptyDir":{},"name":"tmp"},{"name":"argocd-repo-server-tls","secret":{"items":[{"key":"tls.crt","path":"tls.crt"},{"key":"tls.key","path":"tls.key"},{"key":"ca.crt","path":"ca.crt"}],"optional":true,"secretName":"argocd-repo-server-tls"}}]}}}}\n'}, 'managedFields': [{'manager': 'kubectl', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:35:25Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'.': {}, 'f:config.k8s.io/owning-inventory': {}, 'f:internal.kpt.dev/upstream-identifier': {}, 'f:kubectl.kubernetes.io/last-applied-configuration': {}}, 'f:labels': {'.': {}, 'f:app.kubernetes.io/component': {}, 'f:app.kubernetes.io/name': {}, 'f:app.kubernetes.io/part-of': {}}}, 'f:spec': {'f:progressDeadlineSeconds': {}, 'f:replicas': {}, 'f:revisionHistoryLimit': {}, 'f:selector': {}, 'f:strategy': {'f:rollingUpdate': {'.': {}, 'f:maxSurge': {}, 'f:maxUnavailable': {}}, 'f:type': {}}, 'f:template': {'f:metadata': {'f:labels': {'.': {}, 'f:app.kubernetes.io/name': {}}}, 'f:spec': {'f:containers': {'k:{"name":"argocd-applicationset-controller"}': {'.': {}, 'f:args': {}, 'f:env': {'.': {}, 'k:{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_ALLOWED_SCM_PROVIDERS"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_CONCURRENT_RECONCILIATIONS"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_DEBUG"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_DRY_RUN"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_LEADER_ELECTION"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_NEW_GIT_FILE_GLOBBING"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_POLICY_OVERRIDE"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_PROGRESSIVE_SYNCS"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_SCM_PROVIDERS"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_GLOBAL_PRESERVED_ANNOTATIONS"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_GLOBAL_PRESERVED_LABELS"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_LOGFORMAT"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_LOGLEVEL"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_NAMESPACES"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_POLICY"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_PLAINTEXT"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_STRICT_TLS"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_TIMEOUT_SECONDS"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_REQUEUE_AFTER"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_SCM_ROOT_CA_PATH"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_TOKENREF_STRICT_MODE"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_WEBHOOK_PARALLELISM_LIMIT"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_GIT_MODULES_ENABLED"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_LOG_FORMAT_TIMESTAMP"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"NAMESPACE"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:fieldRef': {}}}}, 'f:image': {}, 'f:imagePullPolicy': {}, 'f:name': {}, 'f:ports': {'.': {}, 'k:{"containerPort":7000,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:name': {}, 'f:protocol': {}}, 'k:{"containerPort":8080,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:name': {}, 'f:protocol': {}}}, 'f:resources': {}, 'f:securityContext': {'.': {}, 'f:allowPrivilegeEscalation': {}, 'f:capabilities': {'.': {}, 'f:drop': {}}, 'f:readOnlyRootFilesystem': {}, 'f:runAsNonRoot': {}, 'f:seccompProfile': {'.': {}, 'f:type': {}}}, 'f:terminationMessagePath': {}, 'f:terminationMessagePolicy': {}, 'f:volumeMounts': {'.': {}, 'k:{"mountPath":"/app/config/gpg/keys"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}, 'k:{"mountPath":"/app/config/gpg/source"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}, 'k:{"mountPath":"/app/config/reposerver/tls"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}, 'k:{"mountPath":"/app/config/ssh"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}, 'k:{"mountPath":"/app/config/tls"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}, 'k:{"mountPath":"/tmp"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}}}}, 'f:dnsPolicy': {}, 'f:nodeSelector': {}, 'f:restartPolicy': {}, 'f:schedulerName': {}, 'f:securityContext': {}, 'f:serviceAccount': {}, 'f:serviceAccountName': {}, 'f:terminationGracePeriodSeconds': {}, 'f:volumes': {'.': {}, 'k:{"name":"argocd-repo-server-tls"}': {'.': {}, 'f:name': {}, 'f:secret': {'.': {}, 'f:defaultMode': {}, 'f:items': {}, 'f:optional': {}, 'f:secretName': {}}}, 'k:{"name":"gpg-keyring"}': {'.': {}, 'f:emptyDir': {}, 'f:name': {}}, 'k:{"name":"gpg-keys"}': {'.': {}, 'f:configMap': {'.': {}, 'f:defaultMode': {}, 'f:name': {}}, 'f:name': {}}, 'k:{"name":"ssh-known-hosts"}': {'.': {}, 'f:configMap': {'.': {}, 'f:defaultMode': {}, 'f:name': {}}, 'f:name': {}}, 'k:{"name":"tls-certs"}': {'.': {}, 'f:configMap': {'.': {}, 'f:defaultMode': {}, 'f:name': {}}, 'f:name': {}}, 'k:{"name":"tmp"}': {'.': {}, 'f:emptyDir': {}, 'f:name': {}}}}}}}}, {'manager': 'kube-controller-manager', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:35:35Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'f:deployment.kubernetes.io/revision': {}}}, 'f:status': {'f:availableReplicas': {}, 'f:conditions': {'.': {}, 'k:{"type":"Available"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}, 'k:{"type":"Progressing"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}}, 'f:observedGeneration': {}, 'f:readyReplicas': {}, 'f:replicas': {}, 'f:updatedReplicas': {}}}, 'subresource': 'status'}]}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'argocd-applicationset-controller'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'argocd-applicationset-controller'}}, 'spec': {'volumes': [{'name': 'ssh-known-hosts', 'configMap': {'name': 'argocd-ssh-known-hosts-cm', 'defaultMode': 420}}, {'name': 'tls-certs', 'configMap': {'name': 'argocd-tls-certs-cm', 'defaultMode': 420}}, {'name': 'gpg-keys', 'configMap': {'name': 'argocd-gpg-keys-cm', 'defaultMode': 420}}, {'name': 'gpg-keyring', 'emptyDir': {}}, {'name': 'tmp', 'emptyDir': {}}, {'name': 'argocd-repo-server-tls', 'secret': {'secretName': 'argocd-repo-server-tls', 'items': [{'key': 'tls.crt', 'path': 'tls.crt'}, {'key': 'tls.key', 'path': 'tls.key'}, {'key': 'ca.crt', 'path': 'ca.crt'}], 'defaultMode': 420, 'optional': True}}], 'containers': [{'name': 'argocd-applicationset-controller', 'image': 'quay.io/argoproj/argocd:v3.0.6', 'args': ['/usr/local/bin/argocd-applicationset-controller'], 'ports': [{'name': 'webhook', 'containerPort': 7000, 'protocol': 'TCP'}, {'name': 'metrics', 'containerPort': 8080, 'protocol': 'TCP'}], 'env': [{'name': 'ARGOCD_APPLICATIONSET_CONTROLLER_GLOBAL_PRESERVED_ANNOTATIONS', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'applicationsetcontroller.global.preserved.annotations', 'optional': True}}}, {'name': 'ARGOCD_APPLICATIONSET_CONTROLLER_GLOBAL_PRESERVED_LABELS', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'applicationsetcontroller.global.preserved.labels', 'optional': True}}}, {'name': 'NAMESPACE', 'valueFrom': {'fieldRef': {'apiVersion': 'v1', 'fieldPath': 'metadata.namespace'}}}, {'name': 'ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_LEADER_ELECTION', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'applicationsetcontroller.enable.leader.election', 'optional': True}}}, {'name': 'ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'repo.server', 'optional': True}}}, {'name': 'ARGOCD_APPLICATIONSET_CONTROLLER_POLICY', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'applicationsetcontroller.policy', 'optional': True}}}, {'name': 'ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_POLICY_OVERRIDE', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'applicationsetcontroller.enable.policy.override', 'optional': True}}}, {'name': 'ARGOCD_APPLICATIONSET_CONTROLLER_DEBUG', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'applicationsetcontroller.debug', 'optional': True}}}, {'name': 'ARGOCD_APPLICATIONSET_CONTROLLER_LOGFORMAT', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'applicationsetcontroller.log.format', 'optional': True}}}, {'name': 'ARGOCD_APPLICATIONSET_CONTROLLER_LOGLEVEL', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'applicationsetcontroller.log.level', 'optional': True}}}, {'name': 'ARGOCD_LOG_FORMAT_TIMESTAMP', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'log.format.timestamp', 'optional': True}}}, {'name': 'ARGOCD_APPLICATIONSET_CONTROLLER_DRY_RUN', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'applicationsetcontroller.dryrun', 'optional': True}}}, {'name': 'ARGOCD_GIT_MODULES_ENABLED', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'applicationsetcontroller.enable.git.submodule', 'optional': True}}}, {'name': 'ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_PROGRESSIVE_SYNCS', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'applicationsetcontroller.enable.progressive.syncs', 'optional': True}}}, {'name': 'ARGOCD_APPLICATIONSET_CONTROLLER_TOKENREF_STRICT_MODE', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'applicationsetcontroller.enable.tokenref.strict.mode', 'optional': True}}}, {'name': 'ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_NEW_GIT_FILE_GLOBBING', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'applicationsetcontroller.enable.new.git.file.globbing', 'optional': True}}}, {'name': 'ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_PLAINTEXT', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'applicationsetcontroller.repo.server.plaintext', 'optional': True}}}, {'name': 'ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_STRICT_TLS', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'applicationsetcontroller.repo.server.strict.tls', 'optional': True}}}, {'name': 'ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_TIMEOUT_SECONDS', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'applicationsetcontroller.repo.server.timeout.seconds', 'optional': True}}}, {'name': 'ARGOCD_APPLICATIONSET_CONTROLLER_CONCURRENT_RECONCILIATIONS', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'applicationsetcontroller.concurrent.reconciliations.max', 'optional': True}}}, {'name': 'ARGOCD_APPLICATIONSET_CONTROLLER_NAMESPACES', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'applicationsetcontroller.namespaces', 'optional': True}}}, {'name': 'ARGOCD_APPLICATIONSET_CONTROLLER_SCM_ROOT_CA_PATH', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'applicationsetcontroller.scm.root.ca.path', 'optional': True}}}, {'name': 'ARGOCD_APPLICATIONSET_CONTROLLER_ALLOWED_SCM_PROVIDERS', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'applicationsetcontroller.allowed.scm.providers', 'optional': True}}}, {'name': 'ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_SCM_PROVIDERS', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'applicationsetcontroller.enable.scm.providers', 'optional': True}}}, {'name': 'ARGOCD_APPLICATIONSET_CONTROLLER_WEBHOOK_PARALLELISM_LIMIT', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'applicationsetcontroller.webhook.parallelism.limit', 'optional': True}}}, {'name': 'ARGOCD_APPLICATIONSET_CONTROLLER_REQUEUE_AFTER', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'applicationsetcontroller.requeue.after', 'optional': True}}}], 'resources': {}, 'volumeMounts': [{'name': 'ssh-known-hosts', 'mountPath': '/app/config/ssh'}, {'name': 'tls-certs', 'mountPath': '/app/config/tls'}, {'name': 'gpg-keys', 'mountPath': '/app/config/gpg/source'}, {'name': 'gpg-keyring', 'mountPath': '/app/config/gpg/keys'}, {'name': 'tmp', 'mountPath': '/tmp'}, {'name': 'argocd-repo-server-tls', 'mountPath': '/app/config/reposerver/tls'}], 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'Always', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'runAsNonRoot': True, 'readOnlyRootFilesystem': True, 'allowPrivilegeEscalation': False, 'seccompProfile': {'type': 'RuntimeDefault'}}}], 'restartPolicy': 'Always', 'terminationGracePeriodSeconds': 30, 'dnsPolicy': 'ClusterFirst', 'nodeSelector': {'kubernetes.io/os': 'linux'}, 'serviceAccountName': 'argocd-applicationset-controller', 'serviceAccount': 'argocd-applicationset-controller', 'securityContext': {}, 'schedulerName': 'default-scheduler'}}, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxUnavailable': '25%', 'maxSurge': '25%'}}, 'revisionHistoryLimit': 10, 'progressDeadlineSeconds': 600}, 'status': {'observedGeneration': 1, 'replicas': 1, 'updatedReplicas': 1, 'readyReplicas': 1, 'availableReplicas': 1, 'conditions': [{'type': 'Available', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:35:35Z', 'lastTransitionTime': '2025-10-01T12:35:35Z', 'reason': 'MinimumReplicasAvailable', 'message': 'Deployment has minimum availability.'}, {'type': 'Progressing', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:35:35Z', 'lastTransitionTime': '2025-10-01T12:35:25Z', 'reason': 'NewReplicaSetAvailable', 'message': 'ReplicaSet "argocd-applicationset-controller-787f4cc5bf" has successfully progressed.'}]}, 'apiVersion': 'apps/v1', 'kind': 'Deployment'})
ok: [127.0.0.1] => (item={'metadata': {'name': 'argocd-dex-server', 'namespace': 'argocd', 'uid': '375d5a56-bec4-40d8-a427-6ace0a5a55ea', 'resourceVersion': '5645', 'generation': 1, 'creationTimestamp': '2025-10-01T12:35:25Z', 'labels': {'app.kubernetes.io/component': 'dex-server', 'app.kubernetes.io/name': 'argocd-dex-server', 'app.kubernetes.io/part-of': 'argocd'}, 'annotations': {'config.k8s.io/owning-inventory': 'b3eea0dca944e5ddd5a4d7c4fdcfda74d5608155-1759322119970877404', 'deployment.kubernetes.io/revision': '1', 'internal.kpt.dev/upstream-identifier': 'apps|Deployment|argocd|argocd-dex-server', 'kubectl.kubernetes.io/last-applied-configuration': '{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"config.k8s.io/owning-inventory":"b3eea0dca944e5ddd5a4d7c4fdcfda74d5608155-1759322119970877404","internal.kpt.dev/upstream-identifier":"apps|Deployment|argocd|argocd-dex-server"},"labels":{"app.kubernetes.io/component":"dex-server","app.kubernetes.io/name":"argocd-dex-server","app.kubernetes.io/part-of":"argocd"},"name":"argocd-dex-server","namespace":"argocd"},"spec":{"selector":{"matchLabels":{"app.kubernetes.io/name":"argocd-dex-server"}},"template":{"metadata":{"labels":{"app.kubernetes.io/name":"argocd-dex-server"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/part-of":"argocd"}},"topologyKey":"kubernetes.io/hostname"},"weight":5}]}},"containers":[{"command":["/shared/argocd-dex","rundex"],"env":[{"name":"ARGOCD_DEX_SERVER_LOGFORMAT","valueFrom":{"configMapKeyRef":{"key":"dexserver.log.format","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_DEX_SERVER_LOGLEVEL","valueFrom":{"configMapKeyRef":{"key":"dexserver.log.level","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_LOG_FORMAT_TIMESTAMP","valueFrom":{"configMapKeyRef":{"key":"log.format.timestamp","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_DEX_SERVER_DISABLE_TLS","valueFrom":{"configMapKeyRef":{"key":"dexserver.disable.tls","name":"argocd-cmd-params-cm","optional":true}}}],"image":"ghcr.io/dexidp/dex:v2.41.1","imagePullPolicy":"Always","name":"dex","ports":[{"containerPort":5556},{"containerPort":5557},{"containerPort":5558}],"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true,"runAsNonRoot":true,"seccompProfile":{"type":"RuntimeDefault"}},"volumeMounts":[{"mountPath":"/shared","name":"static-files"},{"mountPath":"/tmp","name":"dexconfig"},{"mountPath":"/tls","name":"argocd-dex-server-tls"}]}],"initContainers":[{"command":["/bin/cp","-n","/usr/local/bin/argocd","/shared/argocd-dex"],"image":"quay.io/argoproj/argocd:v3.0.6","imagePullPolicy":"Always","name":"copyutil","securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true,"runAsNonRoot":true,"seccompProfile":{"type":"RuntimeDefault"}},"volumeMounts":[{"mountPath":"/shared","name":"static-files"},{"mountPath":"/tmp","name":"dexconfig"}]}],"nodeSelector":{"kubernetes.io/os":"linux"},"serviceAccountName":"argocd-dex-server","volumes":[{"emptyDir":{},"name":"static-files"},{"emptyDir":{},"name":"dexconfig"},{"name":"argocd-dex-server-tls","secret":{"items":[{"key":"tls.crt","path":"tls.crt"},{"key":"tls.key","path":"tls.key"},{"key":"ca.crt","path":"ca.crt"}],"optional":true,"secretName":"argocd-dex-server-tls"}}]}}}}\n'}, 'managedFields': [{'manager': 'kubectl', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:35:25Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'.': {}, 'f:config.k8s.io/owning-inventory': {}, 'f:internal.kpt.dev/upstream-identifier': {}, 'f:kubectl.kubernetes.io/last-applied-configuration': {}}, 'f:labels': {'.': {}, 'f:app.kubernetes.io/component': {}, 'f:app.kubernetes.io/name': {}, 'f:app.kubernetes.io/part-of': {}}}, 'f:spec': {'f:progressDeadlineSeconds': {}, 'f:replicas': {}, 'f:revisionHistoryLimit': {}, 'f:selector': {}, 'f:strategy': {'f:rollingUpdate': {'.': {}, 'f:maxSurge': {}, 'f:maxUnavailable': {}}, 'f:type': {}}, 'f:template': {'f:metadata': {'f:labels': {'.': {}, 'f:app.kubernetes.io/name': {}}}, 'f:spec': {'f:affinity': {'.': {}, 'f:podAntiAffinity': {'.': {}, 'f:preferredDuringSchedulingIgnoredDuringExecution': {}}}, 'f:containers': {'k:{"name":"dex"}': {'.': {}, 'f:command': {}, 'f:env': {'.': {}, 'k:{"name":"ARGOCD_DEX_SERVER_DISABLE_TLS"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_DEX_SERVER_LOGFORMAT"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_DEX_SERVER_LOGLEVEL"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_LOG_FORMAT_TIMESTAMP"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}}, 'f:image': {}, 'f:imagePullPolicy': {}, 'f:name': {}, 'f:ports': {'.': {}, 'k:{"containerPort":5556,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:protocol': {}}, 'k:{"containerPort":5557,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:protocol': {}}, 'k:{"containerPort":5558,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:protocol': {}}}, 'f:resources': {}, 'f:securityContext': {'.': {}, 'f:allowPrivilegeEscalation': {}, 'f:capabilities': {'.': {}, 'f:drop': {}}, 'f:readOnlyRootFilesystem': {}, 'f:runAsNonRoot': {}, 'f:seccompProfile': {'.': {}, 'f:type': {}}}, 'f:terminationMessagePath': {}, 'f:terminationMessagePolicy': {}, 'f:volumeMounts': {'.': {}, 'k:{"mountPath":"/shared"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}, 'k:{"mountPath":"/tls"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}, 'k:{"mountPath":"/tmp"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}}}}, 'f:dnsPolicy': {}, 'f:initContainers': {'.': {}, 'k:{"name":"copyutil"}': {'.': {}, 'f:command': {}, 'f:image': {}, 'f:imagePullPolicy': {}, 'f:name': {}, 'f:resources': {}, 'f:securityContext': {'.': {}, 'f:allowPrivilegeEscalation': {}, 'f:capabilities': {'.': {}, 'f:drop': {}}, 'f:readOnlyRootFilesystem': {}, 'f:runAsNonRoot': {}, 'f:seccompProfile': {'.': {}, 'f:type': {}}}, 'f:terminationMessagePath': {}, 'f:terminationMessagePolicy': {}, 'f:volumeMounts': {'.': {}, 'k:{"mountPath":"/shared"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}, 'k:{"mountPath":"/tmp"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}}}}, 'f:nodeSelector': {}, 'f:restartPolicy': {}, 'f:schedulerName': {}, 'f:securityContext': {}, 'f:serviceAccount': {}, 'f:serviceAccountName': {}, 'f:terminationGracePeriodSeconds': {}, 'f:volumes': {'.': {}, 'k:{"name":"argocd-dex-server-tls"}': {'.': {}, 'f:name': {}, 'f:secret': {'.': {}, 'f:defaultMode': {}, 'f:items': {}, 'f:optional': {}, 'f:secretName': {}}}, 'k:{"name":"dexconfig"}': {'.': {}, 'f:emptyDir': {}, 'f:name': {}}, 'k:{"name":"static-files"}': {'.': {}, 'f:emptyDir': {}, 'f:name': {}}}}}}}}, {'manager': 'kube-controller-manager', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:35:49Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'f:deployment.kubernetes.io/revision': {}}}, 'f:status': {'f:availableReplicas': {}, 'f:conditions': {'.': {}, 'k:{"type":"Available"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}, 'k:{"type":"Progressing"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}}, 'f:observedGeneration': {}, 'f:readyReplicas': {}, 'f:replicas': {}, 'f:updatedReplicas': {}}}, 'subresource': 'status'}]}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'argocd-dex-server'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'argocd-dex-server'}}, 'spec': {'volumes': [{'name': 'static-files', 'emptyDir': {}}, {'name': 'dexconfig', 'emptyDir': {}}, {'name': 'argocd-dex-server-tls', 'secret': {'secretName': 'argocd-dex-server-tls', 'items': [{'key': 'tls.crt', 'path': 'tls.crt'}, {'key': 'tls.key', 'path': 'tls.key'}, {'key': 'ca.crt', 'path': 'ca.crt'}], 'defaultMode': 420, 'optional': True}}], 'initContainers': [{'name': 'copyutil', 'image': 'quay.io/argoproj/argocd:v3.0.6', 'command': ['/bin/cp', '-n', '/usr/local/bin/argocd', '/shared/argocd-dex'], 'resources': {}, 'volumeMounts': [{'name': 'static-files', 'mountPath': '/shared'}, {'name': 'dexconfig', 'mountPath': '/tmp'}], 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'Always', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'runAsNonRoot': True, 'readOnlyRootFilesystem': True, 'allowPrivilegeEscalation': False, 'seccompProfile': {'type': 'RuntimeDefault'}}}], 'containers': [{'name': 'dex', 'image': 'ghcr.io/dexidp/dex:v2.41.1', 'command': ['/shared/argocd-dex', 'rundex'], 'ports': [{'containerPort': 5556, 'protocol': 'TCP'}, {'containerPort': 5557, 'protocol': 'TCP'}, {'containerPort': 5558, 'protocol': 'TCP'}], 'env': [{'name': 'ARGOCD_DEX_SERVER_LOGFORMAT', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'dexserver.log.format', 'optional': True}}}, {'name': 'ARGOCD_DEX_SERVER_LOGLEVEL', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'dexserver.log.level', 'optional': True}}}, {'name': 'ARGOCD_LOG_FORMAT_TIMESTAMP', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'log.format.timestamp', 'optional': True}}}, {'name': 'ARGOCD_DEX_SERVER_DISABLE_TLS', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'dexserver.disable.tls', 'optional': True}}}], 'resources': {}, 'volumeMounts': [{'name': 'static-files', 'mountPath': '/shared'}, {'name': 'dexconfig', 'mountPath': '/tmp'}, {'name': 'argocd-dex-server-tls', 'mountPath': '/tls'}], 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'Always', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'runAsNonRoot': True, 'readOnlyRootFilesystem': True, 'allowPrivilegeEscalation': False, 'seccompProfile': {'type': 'RuntimeDefault'}}}], 'restartPolicy': 'Always', 'terminationGracePeriodSeconds': 30, 'dnsPolicy': 'ClusterFirst', 'nodeSelector': {'kubernetes.io/os': 'linux'}, 'serviceAccountName': 'argocd-dex-server', 'serviceAccount': 'argocd-dex-server', 'securityContext': {}, 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 5, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/part-of': 'argocd'}}, 'topologyKey': 'kubernetes.io/hostname'}}]}}, 'schedulerName': 'default-scheduler'}}, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxUnavailable': '25%', 'maxSurge': '25%'}}, 'revisionHistoryLimit': 10, 'progressDeadlineSeconds': 600}, 'status': {'observedGeneration': 1, 'replicas': 1, 'updatedReplicas': 1, 'readyReplicas': 1, 'availableReplicas': 1, 'conditions': [{'type': 'Available', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:35:49Z', 'lastTransitionTime': '2025-10-01T12:35:49Z', 'reason': 'MinimumReplicasAvailable', 'message': 'Deployment has minimum availability.'}, {'type': 'Progressing', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:35:49Z', 'lastTransitionTime': '2025-10-01T12:35:25Z', 'reason': 'NewReplicaSetAvailable', 'message': 'ReplicaSet "argocd-dex-server-67677d8f7b" has successfully progressed.'}]}, 'apiVersion': 'apps/v1', 'kind': 'Deployment'})
ok: [127.0.0.1] => (item={'metadata': {'name': 'argocd-notifications-controller', 'namespace': 'argocd', 'uid': '0f8587fa-976b-44a2-a1c7-e94d38b11d56', 'resourceVersion': '5508', 'generation': 1, 'creationTimestamp': '2025-10-01T12:35:25Z', 'labels': {'app.kubernetes.io/component': 'notifications-controller', 'app.kubernetes.io/name': 'argocd-notifications-controller', 'app.kubernetes.io/part-of': 'argocd'}, 'annotations': {'config.k8s.io/owning-inventory': 'b3eea0dca944e5ddd5a4d7c4fdcfda74d5608155-1759322119970877404', 'deployment.kubernetes.io/revision': '1', 'internal.kpt.dev/upstream-identifier': 'apps|Deployment|argocd|argocd-notifications-controller', 'kubectl.kubernetes.io/last-applied-configuration': '{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"config.k8s.io/owning-inventory":"b3eea0dca944e5ddd5a4d7c4fdcfda74d5608155-1759322119970877404","internal.kpt.dev/upstream-identifier":"apps|Deployment|argocd|argocd-notifications-controller"},"labels":{"app.kubernetes.io/component":"notifications-controller","app.kubernetes.io/name":"argocd-notifications-controller","app.kubernetes.io/part-of":"argocd"},"name":"argocd-notifications-controller","namespace":"argocd"},"spec":{"selector":{"matchLabels":{"app.kubernetes.io/name":"argocd-notifications-controller"}},"strategy":{"type":"Recreate"},"template":{"metadata":{"labels":{"app.kubernetes.io/name":"argocd-notifications-controller"}},"spec":{"containers":[{"args":["/usr/local/bin/argocd-notifications"],"env":[{"name":"ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT","valueFrom":{"configMapKeyRef":{"key":"notificationscontroller.log.format","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_NOTIFICATIONS_CONTROLLER_LOGLEVEL","valueFrom":{"configMapKeyRef":{"key":"notificationscontroller.log.level","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_LOG_FORMAT_TIMESTAMP","valueFrom":{"configMapKeyRef":{"key":"log.format.timestamp","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATION_NAMESPACES","valueFrom":{"configMapKeyRef":{"key":"application.namespaces","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_NOTIFICATION_CONTROLLER_SELF_SERVICE_NOTIFICATION_ENABLED","valueFrom":{"configMapKeyRef":{"key":"notificationscontroller.selfservice.enabled","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_NOTIFICATION_CONTROLLER_REPO_SERVER_PLAINTEXT","valueFrom":{"configMapKeyRef":{"key":"notificationscontroller.repo.server.plaintext","name":"argocd-cmd-params-cm","optional":true}}}],"image":"quay.io/argoproj/argocd:v3.0.6","imagePullPolicy":"Always","livenessProbe":{"tcpSocket":{"port":9001}},"name":"argocd-notifications-controller","securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true},"volumeMounts":[{"mountPath":"/app/config/tls","name":"tls-certs"},{"mountPath":"/app/config/reposerver/tls","name":"argocd-repo-server-tls"}],"workingDir":"/app"}],"nodeSelector":{"kubernetes.io/os":"linux"},"securityContext":{"runAsNonRoot":true,"seccompProfile":{"type":"RuntimeDefault"}},"serviceAccountName":"argocd-notifications-controller","volumes":[{"configMap":{"name":"argocd-tls-certs-cm"},"name":"tls-certs"},{"name":"argocd-repo-server-tls","secret":{"items":[{"key":"tls.crt","path":"tls.crt"},{"key":"tls.key","path":"tls.key"},{"key":"ca.crt","path":"ca.crt"}],"optional":true,"secretName":"argocd-repo-server-tls"}}]}}}}\n'}, 'managedFields': [{'manager': 'kubectl', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:35:25Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'.': {}, 'f:config.k8s.io/owning-inventory': {}, 'f:internal.kpt.dev/upstream-identifier': {}, 'f:kubectl.kubernetes.io/last-applied-configuration': {}}, 'f:labels': {'.': {}, 'f:app.kubernetes.io/component': {}, 'f:app.kubernetes.io/name': {}, 'f:app.kubernetes.io/part-of': {}}}, 'f:spec': {'f:progressDeadlineSeconds': {}, 'f:replicas': {}, 'f:revisionHistoryLimit': {}, 'f:selector': {}, 'f:strategy': {'f:type': {}}, 'f:template': {'f:metadata': {'f:labels': {'.': {}, 'f:app.kubernetes.io/name': {}}}, 'f:spec': {'f:containers': {'k:{"name":"argocd-notifications-controller"}': {'.': {}, 'f:args': {}, 'f:env': {'.': {}, 'k:{"name":"ARGOCD_APPLICATION_NAMESPACES"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_LOG_FORMAT_TIMESTAMP"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_NOTIFICATIONS_CONTROLLER_LOGLEVEL"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_NOTIFICATION_CONTROLLER_REPO_SERVER_PLAINTEXT"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_NOTIFICATION_CONTROLLER_SELF_SERVICE_NOTIFICATION_ENABLED"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}}, 'f:image': {}, 'f:imagePullPolicy': {}, 'f:livenessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:tcpSocket': {'.': {}, 'f:port': {}}, 'f:timeoutSeconds': {}}, 'f:name': {}, 'f:resources': {}, 'f:securityContext': {'.': {}, 'f:allowPrivilegeEscalation': {}, 'f:capabilities': {'.': {}, 'f:drop': {}}, 'f:readOnlyRootFilesystem': {}}, 'f:terminationMessagePath': {}, 'f:terminationMessagePolicy': {}, 'f:volumeMounts': {'.': {}, 'k:{"mountPath":"/app/config/reposerver/tls"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}, 'k:{"mountPath":"/app/config/tls"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}}, 'f:workingDir': {}}}, 'f:dnsPolicy': {}, 'f:nodeSelector': {}, 'f:restartPolicy': {}, 'f:schedulerName': {}, 'f:securityContext': {'.': {}, 'f:runAsNonRoot': {}, 'f:seccompProfile': {'.': {}, 'f:type': {}}}, 'f:serviceAccount': {}, 'f:serviceAccountName': {}, 'f:terminationGracePeriodSeconds': {}, 'f:volumes': {'.': {}, 'k:{"name":"argocd-repo-server-tls"}': {'.': {}, 'f:name': {}, 'f:secret': {'.': {}, 'f:defaultMode': {}, 'f:items': {}, 'f:optional': {}, 'f:secretName': {}}}, 'k:{"name":"tls-certs"}': {'.': {}, 'f:configMap': {'.': {}, 'f:defaultMode': {}, 'f:name': {}}, 'f:name': {}}}}}}}}, {'manager': 'kube-controller-manager', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:35:35Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'f:deployment.kubernetes.io/revision': {}}}, 'f:status': {'f:availableReplicas': {}, 'f:conditions': {'.': {}, 'k:{"type":"Available"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}, 'k:{"type":"Progressing"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}}, 'f:observedGeneration': {}, 'f:readyReplicas': {}, 'f:replicas': {}, 'f:updatedReplicas': {}}}, 'subresource': 'status'}]}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'argocd-notifications-controller'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'argocd-notifications-controller'}}, 'spec': {'volumes': [{'name': 'tls-certs', 'configMap': {'name': 'argocd-tls-certs-cm', 'defaultMode': 420}}, {'name': 'argocd-repo-server-tls', 'secret': {'secretName': 'argocd-repo-server-tls', 'items': [{'key': 'tls.crt', 'path': 'tls.crt'}, {'key': 'tls.key', 'path': 'tls.key'}, {'key': 'ca.crt', 'path': 'ca.crt'}], 'defaultMode': 420, 'optional': True}}], 'containers': [{'name': 'argocd-notifications-controller', 'image': 'quay.io/argoproj/argocd:v3.0.6', 'args': ['/usr/local/bin/argocd-notifications'], 'workingDir': '/app', 'env': [{'name': 'ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'notificationscontroller.log.format', 'optional': True}}}, {'name': 'ARGOCD_NOTIFICATIONS_CONTROLLER_LOGLEVEL', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'notificationscontroller.log.level', 'optional': True}}}, {'name': 'ARGOCD_LOG_FORMAT_TIMESTAMP', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'log.format.timestamp', 'optional': True}}}, {'name': 'ARGOCD_APPLICATION_NAMESPACES', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'application.namespaces', 'optional': True}}}, {'name': 'ARGOCD_NOTIFICATION_CONTROLLER_SELF_SERVICE_NOTIFICATION_ENABLED', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'notificationscontroller.selfservice.enabled', 'optional': True}}}, {'name': 'ARGOCD_NOTIFICATION_CONTROLLER_REPO_SERVER_PLAINTEXT', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'notificationscontroller.repo.server.plaintext', 'optional': True}}}], 'resources': {}, 'volumeMounts': [{'name': 'tls-certs', 'mountPath': '/app/config/tls'}, {'name': 'argocd-repo-server-tls', 'mountPath': '/app/config/reposerver/tls'}], 'livenessProbe': {'tcpSocket': {'port': 9001}, 'timeoutSeconds': 1, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 3}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'Always', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'allowPrivilegeEscalation': False}}], 'restartPolicy': 'Always', 'terminationGracePeriodSeconds': 30, 'dnsPolicy': 'ClusterFirst', 'nodeSelector': {'kubernetes.io/os': 'linux'}, 'serviceAccountName': 'argocd-notifications-controller', 'serviceAccount': 'argocd-notifications-controller', 'securityContext': {'runAsNonRoot': True, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'schedulerName': 'default-scheduler'}}, 'strategy': {'type': 'Recreate'}, 'revisionHistoryLimit': 10, 'progressDeadlineSeconds': 600}, 'status': {'observedGeneration': 1, 'replicas': 1, 'updatedReplicas': 1, 'readyReplicas': 1, 'availableReplicas': 1, 'conditions': [{'type': 'Available', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:35:35Z', 'lastTransitionTime': '2025-10-01T12:35:35Z', 'reason': 'MinimumReplicasAvailable', 'message': 'Deployment has minimum availability.'}, {'type': 'Progressing', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:35:35Z', 'lastTransitionTime': '2025-10-01T12:35:25Z', 'reason': 'NewReplicaSetAvailable', 'message': 'ReplicaSet "argocd-notifications-controller-586b4bf99b" has successfully progressed.'}]}, 'apiVersion': 'apps/v1', 'kind': 'Deployment'})
ok: [127.0.0.1] => (item={'metadata': {'name': 'argocd-redis', 'namespace': 'argocd', 'uid': 'f6391adb-7426-4558-9507-430c32817b13', 'resourceVersion': '5592', 'generation': 1, 'creationTimestamp': '2025-10-01T12:35:25Z', 'labels': {'app.kubernetes.io/component': 'redis', 'app.kubernetes.io/name': 'argocd-redis', 'app.kubernetes.io/part-of': 'argocd'}, 'annotations': {'config.k8s.io/owning-inventory': 'b3eea0dca944e5ddd5a4d7c4fdcfda74d5608155-1759322119970877404', 'deployment.kubernetes.io/revision': '1', 'internal.kpt.dev/upstream-identifier': 'apps|Deployment|argocd|argocd-redis', 'kubectl.kubernetes.io/last-applied-configuration': '{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"config.k8s.io/owning-inventory":"b3eea0dca944e5ddd5a4d7c4fdcfda74d5608155-1759322119970877404","internal.kpt.dev/upstream-identifier":"apps|Deployment|argocd|argocd-redis"},"labels":{"app.kubernetes.io/component":"redis","app.kubernetes.io/name":"argocd-redis","app.kubernetes.io/part-of":"argocd"},"name":"argocd-redis","namespace":"argocd"},"spec":{"selector":{"matchLabels":{"app.kubernetes.io/name":"argocd-redis"}},"template":{"metadata":{"labels":{"app.kubernetes.io/name":"argocd-redis"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/name":"argocd-redis"}},"topologyKey":"kubernetes.io/hostname"},"weight":100},{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/part-of":"argocd"}},"topologyKey":"kubernetes.io/hostname"},"weight":5}]}},"containers":[{"args":["--save","","--appendonly","no","--requirepass $(REDIS_PASSWORD)"],"env":[{"name":"REDIS_PASSWORD","valueFrom":{"secretKeyRef":{"key":"auth","name":"argocd-redis"}}}],"image":"redis:7.2.7-alpine","imagePullPolicy":"Always","name":"redis","ports":[{"containerPort":6379}],"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true}}],"initContainers":[{"command":["argocd","admin","redis-initial-password"],"image":"quay.io/argoproj/argocd:v3.0.6","imagePullPolicy":"IfNotPresent","name":"secret-init","securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true,"runAsNonRoot":true,"seccompProfile":{"type":"RuntimeDefault"}}}],"nodeSelector":{"kubernetes.io/os":"linux"},"securityContext":{"runAsNonRoot":true,"runAsUser":999,"seccompProfile":{"type":"RuntimeDefault"}},"serviceAccountName":"argocd-redis"}}}}\n'}, 'managedFields': [{'manager': 'kubectl', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:35:25Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'.': {}, 'f:config.k8s.io/owning-inventory': {}, 'f:internal.kpt.dev/upstream-identifier': {}, 'f:kubectl.kubernetes.io/last-applied-configuration': {}}, 'f:labels': {'.': {}, 'f:app.kubernetes.io/component': {}, 'f:app.kubernetes.io/name': {}, 'f:app.kubernetes.io/part-of': {}}}, 'f:spec': {'f:progressDeadlineSeconds': {}, 'f:replicas': {}, 'f:revisionHistoryLimit': {}, 'f:selector': {}, 'f:strategy': {'f:rollingUpdate': {'.': {}, 'f:maxSurge': {}, 'f:maxUnavailable': {}}, 'f:type': {}}, 'f:template': {'f:metadata': {'f:labels': {'.': {}, 'f:app.kubernetes.io/name': {}}}, 'f:spec': {'f:affinity': {'.': {}, 'f:podAntiAffinity': {'.': {}, 'f:preferredDuringSchedulingIgnoredDuringExecution': {}}}, 'f:containers': {'k:{"name":"redis"}': {'.': {}, 'f:args': {}, 'f:env': {'.': {}, 'k:{"name":"REDIS_PASSWORD"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:secretKeyRef': {}}}}, 'f:image': {}, 'f:imagePullPolicy': {}, 'f:name': {}, 'f:ports': {'.': {}, 'k:{"containerPort":6379,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:protocol': {}}}, 'f:resources': {}, 'f:securityContext': {'.': {}, 'f:allowPrivilegeEscalation': {}, 'f:capabilities': {'.': {}, 'f:drop': {}}, 'f:readOnlyRootFilesystem': {}}, 'f:terminationMessagePath': {}, 'f:terminationMessagePolicy': {}}}, 'f:dnsPolicy': {}, 'f:initContainers': {'.': {}, 'k:{"name":"secret-init"}': {'.': {}, 'f:command': {}, 'f:image': {}, 'f:imagePullPolicy': {}, 'f:name': {}, 'f:resources': {}, 'f:securityContext': {'.': {}, 'f:allowPrivilegeEscalation': {}, 'f:capabilities': {'.': {}, 'f:drop': {}}, 'f:readOnlyRootFilesystem': {}, 'f:runAsNonRoot': {}, 'f:seccompProfile': {'.': {}, 'f:type': {}}}, 'f:terminationMessagePath': {}, 'f:terminationMessagePolicy': {}}}, 'f:nodeSelector': {}, 'f:restartPolicy': {}, 'f:schedulerName': {}, 'f:securityContext': {'.': {}, 'f:runAsNonRoot': {}, 'f:runAsUser': {}, 'f:seccompProfile': {'.': {}, 'f:type': {}}}, 'f:serviceAccount': {}, 'f:serviceAccountName': {}, 'f:terminationGracePeriodSeconds': {}}}}}}, {'manager': 'kube-controller-manager', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:35:43Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'f:deployment.kubernetes.io/revision': {}}}, 'f:status': {'f:availableReplicas': {}, 'f:conditions': {'.': {}, 'k:{"type":"Available"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}, 'k:{"type":"Progressing"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}}, 'f:observedGeneration': {}, 'f:readyReplicas': {}, 'f:replicas': {}, 'f:updatedReplicas': {}}}, 'subresource': 'status'}]}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'argocd-redis'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'argocd-redis'}}, 'spec': {'initContainers': [{'name': 'secret-init', 'image': 'quay.io/argoproj/argocd:v3.0.6', 'command': ['argocd', 'admin', 'redis-initial-password'], 'resources': {}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'runAsNonRoot': True, 'readOnlyRootFilesystem': True, 'allowPrivilegeEscalation': False, 'seccompProfile': {'type': 'RuntimeDefault'}}}], 'containers': [{'name': 'redis', 'image': 'redis:7.2.7-alpine', 'args': ['--save', '', '--appendonly', 'no', '--requirepass $(REDIS_PASSWORD)'], 'ports': [{'containerPort': 6379, 'protocol': 'TCP'}], 'env': [{'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'argocd-redis', 'key': 'auth'}}}], 'resources': {}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'Always', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'readOnlyRootFilesystem': True, 'allowPrivilegeEscalation': False}}], 'restartPolicy': 'Always', 'terminationGracePeriodSeconds': 30, 'dnsPolicy': 'ClusterFirst', 'nodeSelector': {'kubernetes.io/os': 'linux'}, 'serviceAccountName': 'argocd-redis', 'serviceAccount': 'argocd-redis', 'securityContext': {'runAsUser': 999, 'runAsNonRoot': True, 'seccompProfile': {'type': 'RuntimeDefault'}}, 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'argocd-redis'}}, 'topologyKey': 'kubernetes.io/hostname'}}, {'weight': 5, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/part-of': 'argocd'}}, 'topologyKey': 'kubernetes.io/hostname'}}]}}, 'schedulerName': 'default-scheduler'}}, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxUnavailable': '25%', 'maxSurge': '25%'}}, 'revisionHistoryLimit': 10, 'progressDeadlineSeconds': 600}, 'status': {'observedGeneration': 1, 'replicas': 1, 'updatedReplicas': 1, 'readyReplicas': 1, 'availableReplicas': 1, 'conditions': [{'type': 'Available', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:35:43Z', 'lastTransitionTime': '2025-10-01T12:35:43Z', 'reason': 'MinimumReplicasAvailable', 'message': 'Deployment has minimum availability.'}, {'type': 'Progressing', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:35:43Z', 'lastTransitionTime': '2025-10-01T12:35:25Z', 'reason': 'NewReplicaSetAvailable', 'message': 'ReplicaSet "argocd-redis-dd46cfd64" has successfully progressed.'}]}, 'apiVersion': 'apps/v1', 'kind': 'Deployment'})
ok: [127.0.0.1] => (item={'metadata': {'name': 'argocd-repo-server', 'namespace': 'argocd', 'uid': '35bdd9dd-9c06-42b2-8ae8-1f6a2e210fa0', 'resourceVersion': '5721', 'generation': 1, 'creationTimestamp': '2025-10-01T12:35:25Z', 'labels': {'app.kubernetes.io/component': 'repo-server', 'app.kubernetes.io/name': 'argocd-repo-server', 'app.kubernetes.io/part-of': 'argocd'}, 'annotations': {'config.k8s.io/owning-inventory': 'b3eea0dca944e5ddd5a4d7c4fdcfda74d5608155-1759322119970877404', 'deployment.kubernetes.io/revision': '1', 'internal.kpt.dev/upstream-identifier': 'apps|Deployment|argocd|argocd-repo-server', 'kubectl.kubernetes.io/last-applied-configuration': '{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"config.k8s.io/owning-inventory":"b3eea0dca944e5ddd5a4d7c4fdcfda74d5608155-1759322119970877404","internal.kpt.dev/upstream-identifier":"apps|Deployment|argocd|argocd-repo-server"},"labels":{"app.kubernetes.io/component":"repo-server","app.kubernetes.io/name":"argocd-repo-server","app.kubernetes.io/part-of":"argocd"},"name":"argocd-repo-server","namespace":"argocd"},"spec":{"selector":{"matchLabels":{"app.kubernetes.io/name":"argocd-repo-server"}},"template":{"metadata":{"labels":{"app.kubernetes.io/name":"argocd-repo-server"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/name":"argocd-repo-server"}},"topologyKey":"kubernetes.io/hostname"},"weight":100},{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/part-of":"argocd"}},"topologyKey":"kubernetes.io/hostname"},"weight":5}]}},"automountServiceAccountToken":false,"containers":[{"args":["/usr/local/bin/argocd-repo-server"],"env":[{"name":"REDIS_PASSWORD","valueFrom":{"secretKeyRef":{"key":"auth","name":"argocd-redis"}}},{"name":"ARGOCD_RECONCILIATION_TIMEOUT","valueFrom":{"configMapKeyRef":{"key":"timeout.reconciliation","name":"argocd-cm","optional":true}}},{"name":"ARGOCD_REPO_SERVER_LOGFORMAT","valueFrom":{"configMapKeyRef":{"key":"reposerver.log.format","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_REPO_SERVER_LOGLEVEL","valueFrom":{"configMapKeyRef":{"key":"reposerver.log.level","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_LOG_FORMAT_TIMESTAMP","valueFrom":{"configMapKeyRef":{"key":"log.format.timestamp","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_REPO_SERVER_PARALLELISM_LIMIT","valueFrom":{"configMapKeyRef":{"key":"reposerver.parallelism.limit","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_REPO_SERVER_LISTEN_ADDRESS","valueFrom":{"configMapKeyRef":{"key":"reposerver.listen.address","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_REPO_SERVER_LISTEN_METRICS_ADDRESS","valueFrom":{"configMapKeyRef":{"key":"reposerver.metrics.listen.address","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_REPO_SERVER_DISABLE_TLS","valueFrom":{"configMapKeyRef":{"key":"reposerver.disable.tls","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_TLS_MIN_VERSION","valueFrom":{"configMapKeyRef":{"key":"reposerver.tls.minversion","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_TLS_MAX_VERSION","valueFrom":{"configMapKeyRef":{"key":"reposerver.tls.maxversion","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_TLS_CIPHERS","valueFrom":{"configMapKeyRef":{"key":"reposerver.tls.ciphers","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_REPO_CACHE_EXPIRATION","valueFrom":{"configMapKeyRef":{"key":"reposerver.repo.cache.expiration","name":"argocd-cmd-params-cm","optional":true}}},{"name":"REDIS_SERVER","valueFrom":{"configMapKeyRef":{"key":"redis.server","name":"argocd-cmd-params-cm","optional":true}}},{"name":"REDIS_COMPRESSION","valueFrom":{"configMapKeyRef":{"key":"redis.compression","name":"argocd-cmd-params-cm","optional":true}}},{"name":"REDISDB","valueFrom":{"configMapKeyRef":{"key":"redis.db","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_DEFAULT_CACHE_EXPIRATION","valueFrom":{"configMapKeyRef":{"key":"reposerver.default.cache.expiration","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_REPO_SERVER_OTLP_ADDRESS","valueFrom":{"configMapKeyRef":{"key":"otlp.address","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_REPO_SERVER_OTLP_INSECURE","valueFrom":{"configMapKeyRef":{"key":"otlp.insecure","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_REPO_SERVER_OTLP_HEADERS","valueFrom":{"configMapKeyRef":{"key":"otlp.headers","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_REPO_SERVER_OTLP_ATTRS","valueFrom":{"configMapKeyRef":{"key":"otlp.attrs","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_REPO_SERVER_MAX_COMBINED_DIRECTORY_MANIFESTS_SIZE","valueFrom":{"configMapKeyRef":{"key":"reposerver.max.combined.directory.manifests.size","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_REPO_SERVER_PLUGIN_TAR_EXCLUSIONS","valueFrom":{"configMapKeyRef":{"key":"reposerver.plugin.tar.exclusions","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_REPO_SERVER_PLUGIN_USE_MANIFEST_GENERATE_PATHS","valueFrom":{"configMapKeyRef":{"key":"reposerver.plugin.use.manifest.generate.paths","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_REPO_SERVER_ALLOW_OUT_OF_BOUNDS_SYMLINKS","valueFrom":{"configMapKeyRef":{"key":"reposerver.allow.oob.symlinks","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_TAR_SIZE","valueFrom":{"configMapKeyRef":{"key":"reposerver.streamed.manifest.max.tar.size","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_EXTRACTED_SIZE","valueFrom":{"configMapKeyRef":{"key":"reposerver.streamed.manifest.max.extracted.size","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_REPO_SERVER_HELM_MANIFEST_MAX_EXTRACTED_SIZE","valueFrom":{"configMapKeyRef":{"key":"reposerver.helm.manifest.max.extracted.size","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_REPO_SERVER_DISABLE_HELM_MANIFEST_MAX_EXTRACTED_SIZE","valueFrom":{"configMapKeyRef":{"key":"reposerver.disable.helm.manifest.max.extracted.size","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_REVISION_CACHE_LOCK_TIMEOUT","valueFrom":{"configMapKeyRef":{"key":"reposerver.revision.cache.lock.timeout","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_GIT_MODULES_ENABLED","valueFrom":{"configMapKeyRef":{"key":"reposerver.enable.git.submodule","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_GIT_LS_REMOTE_PARALLELISM_LIMIT","valueFrom":{"configMapKeyRef":{"key":"reposerver.git.lsremote.parallelism.limit","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_GIT_REQUEST_TIMEOUT","valueFrom":{"configMapKeyRef":{"key":"reposerver.git.request.timeout","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_GRPC_MAX_SIZE_MB","valueFrom":{"configMapKeyRef":{"key":"reposerver.grpc.max.size","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_REPO_SERVER_INCLUDE_HIDDEN_DIRECTORIES","valueFrom":{"configMapKeyRef":{"key":"reposerver.include.hidden.directories","name":"argocd-cmd-params-cm","optional":true}}},{"name":"HELM_CACHE_HOME","value":"/helm-working-dir"},{"name":"HELM_CONFIG_HOME","value":"/helm-working-dir"},{"name":"HELM_DATA_HOME","value":"/helm-working-dir"}],"image":"quay.io/argoproj/argocd:v3.0.6","imagePullPolicy":"Always","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/healthz?full=true","port":8084},"initialDelaySeconds":30,"periodSeconds":30,"timeoutSeconds":5},"name":"argocd-repo-server","ports":[{"containerPort":8081},{"containerPort":8084}],"readinessProbe":{"httpGet":{"path":"/healthz","port":8084},"initialDelaySeconds":5,"periodSeconds":10},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true,"runAsNonRoot":true,"seccompProfile":{"type":"RuntimeDefault"}},"volumeMounts":[{"mountPath":"/app/config/ssh","name":"ssh-known-hosts"},{"mountPath":"/app/config/tls","name":"tls-certs"},{"mountPath":"/app/config/gpg/source","name":"gpg-keys"},{"mountPath":"/app/config/gpg/keys","name":"gpg-keyring"},{"mountPath":"/app/config/reposerver/tls","name":"argocd-repo-server-tls"},{"mountPath":"/tmp","name":"tmp"},{"mountPath":"/helm-working-dir","name":"helm-working-dir"},{"mountPath":"/home/argocd/cmp-server/plugins","name":"plugins"}]}],"initContainers":[{"command":["/bin/cp","-n","/usr/local/bin/argocd","/var/run/argocd/argocd-cmp-server"],"image":"quay.io/argoproj/argocd:v3.0.6","name":"copyutil","securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true,"runAsNonRoot":true,"seccompProfile":{"type":"RuntimeDefault"}},"volumeMounts":[{"mountPath":"/var/run/argocd","name":"var-files"}]}],"nodeSelector":{"kubernetes.io/os":"linux"},"serviceAccountName":"argocd-repo-server","volumes":[{"configMap":{"name":"argocd-ssh-known-hosts-cm"},"name":"ssh-known-hosts"},{"configMap":{"name":"argocd-tls-certs-cm"},"name":"tls-certs"},{"configMap":{"name":"argocd-gpg-keys-cm"},"name":"gpg-keys"},{"emptyDir":{},"name":"gpg-keyring"},{"emptyDir":{},"name":"tmp"},{"emptyDir":{},"name":"helm-working-dir"},{"name":"argocd-repo-server-tls","secret":{"items":[{"key":"tls.crt","path":"tls.crt"},{"key":"tls.key","path":"tls.key"},{"key":"ca.crt","path":"ca.crt"}],"optional":true,"secretName":"argocd-repo-server-tls"}},{"emptyDir":{},"name":"var-files"},{"emptyDir":{},"name":"plugins"}]}}}}\n'}, 'managedFields': [{'manager': 'kubectl', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:35:25Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'.': {}, 'f:config.k8s.io/owning-inventory': {}, 'f:internal.kpt.dev/upstream-identifier': {}, 'f:kubectl.kubernetes.io/last-applied-configuration': {}}, 'f:labels': {'.': {}, 'f:app.kubernetes.io/component': {}, 'f:app.kubernetes.io/name': {}, 'f:app.kubernetes.io/part-of': {}}}, 'f:spec': {'f:progressDeadlineSeconds': {}, 'f:replicas': {}, 'f:revisionHistoryLimit': {}, 'f:selector': {}, 'f:strategy': {'f:rollingUpdate': {'.': {}, 'f:maxSurge': {}, 'f:maxUnavailable': {}}, 'f:type': {}}, 'f:template': {'f:metadata': {'f:labels': {'.': {}, 'f:app.kubernetes.io/name': {}}}, 'f:spec': {'f:affinity': {'.': {}, 'f:podAntiAffinity': {'.': {}, 'f:preferredDuringSchedulingIgnoredDuringExecution': {}}}, 'f:automountServiceAccountToken': {}, 'f:containers': {'k:{"name":"argocd-repo-server"}': {'.': {}, 'f:args': {}, 'f:env': {'.': {}, 'k:{"name":"ARGOCD_DEFAULT_CACHE_EXPIRATION"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_GIT_LS_REMOTE_PARALLELISM_LIMIT"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_GIT_MODULES_ENABLED"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_GIT_REQUEST_TIMEOUT"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_GRPC_MAX_SIZE_MB"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_LOG_FORMAT_TIMESTAMP"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_RECONCILIATION_TIMEOUT"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_REPO_CACHE_EXPIRATION"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_REPO_SERVER_ALLOW_OUT_OF_BOUNDS_SYMLINKS"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_REPO_SERVER_DISABLE_HELM_MANIFEST_MAX_EXTRACTED_SIZE"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_REPO_SERVER_DISABLE_TLS"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_REPO_SERVER_HELM_MANIFEST_MAX_EXTRACTED_SIZE"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_REPO_SERVER_INCLUDE_HIDDEN_DIRECTORIES"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_REPO_SERVER_LISTEN_ADDRESS"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_REPO_SERVER_LISTEN_METRICS_ADDRESS"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_REPO_SERVER_LOGFORMAT"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_REPO_SERVER_LOGLEVEL"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_REPO_SERVER_MAX_COMBINED_DIRECTORY_MANIFESTS_SIZE"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_REPO_SERVER_OTLP_ADDRESS"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_REPO_SERVER_OTLP_ATTRS"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_REPO_SERVER_OTLP_HEADERS"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_REPO_SERVER_OTLP_INSECURE"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_REPO_SERVER_PARALLELISM_LIMIT"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_REPO_SERVER_PLUGIN_TAR_EXCLUSIONS"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_REPO_SERVER_PLUGIN_USE_MANIFEST_GENERATE_PATHS"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_EXTRACTED_SIZE"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_TAR_SIZE"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_REVISION_CACHE_LOCK_TIMEOUT"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_TLS_CIPHERS"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_TLS_MAX_VERSION"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_TLS_MIN_VERSION"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"HELM_CACHE_HOME"}': {'.': {}, 'f:name': {}, 'f:value': {}}, 'k:{"name":"HELM_CONFIG_HOME"}': {'.': {}, 'f:name': {}, 'f:value': {}}, 'k:{"name":"HELM_DATA_HOME"}': {'.': {}, 'f:name': {}, 'f:value': {}}, 'k:{"name":"REDISDB"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"REDIS_COMPRESSION"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"REDIS_PASSWORD"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:secretKeyRef': {}}}, 'k:{"name":"REDIS_SERVER"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}}, 'f:image': {}, 'f:imagePullPolicy': {}, 'f:livenessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:httpGet': {'.': {}, 'f:path': {}, 'f:port': {}, 'f:scheme': {}}, 'f:initialDelaySeconds': {}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:timeoutSeconds': {}}, 'f:name': {}, 'f:ports': {'.': {}, 'k:{"containerPort":8081,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:protocol': {}}, 'k:{"containerPort":8084,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:protocol': {}}}, 'f:readinessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:httpGet': {'.': {}, 'f:path': {}, 'f:port': {}, 'f:scheme': {}}, 'f:initialDelaySeconds': {}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:timeoutSeconds': {}}, 'f:resources': {}, 'f:securityContext': {'.': {}, 'f:allowPrivilegeEscalation': {}, 'f:capabilities': {'.': {}, 'f:drop': {}}, 'f:readOnlyRootFilesystem': {}, 'f:runAsNonRoot': {}, 'f:seccompProfile': {'.': {}, 'f:type': {}}}, 'f:terminationMessagePath': {}, 'f:terminationMessagePolicy': {}, 'f:volumeMounts': {'.': {}, 'k:{"mountPath":"/app/config/gpg/keys"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}, 'k:{"mountPath":"/app/config/gpg/source"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}, 'k:{"mountPath":"/app/config/reposerver/tls"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}, 'k:{"mountPath":"/app/config/ssh"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}, 'k:{"mountPath":"/app/config/tls"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}, 'k:{"mountPath":"/helm-working-dir"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}, 'k:{"mountPath":"/home/argocd/cmp-server/plugins"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}, 'k:{"mountPath":"/tmp"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}}}}, 'f:dnsPolicy': {}, 'f:initContainers': {'.': {}, 'k:{"name":"copyutil"}': {'.': {}, 'f:command': {}, 'f:image': {}, 'f:imagePullPolicy': {}, 'f:name': {}, 'f:resources': {}, 'f:securityContext': {'.': {}, 'f:allowPrivilegeEscalation': {}, 'f:capabilities': {'.': {}, 'f:drop': {}}, 'f:readOnlyRootFilesystem': {}, 'f:runAsNonRoot': {}, 'f:seccompProfile': {'.': {}, 'f:type': {}}}, 'f:terminationMessagePath': {}, 'f:terminationMessagePolicy': {}, 'f:volumeMounts': {'.': {}, 'k:{"mountPath":"/var/run/argocd"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}}}}, 'f:nodeSelector': {}, 'f:restartPolicy': {}, 'f:schedulerName': {}, 'f:securityContext': {}, 'f:serviceAccount': {}, 'f:serviceAccountName': {}, 'f:terminationGracePeriodSeconds': {}, 'f:volumes': {'.': {}, 'k:{"name":"argocd-repo-server-tls"}': {'.': {}, 'f:name': {}, 'f:secret': {'.': {}, 'f:defaultMode': {}, 'f:items': {}, 'f:optional': {}, 'f:secretName': {}}}, 'k:{"name":"gpg-keyring"}': {'.': {}, 'f:emptyDir': {}, 'f:name': {}}, 'k:{"name":"gpg-keys"}': {'.': {}, 'f:configMap': {'.': {}, 'f:defaultMode': {}, 'f:name': {}}, 'f:name': {}}, 'k:{"name":"helm-working-dir"}': {'.': {}, 'f:emptyDir': {}, 'f:name': {}}, 'k:{"name":"plugins"}': {'.': {}, 'f:emptyDir': {}, 'f:name': {}}, 'k:{"name":"ssh-known-hosts"}': {'.': {}, 'f:configMap': {'.': {}, 'f:defaultMode': {}, 'f:name': {}}, 'f:name': {}}, 'k:{"name":"tls-certs"}': {'.': {}, 'f:configMap': {'.': {}, 'f:defaultMode': {}, 'f:name': {}}, 'f:name': {}}, 'k:{"name":"tmp"}': {'.': {}, 'f:emptyDir': {}, 'f:name': {}}, 'k:{"name":"var-files"}': {'.': {}, 'f:emptyDir': {}, 'f:name': {}}}}}}}}, {'manager': 'kube-controller-manager', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:36:00Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'f:deployment.kubernetes.io/revision': {}}}, 'f:status': {'f:availableReplicas': {}, 'f:conditions': {'.': {}, 'k:{"type":"Available"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}, 'k:{"type":"Progressing"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}}, 'f:observedGeneration': {}, 'f:readyReplicas': {}, 'f:replicas': {}, 'f:updatedReplicas': {}}}, 'subresource': 'status'}]}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'argocd-repo-server'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'argocd-repo-server'}}, 'spec': {'volumes': [{'name': 'ssh-known-hosts', 'configMap': {'name': 'argocd-ssh-known-hosts-cm', 'defaultMode': 420}}, {'name': 'tls-certs', 'configMap': {'name': 'argocd-tls-certs-cm', 'defaultMode': 420}}, {'name': 'gpg-keys', 'configMap': {'name': 'argocd-gpg-keys-cm', 'defaultMode': 420}}, {'name': 'gpg-keyring', 'emptyDir': {}}, {'name': 'tmp', 'emptyDir': {}}, {'name': 'helm-working-dir', 'emptyDir': {}}, {'name': 'argocd-repo-server-tls', 'secret': {'secretName': 'argocd-repo-server-tls', 'items': [{'key': 'tls.crt', 'path': 'tls.crt'}, {'key': 'tls.key', 'path': 'tls.key'}, {'key': 'ca.crt', 'path': 'ca.crt'}], 'defaultMode': 420, 'optional': True}}, {'name': 'var-files', 'emptyDir': {}}, {'name': 'plugins', 'emptyDir': {}}], 'initContainers': [{'name': 'copyutil', 'image': 'quay.io/argoproj/argocd:v3.0.6', 'command': ['/bin/cp', '-n', '/usr/local/bin/argocd', '/var/run/argocd/argocd-cmp-server'], 'resources': {}, 'volumeMounts': [{'name': 'var-files', 'mountPath': '/var/run/argocd'}], 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'IfNotPresent', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'runAsNonRoot': True, 'readOnlyRootFilesystem': True, 'allowPrivilegeEscalation': False, 'seccompProfile': {'type': 'RuntimeDefault'}}}], 'containers': [{'name': 'argocd-repo-server', 'image': 'quay.io/argoproj/argocd:v3.0.6', 'args': ['/usr/local/bin/argocd-repo-server'], 'ports': [{'containerPort': 8081, 'protocol': 'TCP'}, {'containerPort': 8084, 'protocol': 'TCP'}], 'env': [{'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'argocd-redis', 'key': 'auth'}}}, {'name': 'ARGOCD_RECONCILIATION_TIMEOUT', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cm', 'key': 'timeout.reconciliation', 'optional': True}}}, {'name': 'ARGOCD_REPO_SERVER_LOGFORMAT', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'reposerver.log.format', 'optional': True}}}, {'name': 'ARGOCD_REPO_SERVER_LOGLEVEL', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'reposerver.log.level', 'optional': True}}}, {'name': 'ARGOCD_LOG_FORMAT_TIMESTAMP', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'log.format.timestamp', 'optional': True}}}, {'name': 'ARGOCD_REPO_SERVER_PARALLELISM_LIMIT', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'reposerver.parallelism.limit', 'optional': True}}}, {'name': 'ARGOCD_REPO_SERVER_LISTEN_ADDRESS', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'reposerver.listen.address', 'optional': True}}}, {'name': 'ARGOCD_REPO_SERVER_LISTEN_METRICS_ADDRESS', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'reposerver.metrics.listen.address', 'optional': True}}}, {'name': 'ARGOCD_REPO_SERVER_DISABLE_TLS', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'reposerver.disable.tls', 'optional': True}}}, {'name': 'ARGOCD_TLS_MIN_VERSION', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'reposerver.tls.minversion', 'optional': True}}}, {'name': 'ARGOCD_TLS_MAX_VERSION', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'reposerver.tls.maxversion', 'optional': True}}}, {'name': 'ARGOCD_TLS_CIPHERS', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'reposerver.tls.ciphers', 'optional': True}}}, {'name': 'ARGOCD_REPO_CACHE_EXPIRATION', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'reposerver.repo.cache.expiration', 'optional': True}}}, {'name': 'REDIS_SERVER', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'redis.server', 'optional': True}}}, {'name': 'REDIS_COMPRESSION', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'redis.compression', 'optional': True}}}, {'name': 'REDISDB', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'redis.db', 'optional': True}}}, {'name': 'ARGOCD_DEFAULT_CACHE_EXPIRATION', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'reposerver.default.cache.expiration', 'optional': True}}}, {'name': 'ARGOCD_REPO_SERVER_OTLP_ADDRESS', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'otlp.address', 'optional': True}}}, {'name': 'ARGOCD_REPO_SERVER_OTLP_INSECURE', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'otlp.insecure', 'optional': True}}}, {'name': 'ARGOCD_REPO_SERVER_OTLP_HEADERS', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'otlp.headers', 'optional': True}}}, {'name': 'ARGOCD_REPO_SERVER_OTLP_ATTRS', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'otlp.attrs', 'optional': True}}}, {'name': 'ARGOCD_REPO_SERVER_MAX_COMBINED_DIRECTORY_MANIFESTS_SIZE', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'reposerver.max.combined.directory.manifests.size', 'optional': True}}}, {'name': 'ARGOCD_REPO_SERVER_PLUGIN_TAR_EXCLUSIONS', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'reposerver.plugin.tar.exclusions', 'optional': True}}}, {'name': 'ARGOCD_REPO_SERVER_PLUGIN_USE_MANIFEST_GENERATE_PATHS', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'reposerver.plugin.use.manifest.generate.paths', 'optional': True}}}, {'name': 'ARGOCD_REPO_SERVER_ALLOW_OUT_OF_BOUNDS_SYMLINKS', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'reposerver.allow.oob.symlinks', 'optional': True}}}, {'name': 'ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_TAR_SIZE', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'reposerver.streamed.manifest.max.tar.size', 'optional': True}}}, {'name': 'ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_EXTRACTED_SIZE', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'reposerver.streamed.manifest.max.extracted.size', 'optional': True}}}, {'name': 'ARGOCD_REPO_SERVER_HELM_MANIFEST_MAX_EXTRACTED_SIZE', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'reposerver.helm.manifest.max.extracted.size', 'optional': True}}}, {'name': 'ARGOCD_REPO_SERVER_DISABLE_HELM_MANIFEST_MAX_EXTRACTED_SIZE', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'reposerver.disable.helm.manifest.max.extracted.size', 'optional': True}}}, {'name': 'ARGOCD_REVISION_CACHE_LOCK_TIMEOUT', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'reposerver.revision.cache.lock.timeout', 'optional': True}}}, {'name': 'ARGOCD_GIT_MODULES_ENABLED', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'reposerver.enable.git.submodule', 'optional': True}}}, {'name': 'ARGOCD_GIT_LS_REMOTE_PARALLELISM_LIMIT', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'reposerver.git.lsremote.parallelism.limit', 'optional': True}}}, {'name': 'ARGOCD_GIT_REQUEST_TIMEOUT', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'reposerver.git.request.timeout', 'optional': True}}}, {'name': 'ARGOCD_GRPC_MAX_SIZE_MB', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'reposerver.grpc.max.size', 'optional': True}}}, {'name': 'ARGOCD_REPO_SERVER_INCLUDE_HIDDEN_DIRECTORIES', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'reposerver.include.hidden.directories', 'optional': True}}}, {'name': 'HELM_CACHE_HOME', 'value': '/helm-working-dir'}, {'name': 'HELM_CONFIG_HOME', 'value': '/helm-working-dir'}, {'name': 'HELM_DATA_HOME', 'value': '/helm-working-dir'}], 'resources': {}, 'volumeMounts': [{'name': 'ssh-known-hosts', 'mountPath': '/app/config/ssh'}, {'name': 'tls-certs', 'mountPath': '/app/config/tls'}, {'name': 'gpg-keys', 'mountPath': '/app/config/gpg/source'}, {'name': 'gpg-keyring', 'mountPath': '/app/config/gpg/keys'}, {'name': 'argocd-repo-server-tls', 'mountPath': '/app/config/reposerver/tls'}, {'name': 'tmp', 'mountPath': '/tmp'}, {'name': 'helm-working-dir', 'mountPath': '/helm-working-dir'}, {'name': 'plugins', 'mountPath': '/home/argocd/cmp-server/plugins'}], 'livenessProbe': {'httpGet': {'path': '/healthz?full=true', 'port': 8084, 'scheme': 'HTTP'}, 'initialDelaySeconds': 30, 'timeoutSeconds': 5, 'periodSeconds': 30, 'successThreshold': 1, 'failureThreshold': 3}, 'readinessProbe': {'httpGet': {'path': '/healthz', 'port': 8084, 'scheme': 'HTTP'}, 'initialDelaySeconds': 5, 'timeoutSeconds': 1, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 3}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'Always', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'runAsNonRoot': True, 'readOnlyRootFilesystem': True, 'allowPrivilegeEscalation': False, 'seccompProfile': {'type': 'RuntimeDefault'}}}], 'restartPolicy': 'Always', 'terminationGracePeriodSeconds': 30, 'dnsPolicy': 'ClusterFirst', 'nodeSelector': {'kubernetes.io/os': 'linux'}, 'serviceAccountName': 'argocd-repo-server', 'serviceAccount': 'argocd-repo-server', 'automountServiceAccountToken': False, 'securityContext': {}, 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'argocd-repo-server'}}, 'topologyKey': 'kubernetes.io/hostname'}}, {'weight': 5, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/part-of': 'argocd'}}, 'topologyKey': 'kubernetes.io/hostname'}}]}}, 'schedulerName': 'default-scheduler'}}, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxUnavailable': '25%', 'maxSurge': '25%'}}, 'revisionHistoryLimit': 10, 'progressDeadlineSeconds': 600}, 'status': {'observedGeneration': 1, 'replicas': 1, 'updatedReplicas': 1, 'readyReplicas': 1, 'availableReplicas': 1, 'conditions': [{'type': 'Available', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:36:00Z', 'lastTransitionTime': '2025-10-01T12:36:00Z', 'reason': 'MinimumReplicasAvailable', 'message': 'Deployment has minimum availability.'}, {'type': 'Progressing', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:36:00Z', 'lastTransitionTime': '2025-10-01T12:35:25Z', 'reason': 'NewReplicaSetAvailable', 'message': 'ReplicaSet "argocd-repo-server-6494cbbfc6" has successfully progressed.'}]}, 'apiVersion': 'apps/v1', 'kind': 'Deployment'})
ok: [127.0.0.1] => (item={'metadata': {'name': 'argocd-server', 'namespace': 'argocd', 'uid': '60c0d9a9-a8db-47d2-8ef3-1b5bf4278aac', 'resourceVersion': '5781', 'generation': 1, 'creationTimestamp': '2025-10-01T12:35:25Z', 'labels': {'app.kubernetes.io/component': 'server', 'app.kubernetes.io/name': 'argocd-server', 'app.kubernetes.io/part-of': 'argocd'}, 'annotations': {'config.k8s.io/owning-inventory': 'b3eea0dca944e5ddd5a4d7c4fdcfda74d5608155-1759322119970877404', 'deployment.kubernetes.io/revision': '1', 'internal.kpt.dev/upstream-identifier': 'apps|Deployment|argocd|argocd-server', 'kubectl.kubernetes.io/last-applied-configuration': '{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"config.k8s.io/owning-inventory":"b3eea0dca944e5ddd5a4d7c4fdcfda74d5608155-1759322119970877404","internal.kpt.dev/upstream-identifier":"apps|Deployment|argocd|argocd-server"},"labels":{"app.kubernetes.io/component":"server","app.kubernetes.io/name":"argocd-server","app.kubernetes.io/part-of":"argocd"},"name":"argocd-server","namespace":"argocd"},"spec":{"selector":{"matchLabels":{"app.kubernetes.io/name":"argocd-server"}},"template":{"metadata":{"labels":{"app.kubernetes.io/name":"argocd-server"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/name":"argocd-server"}},"topologyKey":"kubernetes.io/hostname"},"weight":100},{"podAffinityTerm":{"labelSelector":{"matchLabels":{"app.kubernetes.io/part-of":"argocd"}},"topologyKey":"kubernetes.io/hostname"},"weight":5}]}},"containers":[{"args":["/usr/local/bin/argocd-server"],"env":[{"name":"REDIS_PASSWORD","valueFrom":{"secretKeyRef":{"key":"auth","name":"argocd-redis"}}},{"name":"ARGOCD_SERVER_INSECURE","valueFrom":{"configMapKeyRef":{"key":"server.insecure","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_BASEHREF","valueFrom":{"configMapKeyRef":{"key":"server.basehref","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_ROOTPATH","valueFrom":{"configMapKeyRef":{"key":"server.rootpath","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_LOGFORMAT","valueFrom":{"configMapKeyRef":{"key":"server.log.format","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_LOG_LEVEL","valueFrom":{"configMapKeyRef":{"key":"server.log.level","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_REPO_SERVER","valueFrom":{"configMapKeyRef":{"key":"repo.server","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_DEX_SERVER","valueFrom":{"configMapKeyRef":{"key":"server.dex.server","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_DISABLE_AUTH","valueFrom":{"configMapKeyRef":{"key":"server.disable.auth","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_ENABLE_GZIP","valueFrom":{"configMapKeyRef":{"key":"server.enable.gzip","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_REPO_SERVER_TIMEOUT_SECONDS","valueFrom":{"configMapKeyRef":{"key":"server.repo.server.timeout.seconds","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_X_FRAME_OPTIONS","valueFrom":{"configMapKeyRef":{"key":"server.x.frame.options","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_CONTENT_SECURITY_POLICY","valueFrom":{"configMapKeyRef":{"key":"server.content.security.policy","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_REPO_SERVER_PLAINTEXT","valueFrom":{"configMapKeyRef":{"key":"server.repo.server.plaintext","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_REPO_SERVER_STRICT_TLS","valueFrom":{"configMapKeyRef":{"key":"server.repo.server.strict.tls","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_DEX_SERVER_PLAINTEXT","valueFrom":{"configMapKeyRef":{"key":"server.dex.server.plaintext","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_DEX_SERVER_STRICT_TLS","valueFrom":{"configMapKeyRef":{"key":"server.dex.server.strict.tls","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_TLS_MIN_VERSION","valueFrom":{"configMapKeyRef":{"key":"server.tls.minversion","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_TLS_MAX_VERSION","valueFrom":{"configMapKeyRef":{"key":"server.tls.maxversion","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_TLS_CIPHERS","valueFrom":{"configMapKeyRef":{"key":"server.tls.ciphers","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_CONNECTION_STATUS_CACHE_EXPIRATION","valueFrom":{"configMapKeyRef":{"key":"server.connection.status.cache.expiration","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_OIDC_CACHE_EXPIRATION","valueFrom":{"configMapKeyRef":{"key":"server.oidc.cache.expiration","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_LOGIN_ATTEMPTS_EXPIRATION","valueFrom":{"configMapKeyRef":{"key":"server.login.attempts.expiration","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_STATIC_ASSETS","valueFrom":{"configMapKeyRef":{"key":"server.staticassets","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APP_STATE_CACHE_EXPIRATION","valueFrom":{"configMapKeyRef":{"key":"server.app.state.cache.expiration","name":"argocd-cmd-params-cm","optional":true}}},{"name":"REDIS_SERVER","valueFrom":{"configMapKeyRef":{"key":"redis.server","name":"argocd-cmd-params-cm","optional":true}}},{"name":"REDIS_COMPRESSION","valueFrom":{"configMapKeyRef":{"key":"redis.compression","name":"argocd-cmd-params-cm","optional":true}}},{"name":"REDISDB","valueFrom":{"configMapKeyRef":{"key":"redis.db","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_DEFAULT_CACHE_EXPIRATION","valueFrom":{"configMapKeyRef":{"key":"server.default.cache.expiration","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_MAX_COOKIE_NUMBER","valueFrom":{"configMapKeyRef":{"key":"server.http.cookie.maxnumber","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_LISTEN_ADDRESS","valueFrom":{"configMapKeyRef":{"key":"server.listen.address","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_METRICS_LISTEN_ADDRESS","valueFrom":{"configMapKeyRef":{"key":"server.metrics.listen.address","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_OTLP_ADDRESS","valueFrom":{"configMapKeyRef":{"key":"otlp.address","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_OTLP_INSECURE","valueFrom":{"configMapKeyRef":{"key":"otlp.insecure","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_OTLP_HEADERS","valueFrom":{"configMapKeyRef":{"key":"otlp.headers","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_OTLP_ATTRS","valueFrom":{"configMapKeyRef":{"key":"otlp.attrs","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATION_NAMESPACES","valueFrom":{"configMapKeyRef":{"key":"application.namespaces","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_ENABLE_PROXY_EXTENSION","valueFrom":{"configMapKeyRef":{"key":"server.enable.proxy.extension","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_K8SCLIENT_RETRY_MAX","valueFrom":{"configMapKeyRef":{"key":"server.k8sclient.retry.max","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_K8SCLIENT_RETRY_BASE_BACKOFF","valueFrom":{"configMapKeyRef":{"key":"server.k8sclient.retry.base.backoff","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_API_CONTENT_TYPES","valueFrom":{"configMapKeyRef":{"key":"server.api.content.types","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SERVER_WEBHOOK_PARALLELISM_LIMIT","valueFrom":{"configMapKeyRef":{"key":"server.webhook.parallelism.limit","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_NEW_GIT_FILE_GLOBBING","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.enable.new.git.file.globbing","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_SCM_ROOT_CA_PATH","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.scm.root.ca.path","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_ALLOWED_SCM_PROVIDERS","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.allowed.scm.providers","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_SCM_PROVIDERS","valueFrom":{"configMapKeyRef":{"key":"applicationsetcontroller.enable.scm.providers","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_HYDRATOR_ENABLED","valueFrom":{"configMapKeyRef":{"key":"hydrator.enabled","name":"argocd-cmd-params-cm","optional":true}}},{"name":"ARGOCD_SYNC_WITH_REPLACE_ALLOWED","valueFrom":{"configMapKeyRef":{"key":"server.sync.replace.allowed","name":"argocd-cmd-params-cm","optional":true}}}],"image":"quay.io/argoproj/argocd:v3.0.6","imagePullPolicy":"Always","livenessProbe":{"httpGet":{"path":"/healthz?full=true","port":8080},"initialDelaySeconds":3,"periodSeconds":30,"timeoutSeconds":5},"name":"argocd-server","ports":[{"containerPort":8080},{"containerPort":8083}],"readinessProbe":{"httpGet":{"path":"/healthz","port":8080},"initialDelaySeconds":3,"periodSeconds":30},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true,"runAsNonRoot":true,"seccompProfile":{"type":"RuntimeDefault"}},"volumeMounts":[{"mountPath":"/app/config/ssh","name":"ssh-known-hosts"},{"mountPath":"/app/config/tls","name":"tls-certs"},{"mountPath":"/app/config/server/tls","name":"argocd-repo-server-tls"},{"mountPath":"/app/config/dex/tls","name":"argocd-dex-server-tls"},{"mountPath":"/home/argocd","name":"plugins-home"},{"mountPath":"/tmp","name":"tmp"},{"mountPath":"/home/argocd/params","name":"argocd-cmd-params-cm"}]}],"nodeSelector":{"kubernetes.io/os":"linux"},"serviceAccountName":"argocd-server","volumes":[{"emptyDir":{},"name":"plugins-home"},{"emptyDir":{},"name":"tmp"},{"configMap":{"name":"argocd-ssh-known-hosts-cm"},"name":"ssh-known-hosts"},{"configMap":{"name":"argocd-tls-certs-cm"},"name":"tls-certs"},{"name":"argocd-repo-server-tls","secret":{"items":[{"key":"tls.crt","path":"tls.crt"},{"key":"tls.key","path":"tls.key"},{"key":"ca.crt","path":"ca.crt"}],"optional":true,"secretName":"argocd-repo-server-tls"}},{"name":"argocd-dex-server-tls","secret":{"items":[{"key":"tls.crt","path":"tls.crt"},{"key":"ca.crt","path":"ca.crt"}],"optional":true,"secretName":"argocd-dex-server-tls"}},{"configMap":{"items":[{"key":"server.profile.enabled","path":"profiler.enabled"}],"name":"argocd-cmd-params-cm","optional":true},"name":"argocd-cmd-params-cm"}]}}}}\n'}, 'managedFields': [{'manager': 'kubectl', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:35:25Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'.': {}, 'f:config.k8s.io/owning-inventory': {}, 'f:internal.kpt.dev/upstream-identifier': {}, 'f:kubectl.kubernetes.io/last-applied-configuration': {}}, 'f:labels': {'.': {}, 'f:app.kubernetes.io/component': {}, 'f:app.kubernetes.io/name': {}, 'f:app.kubernetes.io/part-of': {}}}, 'f:spec': {'f:progressDeadlineSeconds': {}, 'f:replicas': {}, 'f:revisionHistoryLimit': {}, 'f:selector': {}, 'f:strategy': {'f:rollingUpdate': {'.': {}, 'f:maxSurge': {}, 'f:maxUnavailable': {}}, 'f:type': {}}, 'f:template': {'f:metadata': {'f:labels': {'.': {}, 'f:app.kubernetes.io/name': {}}}, 'f:spec': {'f:affinity': {'.': {}, 'f:podAntiAffinity': {'.': {}, 'f:preferredDuringSchedulingIgnoredDuringExecution': {}}}, 'f:containers': {'k:{"name":"argocd-server"}': {'.': {}, 'f:args': {}, 'f:env': {'.': {}, 'k:{"name":"ARGOCD_API_CONTENT_TYPES"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_ALLOWED_SCM_PROVIDERS"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_NEW_GIT_FILE_GLOBBING"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_SCM_PROVIDERS"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_APPLICATIONSET_CONTROLLER_SCM_ROOT_CA_PATH"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_APPLICATION_NAMESPACES"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_APP_STATE_CACHE_EXPIRATION"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_DEFAULT_CACHE_EXPIRATION"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_HYDRATOR_ENABLED"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_K8SCLIENT_RETRY_BASE_BACKOFF"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_K8SCLIENT_RETRY_MAX"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_MAX_COOKIE_NUMBER"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_SERVER_BASEHREF"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_SERVER_CONNECTION_STATUS_CACHE_EXPIRATION"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_SERVER_CONTENT_SECURITY_POLICY"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_SERVER_DEX_SERVER"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_SERVER_DEX_SERVER_PLAINTEXT"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_SERVER_DEX_SERVER_STRICT_TLS"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_SERVER_DISABLE_AUTH"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_SERVER_ENABLE_GZIP"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_SERVER_ENABLE_PROXY_EXTENSION"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_SERVER_INSECURE"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_SERVER_LISTEN_ADDRESS"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_SERVER_LOGFORMAT"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_SERVER_LOGIN_ATTEMPTS_EXPIRATION"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_SERVER_LOG_LEVEL"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_SERVER_METRICS_LISTEN_ADDRESS"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_SERVER_OIDC_CACHE_EXPIRATION"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_SERVER_OTLP_ADDRESS"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_SERVER_OTLP_ATTRS"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_SERVER_OTLP_HEADERS"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_SERVER_OTLP_INSECURE"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_SERVER_REPO_SERVER"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_SERVER_REPO_SERVER_PLAINTEXT"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_SERVER_REPO_SERVER_STRICT_TLS"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_SERVER_REPO_SERVER_TIMEOUT_SECONDS"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_SERVER_ROOTPATH"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_SERVER_STATIC_ASSETS"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_SERVER_WEBHOOK_PARALLELISM_LIMIT"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_SERVER_X_FRAME_OPTIONS"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_SYNC_WITH_REPLACE_ALLOWED"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_TLS_CIPHERS"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_TLS_MAX_VERSION"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"ARGOCD_TLS_MIN_VERSION"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"REDISDB"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"REDIS_COMPRESSION"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}, 'k:{"name":"REDIS_PASSWORD"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:secretKeyRef': {}}}, 'k:{"name":"REDIS_SERVER"}': {'.': {}, 'f:name': {}, 'f:valueFrom': {'.': {}, 'f:configMapKeyRef': {}}}}, 'f:image': {}, 'f:imagePullPolicy': {}, 'f:livenessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:httpGet': {'.': {}, 'f:path': {}, 'f:port': {}, 'f:scheme': {}}, 'f:initialDelaySeconds': {}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:timeoutSeconds': {}}, 'f:name': {}, 'f:ports': {'.': {}, 'k:{"containerPort":8080,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:protocol': {}}, 'k:{"containerPort":8083,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:protocol': {}}}, 'f:readinessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:httpGet': {'.': {}, 'f:path': {}, 'f:port': {}, 'f:scheme': {}}, 'f:initialDelaySeconds': {}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:timeoutSeconds': {}}, 'f:resources': {}, 'f:securityContext': {'.': {}, 'f:allowPrivilegeEscalation': {}, 'f:capabilities': {'.': {}, 'f:drop': {}}, 'f:readOnlyRootFilesystem': {}, 'f:runAsNonRoot': {}, 'f:seccompProfile': {'.': {}, 'f:type': {}}}, 'f:terminationMessagePath': {}, 'f:terminationMessagePolicy': {}, 'f:volumeMounts': {'.': {}, 'k:{"mountPath":"/app/config/dex/tls"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}, 'k:{"mountPath":"/app/config/server/tls"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}, 'k:{"mountPath":"/app/config/ssh"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}, 'k:{"mountPath":"/app/config/tls"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}, 'k:{"mountPath":"/home/argocd"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}, 'k:{"mountPath":"/home/argocd/params"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}, 'k:{"mountPath":"/tmp"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}}}}, 'f:dnsPolicy': {}, 'f:nodeSelector': {}, 'f:restartPolicy': {}, 'f:schedulerName': {}, 'f:securityContext': {}, 'f:serviceAccount': {}, 'f:serviceAccountName': {}, 'f:terminationGracePeriodSeconds': {}, 'f:volumes': {'.': {}, 'k:{"name":"argocd-cmd-params-cm"}': {'.': {}, 'f:configMap': {'.': {}, 'f:defaultMode': {}, 'f:items': {}, 'f:name': {}, 'f:optional': {}}, 'f:name': {}}, 'k:{"name":"argocd-dex-server-tls"}': {'.': {}, 'f:name': {}, 'f:secret': {'.': {}, 'f:defaultMode': {}, 'f:items': {}, 'f:optional': {}, 'f:secretName': {}}}, 'k:{"name":"argocd-repo-server-tls"}': {'.': {}, 'f:name': {}, 'f:secret': {'.': {}, 'f:defaultMode': {}, 'f:items': {}, 'f:optional': {}, 'f:secretName': {}}}, 'k:{"name":"plugins-home"}': {'.': {}, 'f:emptyDir': {}, 'f:name': {}}, 'k:{"name":"ssh-known-hosts"}': {'.': {}, 'f:configMap': {'.': {}, 'f:defaultMode': {}, 'f:name': {}}, 'f:name': {}}, 'k:{"name":"tls-certs"}': {'.': {}, 'f:configMap': {'.': {}, 'f:defaultMode': {}, 'f:name': {}}, 'f:name': {}}, 'k:{"name":"tmp"}': {'.': {}, 'f:emptyDir': {}, 'f:name': {}}}}}}}}, {'manager': 'kube-controller-manager', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:36:09Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'f:deployment.kubernetes.io/revision': {}}}, 'f:status': {'f:availableReplicas': {}, 'f:conditions': {'.': {}, 'k:{"type":"Available"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}, 'k:{"type":"Progressing"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}}, 'f:observedGeneration': {}, 'f:readyReplicas': {}, 'f:replicas': {}, 'f:updatedReplicas': {}}}, 'subresource': 'status'}]}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app.kubernetes.io/name': 'argocd-server'}}, 'template': {'metadata': {'labels': {'app.kubernetes.io/name': 'argocd-server'}}, 'spec': {'volumes': [{'name': 'plugins-home', 'emptyDir': {}}, {'name': 'tmp', 'emptyDir': {}}, {'name': 'ssh-known-hosts', 'configMap': {'name': 'argocd-ssh-known-hosts-cm', 'defaultMode': 420}}, {'name': 'tls-certs', 'configMap': {'name': 'argocd-tls-certs-cm', 'defaultMode': 420}}, {'name': 'argocd-repo-server-tls', 'secret': {'secretName': 'argocd-repo-server-tls', 'items': [{'key': 'tls.crt', 'path': 'tls.crt'}, {'key': 'tls.key', 'path': 'tls.key'}, {'key': 'ca.crt', 'path': 'ca.crt'}], 'defaultMode': 420, 'optional': True}}, {'name': 'argocd-dex-server-tls', 'secret': {'secretName': 'argocd-dex-server-tls', 'items': [{'key': 'tls.crt', 'path': 'tls.crt'}, {'key': 'ca.crt', 'path': 'ca.crt'}], 'defaultMode': 420, 'optional': True}}, {'name': 'argocd-cmd-params-cm', 'configMap': {'name': 'argocd-cmd-params-cm', 'items': [{'key': 'server.profile.enabled', 'path': 'profiler.enabled'}], 'defaultMode': 420, 'optional': True}}], 'containers': [{'name': 'argocd-server', 'image': 'quay.io/argoproj/argocd:v3.0.6', 'args': ['/usr/local/bin/argocd-server'], 'ports': [{'containerPort': 8080, 'protocol': 'TCP'}, {'containerPort': 8083, 'protocol': 'TCP'}], 'env': [{'name': 'REDIS_PASSWORD', 'valueFrom': {'secretKeyRef': {'name': 'argocd-redis', 'key': 'auth'}}}, {'name': 'ARGOCD_SERVER_INSECURE', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'server.insecure', 'optional': True}}}, {'name': 'ARGOCD_SERVER_BASEHREF', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'server.basehref', 'optional': True}}}, {'name': 'ARGOCD_SERVER_ROOTPATH', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'server.rootpath', 'optional': True}}}, {'name': 'ARGOCD_SERVER_LOGFORMAT', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'server.log.format', 'optional': True}}}, {'name': 'ARGOCD_SERVER_LOG_LEVEL', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'server.log.level', 'optional': True}}}, {'name': 'ARGOCD_SERVER_REPO_SERVER', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'repo.server', 'optional': True}}}, {'name': 'ARGOCD_SERVER_DEX_SERVER', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'server.dex.server', 'optional': True}}}, {'name': 'ARGOCD_SERVER_DISABLE_AUTH', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'server.disable.auth', 'optional': True}}}, {'name': 'ARGOCD_SERVER_ENABLE_GZIP', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'server.enable.gzip', 'optional': True}}}, {'name': 'ARGOCD_SERVER_REPO_SERVER_TIMEOUT_SECONDS', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'server.repo.server.timeout.seconds', 'optional': True}}}, {'name': 'ARGOCD_SERVER_X_FRAME_OPTIONS', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'server.x.frame.options', 'optional': True}}}, {'name': 'ARGOCD_SERVER_CONTENT_SECURITY_POLICY', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'server.content.security.policy', 'optional': True}}}, {'name': 'ARGOCD_SERVER_REPO_SERVER_PLAINTEXT', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'server.repo.server.plaintext', 'optional': True}}}, {'name': 'ARGOCD_SERVER_REPO_SERVER_STRICT_TLS', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'server.repo.server.strict.tls', 'optional': True}}}, {'name': 'ARGOCD_SERVER_DEX_SERVER_PLAINTEXT', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'server.dex.server.plaintext', 'optional': True}}}, {'name': 'ARGOCD_SERVER_DEX_SERVER_STRICT_TLS', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'server.dex.server.strict.tls', 'optional': True}}}, {'name': 'ARGOCD_TLS_MIN_VERSION', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'server.tls.minversion', 'optional': True}}}, {'name': 'ARGOCD_TLS_MAX_VERSION', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'server.tls.maxversion', 'optional': True}}}, {'name': 'ARGOCD_TLS_CIPHERS', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'server.tls.ciphers', 'optional': True}}}, {'name': 'ARGOCD_SERVER_CONNECTION_STATUS_CACHE_EXPIRATION', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'server.connection.status.cache.expiration', 'optional': True}}}, {'name': 'ARGOCD_SERVER_OIDC_CACHE_EXPIRATION', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'server.oidc.cache.expiration', 'optional': True}}}, {'name': 'ARGOCD_SERVER_LOGIN_ATTEMPTS_EXPIRATION', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'server.login.attempts.expiration', 'optional': True}}}, {'name': 'ARGOCD_SERVER_STATIC_ASSETS', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'server.staticassets', 'optional': True}}}, {'name': 'ARGOCD_APP_STATE_CACHE_EXPIRATION', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'server.app.state.cache.expiration', 'optional': True}}}, {'name': 'REDIS_SERVER', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'redis.server', 'optional': True}}}, {'name': 'REDIS_COMPRESSION', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'redis.compression', 'optional': True}}}, {'name': 'REDISDB', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'redis.db', 'optional': True}}}, {'name': 'ARGOCD_DEFAULT_CACHE_EXPIRATION', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'server.default.cache.expiration', 'optional': True}}}, {'name': 'ARGOCD_MAX_COOKIE_NUMBER', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'server.http.cookie.maxnumber', 'optional': True}}}, {'name': 'ARGOCD_SERVER_LISTEN_ADDRESS', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'server.listen.address', 'optional': True}}}, {'name': 'ARGOCD_SERVER_METRICS_LISTEN_ADDRESS', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'server.metrics.listen.address', 'optional': True}}}, {'name': 'ARGOCD_SERVER_OTLP_ADDRESS', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'otlp.address', 'optional': True}}}, {'name': 'ARGOCD_SERVER_OTLP_INSECURE', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'otlp.insecure', 'optional': True}}}, {'name': 'ARGOCD_SERVER_OTLP_HEADERS', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'otlp.headers', 'optional': True}}}, {'name': 'ARGOCD_SERVER_OTLP_ATTRS', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'otlp.attrs', 'optional': True}}}, {'name': 'ARGOCD_APPLICATION_NAMESPACES', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'application.namespaces', 'optional': True}}}, {'name': 'ARGOCD_SERVER_ENABLE_PROXY_EXTENSION', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'server.enable.proxy.extension', 'optional': True}}}, {'name': 'ARGOCD_K8SCLIENT_RETRY_MAX', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'server.k8sclient.retry.max', 'optional': True}}}, {'name': 'ARGOCD_K8SCLIENT_RETRY_BASE_BACKOFF', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'server.k8sclient.retry.base.backoff', 'optional': True}}}, {'name': 'ARGOCD_API_CONTENT_TYPES', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'server.api.content.types', 'optional': True}}}, {'name': 'ARGOCD_SERVER_WEBHOOK_PARALLELISM_LIMIT', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'server.webhook.parallelism.limit', 'optional': True}}}, {'name': 'ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_NEW_GIT_FILE_GLOBBING', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'applicationsetcontroller.enable.new.git.file.globbing', 'optional': True}}}, {'name': 'ARGOCD_APPLICATIONSET_CONTROLLER_SCM_ROOT_CA_PATH', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'applicationsetcontroller.scm.root.ca.path', 'optional': True}}}, {'name': 'ARGOCD_APPLICATIONSET_CONTROLLER_ALLOWED_SCM_PROVIDERS', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'applicationsetcontroller.allowed.scm.providers', 'optional': True}}}, {'name': 'ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_SCM_PROVIDERS', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'applicationsetcontroller.enable.scm.providers', 'optional': True}}}, {'name': 'ARGOCD_HYDRATOR_ENABLED', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'hydrator.enabled', 'optional': True}}}, {'name': 'ARGOCD_SYNC_WITH_REPLACE_ALLOWED', 'valueFrom': {'configMapKeyRef': {'name': 'argocd-cmd-params-cm', 'key': 'server.sync.replace.allowed', 'optional': True}}}], 'resources': {}, 'volumeMounts': [{'name': 'ssh-known-hosts', 'mountPath': '/app/config/ssh'}, {'name': 'tls-certs', 'mountPath': '/app/config/tls'}, {'name': 'argocd-repo-server-tls', 'mountPath': '/app/config/server/tls'}, {'name': 'argocd-dex-server-tls', 'mountPath': '/app/config/dex/tls'}, {'name': 'plugins-home', 'mountPath': '/home/argocd'}, {'name': 'tmp', 'mountPath': '/tmp'}, {'name': 'argocd-cmd-params-cm', 'mountPath': '/home/argocd/params'}], 'livenessProbe': {'httpGet': {'path': '/healthz?full=true', 'port': 8080, 'scheme': 'HTTP'}, 'initialDelaySeconds': 3, 'timeoutSeconds': 5, 'periodSeconds': 30, 'successThreshold': 1, 'failureThreshold': 3}, 'readinessProbe': {'httpGet': {'path': '/healthz', 'port': 8080, 'scheme': 'HTTP'}, 'initialDelaySeconds': 3, 'timeoutSeconds': 1, 'periodSeconds': 30, 'successThreshold': 1, 'failureThreshold': 3}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'Always', 'securityContext': {'capabilities': {'drop': ['ALL']}, 'runAsNonRoot': True, 'readOnlyRootFilesystem': True, 'allowPrivilegeEscalation': False, 'seccompProfile': {'type': 'RuntimeDefault'}}}], 'restartPolicy': 'Always', 'terminationGracePeriodSeconds': 30, 'dnsPolicy': 'ClusterFirst', 'nodeSelector': {'kubernetes.io/os': 'linux'}, 'serviceAccountName': 'argocd-server', 'serviceAccount': 'argocd-server', 'securityContext': {}, 'affinity': {'podAntiAffinity': {'preferredDuringSchedulingIgnoredDuringExecution': [{'weight': 100, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/name': 'argocd-server'}}, 'topologyKey': 'kubernetes.io/hostname'}}, {'weight': 5, 'podAffinityTerm': {'labelSelector': {'matchLabels': {'app.kubernetes.io/part-of': 'argocd'}}, 'topologyKey': 'kubernetes.io/hostname'}}]}}, 'schedulerName': 'default-scheduler'}}, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxUnavailable': '25%', 'maxSurge': '25%'}}, 'revisionHistoryLimit': 10, 'progressDeadlineSeconds': 600}, 'status': {'observedGeneration': 1, 'replicas': 1, 'updatedReplicas': 1, 'readyReplicas': 1, 'availableReplicas': 1, 'conditions': [{'type': 'Available', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:36:09Z', 'lastTransitionTime': '2025-10-01T12:36:09Z', 'reason': 'MinimumReplicasAvailable', 'message': 'Deployment has minimum availability.'}, {'type': 'Progressing', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:36:09Z', 'lastTransitionTime': '2025-10-01T12:35:25Z', 'reason': 'NewReplicaSetAvailable', 'message': 'ReplicaSet "argocd-server-6687649b6c" has successfully progressed.'}]}, 'apiVersion': 'apps/v1', 'kind': 'Deployment'})

TASK [install : Create gitea user password in nephio-system namespace] *********
Wednesday 01 October 2025  12:36:42 +0000 (0:00:05.895)       0:07:14.492 ***** 
Wednesday 01 October 2025  12:36:42 +0000 (0:00:05.895)       0:07:14.491 ***** 
changed: [127.0.0.1]

TASK [Deploy Nephio webui] *****************************************************
Wednesday 01 October 2025  12:36:43 +0000 (0:00:00.830)       0:07:15.322 ***** 
Wednesday 01 October 2025  12:36:43 +0000 (0:00:00.830)       0:07:15.322 ***** 
included: kpt for 127.0.0.1

TASK [kpt : Define working directory] ******************************************
Wednesday 01 October 2025  12:36:43 +0000 (0:00:00.187)       0:07:15.510 ***** 
Wednesday 01 October 2025  12:36:43 +0000 (0:00:00.187)       0:07:15.509 ***** 
ok: [127.0.0.1]

TASK [kpt : Create base directory if it does not exist: /tmp/kpt-pkg/nephio/optional/webui] ***
Wednesday 01 October 2025  12:36:43 +0000 (0:00:00.053)       0:07:15.563 ***** 
Wednesday 01 October 2025  12:36:43 +0000 (0:00:00.053)       0:07:15.562 ***** 
ok: [127.0.0.1]

TASK [kpt : Fetch package: nephio/optional/webui] ******************************
Wednesday 01 October 2025  12:36:43 +0000 (0:00:00.275)       0:07:15.839 ***** 
Wednesday 01 October 2025  12:36:43 +0000 (0:00:00.276)       0:07:15.839 ***** 
changed: [127.0.0.1]

TASK [kpt : Get package content information for nephio/optional/webui] *********
Wednesday 01 October 2025  12:36:44 +0000 (0:00:01.124)       0:07:16.963 ***** 
Wednesday 01 October 2025  12:36:44 +0000 (0:00:01.124)       0:07:16.963 ***** 
ok: [127.0.0.1]

TASK [kpt : Print package content information for nephio/optional/webui] *******
Wednesday 01 October 2025  12:36:45 +0000 (0:00:00.353)       0:07:17.317 ***** 
Wednesday 01 October 2025  12:36:45 +0000 (0:00:00.353)       0:07:17.316 ***** 
ok: [127.0.0.1] => {
    "kpt_pkg_tree.stdout_lines": [
        "Package \"webui\"",
        "├── [0-namespace.yaml]  Namespace nephio-webui",
        "├── [Kptfile]  Kptfile webui",
        "├── [_gen_configmap_nephio-webui-config.yaml]  ConfigMap nephio-webui/nephio-webui-config",
        "├── [cluster-role-binding.yaml]  ClusterRoleBinding nephio-webui",
        "├── [deployment.yaml]  Deployment nephio-webui/nephio-webui",
        "├── [gen-configmap.yaml]  GenConfigMap gen-app-config",
        "├── [package-context.yaml]  ConfigMap kptfile.kpt.dev",
        "├── [service-account.yaml]  ServiceAccount nephio-webui/nephio-webui-sa",
        "├── [service.yaml]  Service nephio-webui/nephio-webui",
        "└── [set-auth.yaml]  StarlarkRun set-auth"
    ]
}

TASK [kpt : Render package: nephio/optional/webui] *****************************
Wednesday 01 October 2025  12:36:45 +0000 (0:00:00.067)       0:07:17.384 ***** 
Wednesday 01 October 2025  12:36:45 +0000 (0:00:00.067)       0:07:17.384 ***** 
ok: [127.0.0.1]

TASK [kpt : Recursively restore ownership of a directory package] **************
Wednesday 01 October 2025  12:36:50 +0000 (0:00:05.485)       0:07:22.870 ***** 
Wednesday 01 October 2025  12:36:50 +0000 (0:00:05.485)       0:07:22.869 ***** 
ok: [127.0.0.1]

TASK [kpt : Get package differences between local and upstream: nephio/optional/webui] ***
Wednesday 01 October 2025  12:36:51 +0000 (0:00:00.331)       0:07:23.202 ***** 
Wednesday 01 October 2025  12:36:51 +0000 (0:00:00.331)       0:07:23.201 ***** 
ok: [127.0.0.1]

TASK [kpt : Print package differences: nephio/optional/webui] ******************
Wednesday 01 October 2025  12:36:52 +0000 (0:00:01.577)       0:07:24.779 ***** 
Wednesday 01 October 2025  12:36:52 +0000 (0:00:01.577)       0:07:24.778 ***** 
ok: [127.0.0.1] => {
    "kpt_pkg_diff.stdout_lines": [
        "diff /tmp/kpt-2901305154/local-main/cluster-role-binding.yaml /tmp/kpt-2901305154/target-main/cluster-role-binding.yaml",
        "6c6",
        "<     internal.kpt.dev/upstream-identifier: rbac.authorization.k8s.io|ClusterRoleBinding|default|nephio-webui",
        "---",
        ">     internal.kpt.dev/upstream-identifier: 'rbac.authorization.k8s.io|ClusterRoleBinding|default|nephio-webui'",
        "diff /tmp/kpt-2901305154/local-main/deployment.yaml /tmp/kpt-2901305154/target-main/deployment.yaml",
        "7c7",
        "<     internal.kpt.dev/upstream-identifier: apps|Deployment|nephio-webui|nephio-webui",
        "---",
        ">     internal.kpt.dev/upstream-identifier: 'apps|Deployment|nephio-webui|nephio-webui'",
        "diff /tmp/kpt-2901305154/local-main/gen-configmap.yaml /tmp/kpt-2901305154/target-main/gen-configmap.yaml",
        "7c7",
        "<     internal.kpt.dev/upstream-identifier: fn.kpt.dev|GenConfigMap|default|gen-app-config",
        "---",
        ">     internal.kpt.dev/upstream-identifier: 'fn.kpt.dev|GenConfigMap|default|gen-app-config'",
        "diff /tmp/kpt-2901305154/local-main/set-auth.yaml /tmp/kpt-2901305154/target-main/set-auth.yaml",
        "7c7",
        "<     internal.kpt.dev/upstream-identifier: fn.kpt.dev|StarlarkRun|default|set-auth",
        "---",
        ">     internal.kpt.dev/upstream-identifier: 'fn.kpt.dev|StarlarkRun|default|set-auth'"
    ]
}

TASK [kpt : Check package has been initialized] ********************************
Wednesday 01 October 2025  12:36:52 +0000 (0:00:00.067)       0:07:24.847 ***** 
Wednesday 01 October 2025  12:36:52 +0000 (0:00:00.067)       0:07:24.846 ***** 
ok: [127.0.0.1]

TASK [kpt : Init package: nephio/optional/webui] *******************************
Wednesday 01 October 2025  12:36:52 +0000 (0:00:00.265)       0:07:25.113 ***** 
Wednesday 01 October 2025  12:36:52 +0000 (0:00:00.265)       0:07:25.112 ***** 
changed: [127.0.0.1]

TASK [kpt : Print package initialization for nephio/optional/webui] ************
Wednesday 01 October 2025  12:36:53 +0000 (0:00:00.422)       0:07:25.535 ***** 
Wednesday 01 October 2025  12:36:53 +0000 (0:00:00.422)       0:07:25.534 ***** 
ok: [127.0.0.1] => {
    "kpt_live_init": {
        "changed": true,
        "cmd": "/usr/local/bin/kpt live init /tmp/kpt-pkg/nephio/optional/webui --context kubernetes-admin@kubernetes",
        "failed": false,
        "rc": 0,
        "stdout": "",
        "stdout_lines": []
    }
}

TASK [kpt : Apply package: nephio/optional/webui] ******************************
Wednesday 01 October 2025  12:36:53 +0000 (0:00:00.069)       0:07:25.604 ***** 
Wednesday 01 October 2025  12:36:53 +0000 (0:00:00.069)       0:07:25.603 ***** 
ASYNC POLL on 127.0.0.1: jid=j126430875459.133898 started=1 finished=0
ASYNC POLL on 127.0.0.1: jid=j126430875459.133898 started=1 finished=0
ASYNC POLL on 127.0.0.1: jid=j126430875459.133898 started=1 finished=0
ASYNC POLL on 127.0.0.1: jid=j126430875459.133898 started=1 finished=0
ASYNC POLL on 127.0.0.1: jid=j126430875459.133898 started=1 finished=0
ASYNC POLL on 127.0.0.1: jid=j126430875459.133898 started=1 finished=0
ASYNC POLL on 127.0.0.1: jid=j126430875459.133898 started=1 finished=0
ASYNC OK on 127.0.0.1: jid=j126430875459.133898
ok: [127.0.0.1]

TASK [kpt : Export job ids array] **********************************************
Wednesday 01 October 2025  12:37:35 +0000 (0:00:42.384)       0:08:07.989 ***** 
Wednesday 01 October 2025  12:37:35 +0000 (0:00:42.384)       0:08:07.988 ***** 
skipping: [127.0.0.1]

TASK [kpt : Print job ids] *****************************************************
Wednesday 01 October 2025  12:37:35 +0000 (0:00:00.045)       0:08:08.034 ***** 
Wednesday 01 October 2025  12:37:35 +0000 (0:00:00.045)       0:08:08.034 ***** 
ok: [127.0.0.1] => {
    "all_kpt_apply": []
}

TASK [install : Wait for Nephio webui deployment] ******************************
Wednesday 01 October 2025  12:37:35 +0000 (0:00:00.085)       0:08:08.120 ***** 
Wednesday 01 October 2025  12:37:35 +0000 (0:00:00.085)       0:08:08.119 ***** 
included: /home/rehanfazal/test-infra/e2e/provision/playbooks/roles/install/tasks/wait_deployments.yml for 127.0.0.1

TASK [install : Get deployment resources in namespace nephio-webui] ************
Wednesday 01 October 2025  12:37:36 +0000 (0:00:00.146)       0:08:08.267 ***** 
Wednesday 01 October 2025  12:37:36 +0000 (0:00:00.146)       0:08:08.266 ***** 
ok: [127.0.0.1]

TASK [install : Print deployment resources in namespace nephio-webui] **********
Wednesday 01 October 2025  12:37:37 +0000 (0:00:01.178)       0:08:09.446 ***** 
Wednesday 01 October 2025  12:37:37 +0000 (0:00:01.178)       0:08:09.445 ***** 
ok: [127.0.0.1] => {
    "deployment_list.resources": [
        {
            "apiVersion": "apps/v1",
            "kind": "Deployment",
            "metadata": {
                "annotations": {
                    "config.k8s.io/owning-inventory": "304660d3b399d090296df2989c95d578f2094309-1759322213331385519",
                    "deployment.kubernetes.io/revision": "1",
                    "internal.kpt.dev/upstream-identifier": "apps|Deployment|nephio-webui|nephio-webui",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{\"config.k8s.io/owning-inventory\":\"304660d3b399d090296df2989c95d578f2094309-1759322213331385519\",\"internal.kpt.dev/upstream-identifier\":\"apps|Deployment|nephio-webui|nephio-webui\"},\"name\":\"nephio-webui\",\"namespace\":\"nephio-webui\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"nephio-webui\"}},\"template\":{\"metadata\":{\"labels\":{\"app\":\"nephio-webui\"}},\"spec\":{\"containers\":[{\"args\":[\"--config\",\"/etc/config/app-config.nephio.yaml\"],\"env\":[{\"name\":\"AUTH_PROVIDER\",\"value\":\"current-context\"},{\"name\":\"AUTH_OIDC_TOKEN_PROVIDER\",\"value\":\"okta\"}],\"image\":\"nephio/kpt-backstage-plugins:latest\",\"imagePullPolicy\":\"IfNotPresent\",\"name\":\"main\",\"ports\":[{\"containerPort\":7007,\"name\":\"http\"}],\"readinessProbe\":{\"httpGet\":{\"path\":\"/\",\"port\":7007}},\"volumeMounts\":[{\"mountPath\":\"/etc/config\",\"name\":\"config-volume\"}]}],\"serviceAccountName\":\"nephio-webui-sa\",\"terminationGracePeriodSeconds\":10,\"volumes\":[{\"configMap\":{\"name\":\"nephio-webui-config\"},\"name\":\"config-volume\"}]}}}}\n"
                },
                "creationTimestamp": "2025-10-01T12:36:54Z",
                "generation": 1,
                "managedFields": [
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:config.k8s.io/owning-inventory": {},
                                    "f:internal.kpt.dev/upstream-identifier": {},
                                    "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                }
                            },
                            "f:spec": {
                                "f:progressDeadlineSeconds": {},
                                "f:replicas": {},
                                "f:revisionHistoryLimit": {},
                                "f:selector": {},
                                "f:strategy": {
                                    "f:rollingUpdate": {
                                        ".": {},
                                        "f:maxSurge": {},
                                        "f:maxUnavailable": {}
                                    },
                                    "f:type": {}
                                },
                                "f:template": {
                                    "f:metadata": {
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:containers": {
                                            "k:{\"name\":\"main\"}": {
                                                ".": {},
                                                "f:args": {},
                                                "f:env": {
                                                    ".": {},
                                                    "k:{\"name\":\"AUTH_OIDC_TOKEN_PROVIDER\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:value": {}
                                                    },
                                                    "k:{\"name\":\"AUTH_PROVIDER\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:value": {}
                                                    }
                                                },
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:name": {},
                                                "f:ports": {
                                                    ".": {},
                                                    "k:{\"containerPort\":7007,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    }
                                                },
                                                "f:readinessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:resources": {},
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {},
                                                "f:volumeMounts": {
                                                    ".": {},
                                                    "k:{\"mountPath\":\"/etc/config\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    }
                                                }
                                            }
                                        },
                                        "f:dnsPolicy": {},
                                        "f:restartPolicy": {},
                                        "f:schedulerName": {},
                                        "f:securityContext": {},
                                        "f:serviceAccount": {},
                                        "f:serviceAccountName": {},
                                        "f:terminationGracePeriodSeconds": {},
                                        "f:volumes": {
                                            ".": {},
                                            "k:{\"name\":\"config-volume\"}": {
                                                ".": {},
                                                "f:configMap": {
                                                    ".": {},
                                                    "f:defaultMode": {},
                                                    "f:name": {}
                                                },
                                                "f:name": {}
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "manager": "kubectl",
                        "operation": "Update",
                        "time": "2025-10-01T12:36:54Z"
                    },
                    {
                        "apiVersion": "apps/v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    "f:deployment.kubernetes.io/revision": {}
                                }
                            },
                            "f:status": {
                                "f:availableReplicas": {},
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"Available\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Progressing\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:observedGeneration": {},
                                "f:readyReplicas": {},
                                "f:replicas": {},
                                "f:updatedReplicas": {}
                            }
                        },
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "subresource": "status",
                        "time": "2025-10-01T12:37:31Z"
                    }
                ],
                "name": "nephio-webui",
                "namespace": "nephio-webui",
                "resourceVersion": "6326",
                "uid": "092b0115-6066-45b8-8428-60efae0e7277"
            },
            "spec": {
                "progressDeadlineSeconds": 600,
                "replicas": 1,
                "revisionHistoryLimit": 10,
                "selector": {
                    "matchLabels": {
                        "app": "nephio-webui"
                    }
                },
                "strategy": {
                    "rollingUpdate": {
                        "maxSurge": "25%",
                        "maxUnavailable": "25%"
                    },
                    "type": "RollingUpdate"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "app": "nephio-webui"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "args": [
                                    "--config",
                                    "/etc/config/app-config.nephio.yaml"
                                ],
                                "env": [
                                    {
                                        "name": "AUTH_PROVIDER",
                                        "value": "current-context"
                                    },
                                    {
                                        "name": "AUTH_OIDC_TOKEN_PROVIDER",
                                        "value": "okta"
                                    }
                                ],
                                "image": "nephio/kpt-backstage-plugins:latest",
                                "imagePullPolicy": "IfNotPresent",
                                "name": "main",
                                "ports": [
                                    {
                                        "containerPort": 7007,
                                        "name": "http",
                                        "protocol": "TCP"
                                    }
                                ],
                                "readinessProbe": {
                                    "failureThreshold": 3,
                                    "httpGet": {
                                        "path": "/",
                                        "port": 7007,
                                        "scheme": "HTTP"
                                    },
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 1
                                },
                                "resources": {},
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/etc/config",
                                        "name": "config-volume"
                                    }
                                ]
                            }
                        ],
                        "dnsPolicy": "ClusterFirst",
                        "restartPolicy": "Always",
                        "schedulerName": "default-scheduler",
                        "securityContext": {},
                        "serviceAccount": "nephio-webui-sa",
                        "serviceAccountName": "nephio-webui-sa",
                        "terminationGracePeriodSeconds": 10,
                        "volumes": [
                            {
                                "configMap": {
                                    "defaultMode": 420,
                                    "name": "nephio-webui-config"
                                },
                                "name": "config-volume"
                            }
                        ]
                    }
                }
            },
            "status": {
                "availableReplicas": 1,
                "conditions": [
                    {
                        "lastTransitionTime": "2025-10-01T12:37:31Z",
                        "lastUpdateTime": "2025-10-01T12:37:31Z",
                        "message": "Deployment has minimum availability.",
                        "reason": "MinimumReplicasAvailable",
                        "status": "True",
                        "type": "Available"
                    },
                    {
                        "lastTransitionTime": "2025-10-01T12:36:54Z",
                        "lastUpdateTime": "2025-10-01T12:37:31Z",
                        "message": "ReplicaSet \"nephio-webui-6fd7c5445c\" has successfully progressed.",
                        "reason": "NewReplicaSetAvailable",
                        "status": "True",
                        "type": "Progressing"
                    }
                ],
                "observedGeneration": 1,
                "readyReplicas": 1,
                "replicas": 1,
                "updatedReplicas": 1
            }
        }
    ]
}

TASK [install : Wait for deployments in namespace nephio-webui] ****************
Wednesday 01 October 2025  12:37:37 +0000 (0:00:00.092)       0:08:09.538 ***** 
Wednesday 01 October 2025  12:37:37 +0000 (0:00:00.092)       0:08:09.537 ***** 
ok: [127.0.0.1] => (item={'metadata': {'name': 'nephio-webui', 'namespace': 'nephio-webui', 'uid': '092b0115-6066-45b8-8428-60efae0e7277', 'resourceVersion': '6326', 'generation': 1, 'creationTimestamp': '2025-10-01T12:36:54Z', 'annotations': {'config.k8s.io/owning-inventory': '304660d3b399d090296df2989c95d578f2094309-1759322213331385519', 'deployment.kubernetes.io/revision': '1', 'internal.kpt.dev/upstream-identifier': 'apps|Deployment|nephio-webui|nephio-webui', 'kubectl.kubernetes.io/last-applied-configuration': '{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"config.k8s.io/owning-inventory":"304660d3b399d090296df2989c95d578f2094309-1759322213331385519","internal.kpt.dev/upstream-identifier":"apps|Deployment|nephio-webui|nephio-webui"},"name":"nephio-webui","namespace":"nephio-webui"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"nephio-webui"}},"template":{"metadata":{"labels":{"app":"nephio-webui"}},"spec":{"containers":[{"args":["--config","/etc/config/app-config.nephio.yaml"],"env":[{"name":"AUTH_PROVIDER","value":"current-context"},{"name":"AUTH_OIDC_TOKEN_PROVIDER","value":"okta"}],"image":"nephio/kpt-backstage-plugins:latest","imagePullPolicy":"IfNotPresent","name":"main","ports":[{"containerPort":7007,"name":"http"}],"readinessProbe":{"httpGet":{"path":"/","port":7007}},"volumeMounts":[{"mountPath":"/etc/config","name":"config-volume"}]}],"serviceAccountName":"nephio-webui-sa","terminationGracePeriodSeconds":10,"volumes":[{"configMap":{"name":"nephio-webui-config"},"name":"config-volume"}]}}}}\n'}, 'managedFields': [{'manager': 'kubectl', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:36:54Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'.': {}, 'f:config.k8s.io/owning-inventory': {}, 'f:internal.kpt.dev/upstream-identifier': {}, 'f:kubectl.kubernetes.io/last-applied-configuration': {}}}, 'f:spec': {'f:progressDeadlineSeconds': {}, 'f:replicas': {}, 'f:revisionHistoryLimit': {}, 'f:selector': {}, 'f:strategy': {'f:rollingUpdate': {'.': {}, 'f:maxSurge': {}, 'f:maxUnavailable': {}}, 'f:type': {}}, 'f:template': {'f:metadata': {'f:labels': {'.': {}, 'f:app': {}}}, 'f:spec': {'f:containers': {'k:{"name":"main"}': {'.': {}, 'f:args': {}, 'f:env': {'.': {}, 'k:{"name":"AUTH_OIDC_TOKEN_PROVIDER"}': {'.': {}, 'f:name': {}, 'f:value': {}}, 'k:{"name":"AUTH_PROVIDER"}': {'.': {}, 'f:name': {}, 'f:value': {}}}, 'f:image': {}, 'f:imagePullPolicy': {}, 'f:name': {}, 'f:ports': {'.': {}, 'k:{"containerPort":7007,"protocol":"TCP"}': {'.': {}, 'f:containerPort': {}, 'f:name': {}, 'f:protocol': {}}}, 'f:readinessProbe': {'.': {}, 'f:failureThreshold': {}, 'f:httpGet': {'.': {}, 'f:path': {}, 'f:port': {}, 'f:scheme': {}}, 'f:periodSeconds': {}, 'f:successThreshold': {}, 'f:timeoutSeconds': {}}, 'f:resources': {}, 'f:terminationMessagePath': {}, 'f:terminationMessagePolicy': {}, 'f:volumeMounts': {'.': {}, 'k:{"mountPath":"/etc/config"}': {'.': {}, 'f:mountPath': {}, 'f:name': {}}}}}, 'f:dnsPolicy': {}, 'f:restartPolicy': {}, 'f:schedulerName': {}, 'f:securityContext': {}, 'f:serviceAccount': {}, 'f:serviceAccountName': {}, 'f:terminationGracePeriodSeconds': {}, 'f:volumes': {'.': {}, 'k:{"name":"config-volume"}': {'.': {}, 'f:configMap': {'.': {}, 'f:defaultMode': {}, 'f:name': {}}, 'f:name': {}}}}}}}}, {'manager': 'kube-controller-manager', 'operation': 'Update', 'apiVersion': 'apps/v1', 'time': '2025-10-01T12:37:31Z', 'fieldsType': 'FieldsV1', 'fieldsV1': {'f:metadata': {'f:annotations': {'f:deployment.kubernetes.io/revision': {}}}, 'f:status': {'f:availableReplicas': {}, 'f:conditions': {'.': {}, 'k:{"type":"Available"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}, 'k:{"type":"Progressing"}': {'.': {}, 'f:lastTransitionTime': {}, 'f:lastUpdateTime': {}, 'f:message': {}, 'f:reason': {}, 'f:status': {}, 'f:type': {}}}, 'f:observedGeneration': {}, 'f:readyReplicas': {}, 'f:replicas': {}, 'f:updatedReplicas': {}}}, 'subresource': 'status'}]}, 'spec': {'replicas': 1, 'selector': {'matchLabels': {'app': 'nephio-webui'}}, 'template': {'metadata': {'labels': {'app': 'nephio-webui'}}, 'spec': {'volumes': [{'name': 'config-volume', 'configMap': {'name': 'nephio-webui-config', 'defaultMode': 420}}], 'containers': [{'name': 'main', 'image': 'nephio/kpt-backstage-plugins:latest', 'args': ['--config', '/etc/config/app-config.nephio.yaml'], 'ports': [{'name': 'http', 'containerPort': 7007, 'protocol': 'TCP'}], 'env': [{'name': 'AUTH_PROVIDER', 'value': 'current-context'}, {'name': 'AUTH_OIDC_TOKEN_PROVIDER', 'value': 'okta'}], 'resources': {}, 'volumeMounts': [{'name': 'config-volume', 'mountPath': '/etc/config'}], 'readinessProbe': {'httpGet': {'path': '/', 'port': 7007, 'scheme': 'HTTP'}, 'timeoutSeconds': 1, 'periodSeconds': 10, 'successThreshold': 1, 'failureThreshold': 3}, 'terminationMessagePath': '/dev/termination-log', 'terminationMessagePolicy': 'File', 'imagePullPolicy': 'IfNotPresent'}], 'restartPolicy': 'Always', 'terminationGracePeriodSeconds': 10, 'dnsPolicy': 'ClusterFirst', 'serviceAccountName': 'nephio-webui-sa', 'serviceAccount': 'nephio-webui-sa', 'securityContext': {}, 'schedulerName': 'default-scheduler'}}, 'strategy': {'type': 'RollingUpdate', 'rollingUpdate': {'maxUnavailable': '25%', 'maxSurge': '25%'}}, 'revisionHistoryLimit': 10, 'progressDeadlineSeconds': 600}, 'status': {'observedGeneration': 1, 'replicas': 1, 'updatedReplicas': 1, 'readyReplicas': 1, 'availableReplicas': 1, 'conditions': [{'type': 'Available', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:37:31Z', 'lastTransitionTime': '2025-10-01T12:37:31Z', 'reason': 'MinimumReplicasAvailable', 'message': 'Deployment has minimum availability.'}, {'type': 'Progressing', 'status': 'True', 'lastUpdateTime': '2025-10-01T12:37:31Z', 'lastTransitionTime': '2025-10-01T12:36:54Z', 'reason': 'NewReplicaSetAvailable', 'message': 'ReplicaSet "nephio-webui-6fd7c5445c" has successfully progressed.'}]}, 'apiVersion': 'apps/v1', 'kind': 'Deployment'})

TASK [install : Create stock repositories] *************************************
Wednesday 01 October 2025  12:37:38 +0000 (0:00:01.130)       0:08:10.669 ***** 
Wednesday 01 October 2025  12:37:38 +0000 (0:00:01.130)       0:08:10.668 ***** 
changed: [127.0.0.1] => (item={'name': 'catalog-distros-sandbox', 'repo': 'https://github.com/nephio-project/catalog.git', 'directory': '/distros/sandbox', 'branch': 'main'})
changed: [127.0.0.1] => (item={'name': 'catalog-workloads-free5gc', 'repo': 'https://github.com/nephio-project/catalog.git', 'directory': '/workloads/free5gc', 'branch': 'main'})
changed: [127.0.0.1] => (item={'name': 'catalog-infra-capi', 'repo': 'https://github.com/nephio-project/catalog.git', 'directory': '/infra/capi', 'branch': 'main'})
changed: [127.0.0.1] => (item={'name': 'catalog-nephio-core', 'repo': 'https://github.com/nephio-project/catalog.git', 'directory': '/nephio/core', 'branch': 'main'})
changed: [127.0.0.1] => (item={'name': 'catalog-nephio-optional', 'repo': 'https://github.com/nephio-project/catalog.git', 'directory': '/nephio/optional', 'branch': 'main'})
changed: [127.0.0.1] => (item={'name': 'oai-core-packages', 'repo': 'https://github.com/OPENAIRINTERFACE/oai-packages.git', 'directory': '/', 'branch': 'main'})
changed: [127.0.0.1] => (item={'name': 'catalog-workloads-oai-ran', 'repo': 'https://github.com/nephio-project/catalog.git', 'directory': '/workloads/oai', 'branch': 'main'})
changed: [127.0.0.1] => (item={'name': 'catalog-workloads-tools', 'repo': 'https://github.com/nephio-project/catalog.git', 'directory': '/workloads/tools', 'branch': 'main'})

TASK [install : Wait for stock repositories] ***********************************
Wednesday 01 October 2025  12:37:45 +0000 (0:00:07.301)       0:08:17.970 ***** 
Wednesday 01 October 2025  12:37:45 +0000 (0:00:07.301)       0:08:17.969 ***** 
ok: [127.0.0.1] => (item=catalog-infra-capi)
ok: [127.0.0.1] => (item=catalog-nephio-core)
ok: [127.0.0.1] => (item=catalog-nephio-optional)
ok: [127.0.0.1] => (item=catalog-workloads-free5gc)
ok: [127.0.0.1] => (item=catalog-workloads-oai-ran)
ok: [127.0.0.1] => (item=oai-core-packages)

TASK [Deploy repositories] *****************************************************
Wednesday 01 October 2025  12:37:51 +0000 (0:00:05.811)       0:08:23.782 ***** 
Wednesday 01 October 2025  12:37:51 +0000 (0:00:05.811)       0:08:23.781 ***** 
included: kpt for 127.0.0.1 => (item={'pkg': 'distros/sandbox/repository', 'dest': '/tmp/repository/mgmt'})
included: kpt for 127.0.0.1 => (item={'pkg': 'nephio/optional/rootsync', 'dest': '/tmp/rootsync/mgmt'})
included: kpt for 127.0.0.1 => (item={'pkg': 'distros/sandbox/repository', 'dest': '/tmp/repository/mgmt-staging'})

TASK [kpt : Define working directory] ******************************************
Wednesday 01 October 2025  12:37:51 +0000 (0:00:00.136)       0:08:23.918 ***** 
Wednesday 01 October 2025  12:37:51 +0000 (0:00:00.135)       0:08:23.917 ***** 
ok: [127.0.0.1]

TASK [kpt : Create base directory if it does not exist: /tmp/repository/mgmt] ***
Wednesday 01 October 2025  12:37:51 +0000 (0:00:00.062)       0:08:23.980 ***** 
Wednesday 01 October 2025  12:37:51 +0000 (0:00:00.062)       0:08:23.979 ***** 
changed: [127.0.0.1]

TASK [kpt : Fetch package: distros/sandbox/repository] *************************
Wednesday 01 October 2025  12:37:52 +0000 (0:00:00.278)       0:08:24.259 ***** 
Wednesday 01 October 2025  12:37:52 +0000 (0:00:00.278)       0:08:24.258 ***** 
changed: [127.0.0.1]

TASK [kpt : Get package content information for distros/sandbox/repository] ****
Wednesday 01 October 2025  12:37:53 +0000 (0:00:01.108)       0:08:25.367 ***** 
Wednesday 01 October 2025  12:37:53 +0000 (0:00:01.108)       0:08:25.366 ***** 
ok: [127.0.0.1]

TASK [kpt : Print package content information for distros/sandbox/repository] ***
Wednesday 01 October 2025  12:37:53 +0000 (0:00:00.350)       0:08:25.717 ***** 
Wednesday 01 October 2025  12:37:53 +0000 (0:00:00.350)       0:08:25.716 ***** 
ok: [127.0.0.1] => {
    "kpt_pkg_tree.stdout_lines": [
        "Package \"mgmt\"",
        "├── [Kptfile]  Kptfile mgmt",
        "├── [package-context.yaml]  ConfigMap kptfile.kpt.dev",
        "├── [repo-gitea.yaml]  Repository default/example-cluster-name",
        "├── [repo-porch.yaml]  Repository default/example-cluster-name",
        "├── [set-values.yaml]  StarlarkRun generate-values",
        "├── [token-configsync.yaml]  Token default/example-site-name-access-token-configsync",
        "├── [token-porch.yaml]  Token default/example-site-name-access-token-porch",
        "└── [workload-cluster.yaml]  WorkloadCluster workload-cluster"
    ]
}

TASK [kpt : Render package: distros/sandbox/repository] ************************
Wednesday 01 October 2025  12:37:53 +0000 (0:00:00.062)       0:08:25.780 ***** 
Wednesday 01 October 2025  12:37:53 +0000 (0:00:00.062)       0:08:25.779 ***** 
ok: [127.0.0.1]

TASK [kpt : Recursively restore ownership of a directory package] **************
Wednesday 01 October 2025  12:37:56 +0000 (0:00:02.742)       0:08:28.522 ***** 
Wednesday 01 October 2025  12:37:56 +0000 (0:00:02.742)       0:08:28.521 ***** 
ok: [127.0.0.1]

TASK [kpt : Get package differences between local and upstream: distros/sandbox/repository] ***
Wednesday 01 October 2025  12:37:56 +0000 (0:00:00.373)       0:08:28.896 ***** 
Wednesday 01 October 2025  12:37:56 +0000 (0:00:00.373)       0:08:28.895 ***** 
ok: [127.0.0.1]

TASK [kpt : Print package differences: distros/sandbox/repository] *************
Wednesday 01 October 2025  12:38:00 +0000 (0:00:03.880)       0:08:32.776 ***** 
Wednesday 01 October 2025  12:38:00 +0000 (0:00:03.880)       0:08:32.776 ***** 
ok: [127.0.0.1] => {
    "kpt_pkg_diff.stdout_lines": [
        "diff /tmp/kpt-3269556400/local-main/package-context.yaml /tmp/kpt-3269556400/target-main/package-context.yaml",
        "9c9,10",
        "<   name: mgmt",
        "---",
        ">   name: example-repo",
        ">   clusterName: example-cluster-name",
        "diff /tmp/kpt-3269556400/local-main/repo-gitea.yaml /tmp/kpt-3269556400/target-main/repo-gitea.yaml",
        "4c4",
        "<   name: mgmt",
        "---",
        ">   name: example-cluster-name",
        "7c7",
        "<     internal.kpt.dev/upstream-identifier: infra.nephio.org|Repository|default|example-cluster-name",
        "---",
        ">     internal.kpt.dev/upstream-identifier: 'infra.nephio.org|Repository|default|example-cluster-name'",
        "9c9",
        "<   description: mgmt repository",
        "---",
        ">   description: example-cluster-name repository",
        "diff /tmp/kpt-3269556400/local-main/repo-porch.yaml /tmp/kpt-3269556400/target-main/repo-porch.yaml",
        "4c4",
        "<   name: mgmt",
        "---",
        ">   name: example-cluster-name",
        "7c7",
        "<     internal.kpt.dev/upstream-identifier: config.porch.kpt.dev|Repository|default|example-cluster-name",
        "---",
        ">     internal.kpt.dev/upstream-identifier: 'config.porch.kpt.dev|Repository|default|example-cluster-name'",
        "14c14",
        "<     repo: http://172.18.0.200:3000/nephio/mgmt.git",
        "---",
        ">     repo: http://172.18.0.200:3000/nephio/example-cluster-name.git",
        "16c16",
        "<       name: mgmt-access-token-porch",
        "---",
        ">       name: example-cluster-name-access-token-porch",
        "diff /tmp/kpt-3269556400/local-main/token-configsync.yaml /tmp/kpt-3269556400/target-main/token-configsync.yaml",
        "4,5c4,5",
        "<   name: mgmt-access-token-configsync",
        "<   namespace: config-management-system",
        "---",
        ">   name: example-site-name-access-token-configsync",
        ">   namespace: default",
        "10c10",
        "<     internal.kpt.dev/upstream-identifier: infra.nephio.org|Token|default|example-site-name-access-token-configsync",
        "---",
        ">     internal.kpt.dev/upstream-identifier: 'infra.nephio.org|Token|default|example-site-name-access-token-configsync'",
        "diff /tmp/kpt-3269556400/local-main/token-porch.yaml /tmp/kpt-3269556400/target-main/token-porch.yaml",
        "4c4",
        "<   name: mgmt-access-token-porch",
        "---",
        ">   name: example-site-name-access-token-porch",
        "7c7",
        "<     internal.kpt.dev/upstream-identifier: infra.nephio.org|Token|default|example-site-name-access-token-porch",
        "---",
        ">     internal.kpt.dev/upstream-identifier: 'infra.nephio.org|Token|default|example-site-name-access-token-porch'",
        "diff /tmp/kpt-3269556400/local-main/workload-cluster.yaml /tmp/kpt-3269556400/target-main/workload-cluster.yaml",
        "8c8",
        "<     internal.kpt.dev/upstream-identifier: infra.nephio.org|WorkloadCluster|default|workload-cluster",
        "---",
        ">     internal.kpt.dev/upstream-identifier: 'infra.nephio.org|WorkloadCluster|default|workload-cluster'"
    ]
}

TASK [kpt : Check package has been initialized] ********************************
Wednesday 01 October 2025  12:38:00 +0000 (0:00:00.070)       0:08:32.847 ***** 
Wednesday 01 October 2025  12:38:00 +0000 (0:00:00.070)       0:08:32.846 ***** 
ok: [127.0.0.1]

TASK [kpt : Init package: distros/sandbox/repository] **************************
Wednesday 01 October 2025  12:38:00 +0000 (0:00:00.259)       0:08:33.106 ***** 
Wednesday 01 October 2025  12:38:00 +0000 (0:00:00.259)       0:08:33.105 ***** 
changed: [127.0.0.1]

TASK [kpt : Print package initialization for distros/sandbox/repository] *******
Wednesday 01 October 2025  12:38:01 +0000 (0:00:00.348)       0:08:33.455 ***** 
Wednesday 01 October 2025  12:38:01 +0000 (0:00:00.348)       0:08:33.454 ***** 
ok: [127.0.0.1] => {
    "kpt_live_init": {
        "changed": true,
        "cmd": "/usr/local/bin/kpt live init /tmp/repository/mgmt --context kubernetes-admin@kubernetes",
        "failed": false,
        "rc": 0,
        "stdout": "",
        "stdout_lines": []
    }
}

TASK [kpt : Apply package: distros/sandbox/repository] *************************
Wednesday 01 October 2025  12:38:01 +0000 (0:00:00.068)       0:08:33.524 ***** 
Wednesday 01 October 2025  12:38:01 +0000 (0:00:00.068)       0:08:33.523 ***** 
ok: [127.0.0.1]

TASK [kpt : Export job ids array] **********************************************
Wednesday 01 October 2025  12:38:01 +0000 (0:00:00.433)       0:08:33.957 ***** 
Wednesday 01 October 2025  12:38:01 +0000 (0:00:00.433)       0:08:33.957 ***** 
ok: [127.0.0.1]

TASK [kpt : Print job ids] *****************************************************
Wednesday 01 October 2025  12:38:01 +0000 (0:00:00.075)       0:08:34.033 ***** 
Wednesday 01 October 2025  12:38:01 +0000 (0:00:00.075)       0:08:34.032 ***** 
ok: [127.0.0.1] => {
    "all_kpt_apply": [
        {
            "ansible_job_id": "j471778989149.139662",
            "attempts": 1,
            "changed": false,
            "failed": 0,
            "finished": 0,
            "results_file": "/home/rehanfazal/.ansible_async/j471778989149.139662",
            "started": 1
        }
    ]
}

TASK [kpt : Define working directory] ******************************************
Wednesday 01 October 2025  12:38:01 +0000 (0:00:00.090)       0:08:34.123 ***** 
Wednesday 01 October 2025  12:38:01 +0000 (0:00:00.090)       0:08:34.122 ***** 
ok: [127.0.0.1]

TASK [kpt : Create base directory if it does not exist: /tmp/rootsync/mgmt] ****
Wednesday 01 October 2025  12:38:02 +0000 (0:00:00.059)       0:08:34.182 ***** 
Wednesday 01 October 2025  12:38:02 +0000 (0:00:00.059)       0:08:34.181 ***** 
changed: [127.0.0.1]

TASK [kpt : Fetch package: nephio/optional/rootsync] ***************************
Wednesday 01 October 2025  12:38:02 +0000 (0:00:00.344)       0:08:34.527 ***** 
Wednesday 01 October 2025  12:38:02 +0000 (0:00:00.344)       0:08:34.526 ***** 
changed: [127.0.0.1]

TASK [kpt : Get package content information for nephio/optional/rootsync] ******
Wednesday 01 October 2025  12:38:03 +0000 (0:00:01.134)       0:08:35.661 ***** 
Wednesday 01 October 2025  12:38:03 +0000 (0:00:01.134)       0:08:35.660 ***** 
ok: [127.0.0.1]

TASK [kpt : Print package content information for nephio/optional/rootsync] ****
Wednesday 01 October 2025  12:38:03 +0000 (0:00:00.357)       0:08:36.018 ***** 
Wednesday 01 October 2025  12:38:03 +0000 (0:00:00.357)       0:08:36.018 ***** 
ok: [127.0.0.1] => {
    "kpt_pkg_tree.stdout_lines": [
        "Package \"mgmt\"",
        "├── [Kptfile]  Kptfile mgmt",
        "├── [package-context.yaml]  ConfigMap kptfile.kpt.dev",
        "├── [rootsync.yaml]  RootSync config-management-system/example-cluster-name",
        "├── [set-values.yaml]  StarlarkRun generate-values",
        "└── [workload-cluster.yaml]  WorkloadCluster workload-cluster"
    ]
}

TASK [kpt : Render package: nephio/optional/rootsync] **************************
Wednesday 01 October 2025  12:38:03 +0000 (0:00:00.056)       0:08:36.075 ***** 
Wednesday 01 October 2025  12:38:03 +0000 (0:00:00.056)       0:08:36.074 ***** 
ok: [127.0.0.1]

TASK [kpt : Recursively restore ownership of a directory package] **************
Wednesday 01 October 2025  12:38:04 +0000 (0:00:00.943)       0:08:37.019 ***** 
Wednesday 01 October 2025  12:38:04 +0000 (0:00:00.943)       0:08:37.018 ***** 
ok: [127.0.0.1]

TASK [kpt : Get package differences between local and upstream: nephio/optional/rootsync] ***
Wednesday 01 October 2025  12:38:05 +0000 (0:00:00.341)       0:08:37.360 ***** 
Wednesday 01 October 2025  12:38:05 +0000 (0:00:00.341)       0:08:37.359 ***** 
ok: [127.0.0.1]

TASK [kpt : Print package differences: nephio/optional/rootsync] ***************
Wednesday 01 October 2025  12:38:06 +0000 (0:00:01.562)       0:08:38.923 ***** 
Wednesday 01 October 2025  12:38:06 +0000 (0:00:01.562)       0:08:38.922 ***** 
ok: [127.0.0.1] => {
    "kpt_pkg_diff.stdout_lines": [
        "diff /tmp/kpt-5458083/local-main/package-context.yaml /tmp/kpt-5458083/target-main/package-context.yaml",
        "9c9,10",
        "<   name: mgmt",
        "---",
        ">   name: example-rootsync",
        ">   clusterName: example-cluster-name",
        "diff /tmp/kpt-5458083/local-main/rootsync.yaml /tmp/kpt-5458083/target-main/rootsync.yaml",
        "4c4",
        "<   name: mgmt",
        "---",
        ">   name: example-cluster-name",
        "7c7",
        "<     internal.kpt.dev/upstream-identifier: configsync.gke.io|RootSync|config-management-system|example-cluster-name",
        "---",
        ">     internal.kpt.dev/upstream-identifier: 'configsync.gke.io|RootSync|config-management-system|example-cluster-name'",
        "11c11",
        "<     repo: http://172.18.0.200:3000/nephio/mgmt.git",
        "---",
        ">     repo: http://172.18.0.200:3000/nephio/example-cluster-name.git",
        "15c15",
        "<       name: mgmt-access-token-configsync",
        "---",
        ">       name: example-cluster-name-access-token-configsync",
        "diff /tmp/kpt-5458083/local-main/workload-cluster.yaml /tmp/kpt-5458083/target-main/workload-cluster.yaml",
        "8c8",
        "<     internal.kpt.dev/upstream-identifier: infra.nephio.org|WorkloadCluster|default|workload-cluster",
        "---",
        ">     internal.kpt.dev/upstream-identifier: 'infra.nephio.org|WorkloadCluster|default|workload-cluster'"
    ]
}

TASK [kpt : Check package has been initialized] ********************************
Wednesday 01 October 2025  12:38:06 +0000 (0:00:00.071)       0:08:38.994 ***** 
Wednesday 01 October 2025  12:38:06 +0000 (0:00:00.071)       0:08:38.993 ***** 
ok: [127.0.0.1]

TASK [kpt : Init package: nephio/optional/rootsync] ****************************
Wednesday 01 October 2025  12:38:07 +0000 (0:00:00.278)       0:08:39.272 ***** 
Wednesday 01 October 2025  12:38:07 +0000 (0:00:00.278)       0:08:39.271 ***** 
changed: [127.0.0.1]

TASK [kpt : Print package initialization for nephio/optional/rootsync] *********
Wednesday 01 October 2025  12:38:07 +0000 (0:00:00.404)       0:08:39.677 ***** 
Wednesday 01 October 2025  12:38:07 +0000 (0:00:00.405)       0:08:39.676 ***** 
ok: [127.0.0.1] => {
    "kpt_live_init": {
        "changed": true,
        "cmd": "/usr/local/bin/kpt live init /tmp/rootsync/mgmt --context kubernetes-admin@kubernetes",
        "failed": false,
        "rc": 0,
        "stdout": "",
        "stdout_lines": []
    }
}

TASK [kpt : Apply package: nephio/optional/rootsync] ***************************
Wednesday 01 October 2025  12:38:07 +0000 (0:00:00.086)       0:08:39.763 ***** 
Wednesday 01 October 2025  12:38:07 +0000 (0:00:00.086)       0:08:39.763 ***** 
ok: [127.0.0.1]

TASK [kpt : Export job ids array] **********************************************
Wednesday 01 October 2025  12:38:08 +0000 (0:00:00.398)       0:08:40.161 ***** 
Wednesday 01 October 2025  12:38:08 +0000 (0:00:00.398)       0:08:40.161 ***** 
ok: [127.0.0.1]

TASK [kpt : Print job ids] *****************************************************
Wednesday 01 October 2025  12:38:08 +0000 (0:00:00.074)       0:08:40.236 ***** 
Wednesday 01 October 2025  12:38:08 +0000 (0:00:00.074)       0:08:40.235 ***** 
ok: [127.0.0.1] => {
    "all_kpt_apply": [
        {
            "ansible_job_id": "j471778989149.139662",
            "attempts": 1,
            "changed": false,
            "failed": 0,
            "finished": 0,
            "results_file": "/home/rehanfazal/.ansible_async/j471778989149.139662",
            "started": 1
        },
        {
            "ansible_job_id": "j803293993184.140715",
            "attempts": 1,
            "changed": false,
            "failed": 0,
            "finished": 0,
            "results_file": "/home/rehanfazal/.ansible_async/j803293993184.140715",
            "started": 1
        }
    ]
}

TASK [kpt : Define working directory] ******************************************
Wednesday 01 October 2025  12:38:08 +0000 (0:00:00.080)       0:08:40.317 ***** 
Wednesday 01 October 2025  12:38:08 +0000 (0:00:00.080)       0:08:40.316 ***** 
ok: [127.0.0.1]

TASK [kpt : Create base directory if it does not exist: /tmp/repository/mgmt-staging] ***
Wednesday 01 October 2025  12:38:08 +0000 (0:00:00.069)       0:08:40.386 ***** 
Wednesday 01 October 2025  12:38:08 +0000 (0:00:00.069)       0:08:40.385 ***** 
ok: [127.0.0.1]

TASK [kpt : Fetch package: distros/sandbox/repository] *************************
Wednesday 01 October 2025  12:38:08 +0000 (0:00:00.291)       0:08:40.677 ***** 
Wednesday 01 October 2025  12:38:08 +0000 (0:00:00.291)       0:08:40.676 ***** 
changed: [127.0.0.1]

TASK [kpt : Get package content information for distros/sandbox/repository] ****
Wednesday 01 October 2025  12:38:10 +0000 (0:00:02.333)       0:08:43.011 ***** 
Wednesday 01 October 2025  12:38:10 +0000 (0:00:02.333)       0:08:43.010 ***** 
ok: [127.0.0.1]

TASK [kpt : Print package content information for distros/sandbox/repository] ***
Wednesday 01 October 2025  12:38:11 +0000 (0:00:00.408)       0:08:43.419 ***** 
Wednesday 01 October 2025  12:38:11 +0000 (0:00:00.408)       0:08:43.418 ***** 
ok: [127.0.0.1] => {
    "kpt_pkg_tree.stdout_lines": [
        "Package \"mgmt-staging\"",
        "├── [Kptfile]  Kptfile mgmt-staging",
        "├── [package-context.yaml]  ConfigMap kptfile.kpt.dev",
        "├── [repo-gitea.yaml]  Repository default/example-cluster-name",
        "├── [repo-porch.yaml]  Repository default/example-cluster-name",
        "├── [set-values.yaml]  StarlarkRun generate-values",
        "├── [token-configsync.yaml]  Token default/example-site-name-access-token-configsync",
        "├── [token-porch.yaml]  Token default/example-site-name-access-token-porch",
        "└── [workload-cluster.yaml]  WorkloadCluster workload-cluster"
    ]
}

TASK [kpt : Render package: distros/sandbox/repository] ************************
Wednesday 01 October 2025  12:38:11 +0000 (0:00:00.070)       0:08:43.490 ***** 
Wednesday 01 October 2025  12:38:11 +0000 (0:00:00.070)       0:08:43.489 ***** 
ok: [127.0.0.1]

TASK [kpt : Recursively restore ownership of a directory package] **************
Wednesday 01 October 2025  12:38:12 +0000 (0:00:01.212)       0:08:44.702 ***** 
Wednesday 01 October 2025  12:38:12 +0000 (0:00:01.212)       0:08:44.701 ***** 
ok: [127.0.0.1]

TASK [kpt : Get package differences between local and upstream: distros/sandbox/repository] ***
Wednesday 01 October 2025  12:38:12 +0000 (0:00:00.350)       0:08:45.053 ***** 
Wednesday 01 October 2025  12:38:12 +0000 (0:00:00.350)       0:08:45.052 ***** 
ok: [127.0.0.1]

TASK [kpt : Print package differences: distros/sandbox/repository] *************
Wednesday 01 October 2025  12:38:14 +0000 (0:00:01.578)       0:08:46.631 ***** 
Wednesday 01 October 2025  12:38:14 +0000 (0:00:01.578)       0:08:46.631 ***** 
ok: [127.0.0.1] => {
    "kpt_pkg_diff.stdout_lines": [
        "diff /tmp/kpt-1595827582/local-main/package-context.yaml /tmp/kpt-1595827582/target-main/package-context.yaml",
        "9c9,10",
        "<   name: mgmt-staging",
        "---",
        ">   name: example-repo",
        ">   clusterName: example-cluster-name",
        "diff /tmp/kpt-1595827582/local-main/repo-gitea.yaml /tmp/kpt-1595827582/target-main/repo-gitea.yaml",
        "4c4",
        "<   name: mgmt-staging",
        "---",
        ">   name: example-cluster-name",
        "7c7",
        "<     internal.kpt.dev/upstream-identifier: infra.nephio.org|Repository|default|example-cluster-name",
        "---",
        ">     internal.kpt.dev/upstream-identifier: 'infra.nephio.org|Repository|default|example-cluster-name'",
        "9c9",
        "<   description: mgmt-staging repository",
        "---",
        ">   description: example-cluster-name repository",
        "diff /tmp/kpt-1595827582/local-main/repo-porch.yaml /tmp/kpt-1595827582/target-main/repo-porch.yaml",
        "4c4",
        "<   name: mgmt-staging",
        "---",
        ">   name: example-cluster-name",
        "7,8c7",
        "<     internal.kpt.dev/upstream-identifier: config.porch.kpt.dev|Repository|default|example-cluster-name",
        "<     nephio.org/staging: \"true\"",
        "---",
        ">     internal.kpt.dev/upstream-identifier: 'config.porch.kpt.dev|Repository|default|example-cluster-name'",
        "11c10",
        "<   deployment: false",
        "---",
        ">   deployment: true",
        "15c14",
        "<     repo: http://172.18.0.200:3000/nephio/mgmt-staging.git",
        "---",
        ">     repo: http://172.18.0.200:3000/nephio/example-cluster-name.git",
        "17c16",
        "<       name: mgmt-staging-access-token-porch",
        "---",
        ">       name: example-cluster-name-access-token-porch",
        "diff /tmp/kpt-1595827582/local-main/token-configsync.yaml /tmp/kpt-1595827582/target-main/token-configsync.yaml",
        "4,5c4,5",
        "<   name: mgmt-staging-access-token-configsync",
        "<   namespace: config-management-system",
        "---",
        ">   name: example-site-name-access-token-configsync",
        ">   namespace: default",
        "10c10",
        "<     internal.kpt.dev/upstream-identifier: infra.nephio.org|Token|default|example-site-name-access-token-configsync",
        "---",
        ">     internal.kpt.dev/upstream-identifier: 'infra.nephio.org|Token|default|example-site-name-access-token-configsync'",
        "diff /tmp/kpt-1595827582/local-main/token-porch.yaml /tmp/kpt-1595827582/target-main/token-porch.yaml",
        "4c4",
        "<   name: mgmt-staging-access-token-porch",
        "---",
        ">   name: example-site-name-access-token-porch",
        "7c7",
        "<     internal.kpt.dev/upstream-identifier: infra.nephio.org|Token|default|example-site-name-access-token-porch",
        "---",
        ">     internal.kpt.dev/upstream-identifier: 'infra.nephio.org|Token|default|example-site-name-access-token-porch'",
        "diff /tmp/kpt-1595827582/local-main/workload-cluster.yaml /tmp/kpt-1595827582/target-main/workload-cluster.yaml",
        "8c8",
        "<     internal.kpt.dev/upstream-identifier: infra.nephio.org|WorkloadCluster|default|workload-cluster",
        "---",
        ">     internal.kpt.dev/upstream-identifier: 'infra.nephio.org|WorkloadCluster|default|workload-cluster'"
    ]
}

TASK [kpt : Check package has been initialized] ********************************
Wednesday 01 October 2025  12:38:14 +0000 (0:00:00.073)       0:08:46.705 ***** 
Wednesday 01 October 2025  12:38:14 +0000 (0:00:00.073)       0:08:46.705 ***** 
ok: [127.0.0.1]

TASK [kpt : Init package: distros/sandbox/repository] **************************
Wednesday 01 October 2025  12:38:14 +0000 (0:00:00.313)       0:08:47.019 ***** 
Wednesday 01 October 2025  12:38:14 +0000 (0:00:00.313)       0:08:47.019 ***** 
changed: [127.0.0.1]

TASK [kpt : Print package initialization for distros/sandbox/repository] *******
Wednesday 01 October 2025  12:38:15 +0000 (0:00:00.443)       0:08:47.463 ***** 
Wednesday 01 October 2025  12:38:15 +0000 (0:00:00.443)       0:08:47.462 ***** 
ok: [127.0.0.1] => {
    "kpt_live_init": {
        "changed": true,
        "cmd": "/usr/local/bin/kpt live init /tmp/repository/mgmt-staging --context kubernetes-admin@kubernetes",
        "failed": false,
        "rc": 0,
        "stdout": "",
        "stdout_lines": []
    }
}

TASK [kpt : Apply package: distros/sandbox/repository] *************************
Wednesday 01 October 2025  12:38:15 +0000 (0:00:00.068)       0:08:47.532 ***** 
Wednesday 01 October 2025  12:38:15 +0000 (0:00:00.068)       0:08:47.531 ***** 
ok: [127.0.0.1]

TASK [kpt : Export job ids array] **********************************************
Wednesday 01 October 2025  12:38:15 +0000 (0:00:00.362)       0:08:47.894 ***** 
Wednesday 01 October 2025  12:38:15 +0000 (0:00:00.362)       0:08:47.893 ***** 
ok: [127.0.0.1]

TASK [kpt : Print job ids] *****************************************************
Wednesday 01 October 2025  12:38:15 +0000 (0:00:00.067)       0:08:47.962 ***** 
Wednesday 01 October 2025  12:38:15 +0000 (0:00:00.067)       0:08:47.961 ***** 
ok: [127.0.0.1] => {
    "all_kpt_apply": [
        {
            "ansible_job_id": "j471778989149.139662",
            "attempts": 1,
            "changed": false,
            "failed": 0,
            "finished": 0,
            "results_file": "/home/rehanfazal/.ansible_async/j471778989149.139662",
            "started": 1
        },
        {
            "ansible_job_id": "j803293993184.140715",
            "attempts": 1,
            "changed": false,
            "failed": 0,
            "finished": 0,
            "results_file": "/home/rehanfazal/.ansible_async/j803293993184.140715",
            "started": 1
        },
        {
            "ansible_job_id": "j532688661944.142286",
            "attempts": 1,
            "changed": false,
            "failed": 0,
            "finished": 0,
            "results_file": "/home/rehanfazal/.ansible_async/j532688661944.142286",
            "started": 1
        }
    ]
}

TASK [Wait for packages to be applied] *****************************************
Wednesday 01 October 2025  12:38:15 +0000 (0:00:00.081)       0:08:48.043 ***** 
Wednesday 01 October 2025  12:38:15 +0000 (0:00:00.081)       0:08:48.042 ***** 
ok: [127.0.0.1] => (item={'failed': 0, 'started': 1, 'finished': 0, 'ansible_job_id': 'j471778989149.139662', 'results_file': '/home/rehanfazal/.ansible_async/j471778989149.139662', 'changed': False, 'attempts': 1})
ok: [127.0.0.1] => (item={'failed': 0, 'started': 1, 'finished': 0, 'ansible_job_id': 'j803293993184.140715', 'results_file': '/home/rehanfazal/.ansible_async/j803293993184.140715', 'changed': False, 'attempts': 1})
ok: [127.0.0.1] => (item={'failed': 0, 'started': 1, 'finished': 0, 'ansible_job_id': 'j532688661944.142286', 'results_file': '/home/rehanfazal/.ansible_async/j532688661944.142286', 'changed': False, 'attempts': 1})

TASK [Wait for repositories] ***************************************************
Wednesday 01 October 2025  12:38:16 +0000 (0:00:00.808)       0:08:48.851 ***** 
Wednesday 01 October 2025  12:38:16 +0000 (0:00:00.808)       0:08:48.850 ***** 
ok: [127.0.0.1] => (item=mgmt)
ok: [127.0.0.1] => (item=mgmt-staging)

PLAY RECAP *********************************************************************
127.0.0.1                  : ok=391  changed=54   unreachable=0    failed=0    skipped=26   rescued=0    ignored=0   

Playbook run took 0 days, 0 hours, 8 minutes, 50 seconds
Wednesday 01 October 2025  12:38:18 +0000 (0:00:01.741)       0:08:50.593 ***** 
=============================================================================== 
kpt : Apply package: distros/sandbox/metallb --------------------------- 68.59s
kpt : Apply package: nephio/core/porch --------------------------------- 63.43s
kpt : Apply package: nephio/optional/argo-cd-full ---------------------- 52.87s
kpt : Apply package: nephio/optional/webui ----------------------------- 42.38s
kpt : Apply package: nephio/optional/fluxcd ---------------------------- 21.59s
kpt : Apply package: infra/capi/cluster-capi --------------------------- 21.53s
kpt : Apply package: nephio/core/nephio-operator ----------------------- 21.35s
kpt : Apply package: infra/capi/cluster-capi-infrastructure-docker ----- 10.96s
install : Create stock repositories ------------------------------------- 7.30s
andrewrothstein.unarchivedeps : Install unarchive ansible module required OS pkgs... --- 6.06s
install : Wait for deployments in namespace argocd ---------------------- 5.90s
install : Wait for stock repositories ----------------------------------- 5.81s
kpt : Apply package: nephio/core/configsync ----------------------------- 5.78s
kpt : Render package: nephio/optional/webui ----------------------------- 5.49s
Install kubernetes python package --------------------------------------- 4.93s
kpt : Get package differences between local and upstream: distros/sandbox/metallb --- 4.05s
kpt : Get package differences between local and upstream: distros/sandbox/repository --- 3.88s
install : Wait for deployments in namespace flux-system ----------------- 3.68s
bootstrap : Wait for deployments in namespace cert-manager -------------- 3.19s
install : Wait for deployments in namespace porch-system ---------------- 2.98s
Wednesday 01 October 2025  12:38:18 +0000 (0:00:01.743)       0:08:50.594 ***** 
=============================================================================== 
kpt ------------------------------------------------------------------- 436.72s
install ---------------------------------------------------------------- 45.85s
bootstrap -------------------------------------------------------------- 25.54s
andrewrothstein.unarchivedeps ------------------------------------------- 6.11s
andrewrothstein.kpt ----------------------------------------------------- 4.99s
ansible.builtin.pip ----------------------------------------------------- 4.93s
gather_facts ------------------------------------------------------------ 2.04s
kubernetes.core.k8s ----------------------------------------------------- 1.74s
andrewrothstein.git ----------------------------------------------------- 1.62s
ansible.builtin.async_status -------------------------------------------- 0.81s
ansible.builtin.include_role -------------------------------------------- 0.23s
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
total ----------------------------------------------------------------- 530.58s
Done installing Nephio Sandbox Environment
951 secs
Done Nephio Execution

Nephio installation complete. All logs saved in /home/rehanfazal/k8s-setup.log
